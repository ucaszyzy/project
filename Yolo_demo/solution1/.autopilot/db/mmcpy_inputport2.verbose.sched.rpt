

================================================================
== Vivado HLS Report for 'mmcpy_inputport2'
================================================================
* Date:           Thu Jul 29 20:17:05 2021

* Version:        2018.2 (Build 2258646 on Thu Jun 14 20:25:20 MDT 2018)
* Project:        Yolo_demo
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|     8.750|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    1|   43|    1|   43|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------------------------------------+-----+-----+----------+-----------+-----------+--------+----------+
        |                                        |  Latency  | Iteration|  Initiation Interval  |  Trip  |          |
        |                Loop Name               | min | max |  Latency |  achieved |   target  |  Count | Pipelined|
        +----------------------------------------+-----+-----+----------+-----------+-----------+--------+----------+
        |- memcpy.input_memcpy_buffer.gep.input  |    0|   34|         3|          1|          1| 0 ~ 33 |    yes   |
        +----------------------------------------+-----+-----+----------+-----------+-----------+--------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 3


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 12
* Pipeline : 1
  Pipeline-0 : II = 1, D = 3, States = { 9 10 11 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / (enable)
	12  / (!enable)
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	12  / (exitcond)
	10  / (!exitcond)
10 --> 
	11  / true
11 --> 
	9  / true
12 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 2.52>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%RowIntNum_read = call i6 @_ssdm_op_Read.ap_auto.i6(i6 %RowIntNum)"   --->   Operation 13 'read' 'RowIntNum_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%RowOffset_read = call i31 @_ssdm_op_Read.ap_auto.i31(i31 %RowOffset)"   --->   Operation 14 'read' 'RowOffset_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%TN_MIN_V_read = call i3 @_ssdm_op_Read.ap_auto.i3(i3 %TN_MIN_V)"   --->   Operation 15 'read' 'TN_MIN_V_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%input_offset_read = call i30 @_ssdm_op_Read.ap_auto.i30(i30 %input_offset)"   --->   Operation 16 'read' 'input_offset_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%input_offset_cast = zext i30 %input_offset_read to i32"   --->   Operation 17 'zext' 'input_offset_cast' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32* %input_r, [6 x i8]* @p_str16, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 512, [10 x i8]* @p_str20, [6 x i8]* @p_str18, [1 x i8]* @p_str1, i32 1, i32 16, i32 64, i32 16, [1 x i8]* @p_str1, [1 x i8]* @p_str1)"   --->   Operation 18 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (1.13ns)   --->   "%enable = icmp ugt i3 %TN_MIN_V_read, 2" [cnn.cpp:48]   --->   Operation 19 'icmp' 'enable' <Predicate = true> <Delay = 1.13> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.13> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "br i1 %enable, label %1, label %._crit_edge" [cnn.cpp:49]   --->   Operation 20 'br' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%tmp_cast = sext i31 %RowOffset_read to i32" [cnn.cpp:52]   --->   Operation 21 'sext' 'tmp_cast' <Predicate = (enable)> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (2.52ns)   --->   "%sum = add i32 %tmp_cast, %input_offset_cast" [cnn.cpp:52]   --->   Operation 22 'add' 'sum' <Predicate = (enable)> <Delay = 2.52> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 2 <SV = 1> <Delay = 8.75>
ST_2 : Operation 23 [1/1] (0.00ns)   --->   "%sum_cast = sext i32 %sum to i64" [cnn.cpp:52]   --->   Operation 23 'sext' 'sum_cast' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 24 [1/1] (0.00ns)   --->   "%input_addr = getelementptr i32* %input_r, i64 %sum_cast" [cnn.cpp:52]   --->   Operation 24 'getelementptr' 'input_addr' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 25 [1/1] (0.00ns)   --->   "%tmp_s = zext i6 %RowIntNum_read to i32" [cnn.cpp:52]   --->   Operation 25 'zext' 'tmp_s' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 26 [7/7] (8.75ns)   --->   "%input_addr_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %input_addr, i32 %tmp_s)" [cnn.cpp:52]   --->   Operation 26 'readreq' 'input_addr_rd_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 3 <SV = 2> <Delay = 8.75>
ST_3 : Operation 27 [6/7] (8.75ns)   --->   "%input_addr_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %input_addr, i32 %tmp_s)" [cnn.cpp:52]   --->   Operation 27 'readreq' 'input_addr_rd_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 4 <SV = 3> <Delay = 8.75>
ST_4 : Operation 28 [5/7] (8.75ns)   --->   "%input_addr_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %input_addr, i32 %tmp_s)" [cnn.cpp:52]   --->   Operation 28 'readreq' 'input_addr_rd_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 5 <SV = 4> <Delay = 8.75>
ST_5 : Operation 29 [4/7] (8.75ns)   --->   "%input_addr_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %input_addr, i32 %tmp_s)" [cnn.cpp:52]   --->   Operation 29 'readreq' 'input_addr_rd_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 6 <SV = 5> <Delay = 8.75>
ST_6 : Operation 30 [3/7] (8.75ns)   --->   "%input_addr_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %input_addr, i32 %tmp_s)" [cnn.cpp:52]   --->   Operation 30 'readreq' 'input_addr_rd_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 7 <SV = 6> <Delay = 8.75>
ST_7 : Operation 31 [2/7] (8.75ns)   --->   "%input_addr_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %input_addr, i32 %tmp_s)" [cnn.cpp:52]   --->   Operation 31 'readreq' 'input_addr_rd_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 8 <SV = 7> <Delay = 8.75>
ST_8 : Operation 32 [1/7] (8.75ns)   --->   "%input_addr_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.i32P(i32* %input_addr, i32 %tmp_s)" [cnn.cpp:52]   --->   Operation 32 'readreq' 'input_addr_rd_req' <Predicate = true> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_8 : Operation 33 [1/1] (1.76ns)   --->   "br label %burst.rd.header"   --->   Operation 33 'br' <Predicate = true> <Delay = 1.76>

State 9 <SV = 8> <Delay = 1.82>
ST_9 : Operation 34 [1/1] (0.00ns)   --->   "%indvar = phi i6 [ 0, %1 ], [ %indvar_next, %burst.rd.body ]"   --->   Operation 34 'phi' 'indvar' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 35 [1/1] (1.42ns)   --->   "%exitcond = icmp eq i6 %indvar, %RowIntNum_read"   --->   Operation 35 'icmp' 'exitcond' <Predicate = true> <Delay = 1.42> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.13> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_9 : Operation 36 [1/1] (0.00ns)   --->   "%empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 0, i64 33, i64 0)"   --->   Operation 36 'speclooptripcount' 'empty' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 37 [1/1] (1.82ns)   --->   "%indvar_next = add i6 %indvar, 1"   --->   Operation 37 'add' 'indvar_next' <Predicate = true> <Delay = 1.82> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_9 : Operation 38 [1/1] (0.00ns)   --->   "br i1 %exitcond, label %._crit_edge.loopexit, label %burst.rd.body"   --->   Operation 38 'br' <Predicate = true> <Delay = 0.00>

State 10 <SV = 9> <Delay = 8.75>
ST_10 : Operation 39 [1/1] (8.75ns)   --->   "%input_addr_read = call i32 @_ssdm_op_Read.m_axi.i32P(i32* %input_addr)" [cnn.cpp:52]   --->   Operation 39 'read' 'input_addr_read' <Predicate = (!exitcond)> <Delay = 8.75> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 11 <SV = 10> <Delay = 2.32>
ST_11 : Operation 40 [1/1] (0.00ns)   --->   "%burstread_rbegin = call i32 (...)* @_ssdm_op_SpecRegionBegin([17 x i8]* @burstread_OC_region_s)"   --->   Operation 40 'specregionbegin' 'burstread_rbegin' <Predicate = (!exitcond)> <Delay = 0.00>
ST_11 : Operation 41 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @p_str94)"   --->   Operation 41 'specpipeline' <Predicate = (!exitcond)> <Delay = 0.00>
ST_11 : Operation 42 [1/1] (0.00ns)   --->   "%empty_23 = call i32 (...)* @_ssdm_op_SpecLoopName([37 x i8]* @memcpy_OC_input_memc)"   --->   Operation 42 'specloopname' 'empty_23' <Predicate = (!exitcond)> <Delay = 0.00>
ST_11 : Operation 43 [1/1] (0.00ns)   --->   "%indvar1 = zext i6 %indvar to i64"   --->   Operation 43 'zext' 'indvar1' <Predicate = (!exitcond)> <Delay = 0.00>
ST_11 : Operation 44 [1/1] (0.00ns)   --->   "%input_memcpy_buffer_s = getelementptr [28 x i32]* %input_memcpy_buffer, i64 0, i64 %indvar1" [cnn.cpp:52]   --->   Operation 44 'getelementptr' 'input_memcpy_buffer_s' <Predicate = (!exitcond)> <Delay = 0.00>
ST_11 : Operation 45 [1/1] (2.32ns)   --->   "store i32 %input_addr_read, i32* %input_memcpy_buffer_s, align 4" [cnn.cpp:52]   --->   Operation 45 'store' <Predicate = (!exitcond)> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 28> <RAM>
ST_11 : Operation 46 [1/1] (0.00ns)   --->   "%burstread_rend = call i32 (...)* @_ssdm_op_SpecRegionEnd([17 x i8]* @burstread_OC_region_s, i32 %burstread_rbegin)"   --->   Operation 46 'specregionend' 'burstread_rend' <Predicate = (!exitcond)> <Delay = 0.00>
ST_11 : Operation 47 [1/1] (0.00ns)   --->   "br label %burst.rd.header"   --->   Operation 47 'br' <Predicate = (!exitcond)> <Delay = 0.00>

State 12 <SV = 9> <Delay = 0.00>
ST_12 : Operation 48 [1/1] (0.00ns)   --->   "br label %._crit_edge"   --->   Operation 48 'br' <Predicate = (enable)> <Delay = 0.00>
ST_12 : Operation 49 [1/1] (0.00ns)   --->   "ret void" [cnn.cpp:55]   --->   Operation 49 'ret' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 2.52ns
The critical path consists of the following:
	wire read on port 'RowOffset' [8]  (0 ns)
	'add' operation ('sum', cnn.cpp:52) [17]  (2.52 ns)

 <State 2>: 8.75ns
The critical path consists of the following:
	'getelementptr' operation ('input_addr', cnn.cpp:52) [19]  (0 ns)
	bus request on port 'input_r' (cnn.cpp:52) [21]  (8.75 ns)

 <State 3>: 8.75ns
The critical path consists of the following:
	bus request on port 'input_r' (cnn.cpp:52) [21]  (8.75 ns)

 <State 4>: 8.75ns
The critical path consists of the following:
	bus request on port 'input_r' (cnn.cpp:52) [21]  (8.75 ns)

 <State 5>: 8.75ns
The critical path consists of the following:
	bus request on port 'input_r' (cnn.cpp:52) [21]  (8.75 ns)

 <State 6>: 8.75ns
The critical path consists of the following:
	bus request on port 'input_r' (cnn.cpp:52) [21]  (8.75 ns)

 <State 7>: 8.75ns
The critical path consists of the following:
	bus request on port 'input_r' (cnn.cpp:52) [21]  (8.75 ns)

 <State 8>: 8.75ns
The critical path consists of the following:
	bus request on port 'input_r' (cnn.cpp:52) [21]  (8.75 ns)

 <State 9>: 1.83ns
The critical path consists of the following:
	'phi' operation ('indvar') with incoming values : ('indvar_next') [24]  (0 ns)
	'add' operation ('indvar_next') [27]  (1.83 ns)

 <State 10>: 8.75ns
The critical path consists of the following:
	bus read on port 'input_r' (cnn.cpp:52) [34]  (8.75 ns)

 <State 11>: 2.32ns
The critical path consists of the following:
	'getelementptr' operation ('input_memcpy_buffer_s', cnn.cpp:52) [35]  (0 ns)
	'store' operation (cnn.cpp:52) of variable 'input_addr_read', cnn.cpp:52 on array 'input_memcpy_buffer' [36]  (2.32 ns)

 <State 12>: 0ns
The critical path consists of the following:


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
