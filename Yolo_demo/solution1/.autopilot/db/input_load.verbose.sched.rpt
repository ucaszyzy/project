

================================================================
== Vivado HLS Report for 'input_load'
================================================================
* Date:           Thu Jul 29 20:17:07 2021

* Version:        2018.2 (Build 2258646 on Thu Jun 14 20:25:20 MDT 2018)
* Project:        Yolo_demo
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|    10.166|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    ?|    ?|    ?|    ?|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------+-----+-----+----------+-----------+-----------+--------+----------+
        |          |  Latency  | Iteration|  Initiation Interval  |  Trip  |          |
        | Loop Name| min | max |  Latency |  achieved |   target  |  Count | Pipelined|
        +----------+-----+-----+----------+-----------+-----------+--------+----------+
        |- Loop 1  |    ?|    ?|  4 ~ 48  |          -|          -| 1 ~ 64 |    no    |
        +----------+-----+-----+----------+-----------+-----------+--------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 7
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / (tmp_52 & !pingpong)
	7  / (tmp_52 & pingpong)
5 --> 
	6  / true
6 --> 
	4  / true
7 --> 
	6  / true

* FSM state operations: 

State 1 <SV = 0> <Delay = 6.38>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%next_t2_0_V_1 = alloca i6"   --->   Operation 8 'alloca' 'next_t2_0_V_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%next_IsRowPixel_0_1 = alloca i1"   --->   Operation 9 'alloca' 'next_IsRowPixel_0_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%next_t22_0_V_1 = alloca i6"   --->   Operation 10 'alloca' 'next_t22_0_V_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%next_IsRowPixel2_0_1 = alloca i1"   --->   Operation 11 'alloca' 'next_IsRowPixel2_0_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%RowBeginByte_0_V_1 = alloca i1"   --->   Operation 12 'alloca' 'RowBeginByte_0_V_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%RowBeginByte_1_V_1 = alloca i1"   --->   Operation 13 'alloca' 'RowBeginByte_1_V_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%RowBeginByte_2_V_1 = alloca i1"   --->   Operation 14 'alloca' 'RowBeginByte_2_V_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%RowBeginByte_3_V_1 = alloca i1"   --->   Operation 15 'alloca' 'RowBeginByte_3_V_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%RowBeginByte2_0_V_1 = alloca i1"   --->   Operation 16 'alloca' 'RowBeginByte2_0_V_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%RowBeginByte2_1_V_1 = alloca i1"   --->   Operation 17 'alloca' 'RowBeginByte2_1_V_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%RowBeginByte2_2_V_1 = alloca i1"   --->   Operation 18 'alloca' 'RowBeginByte2_2_V_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%RowBeginByte2_3_V_1 = alloca i1"   --->   Operation 19 'alloca' 'RowBeginByte2_3_V_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%Padding_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %Padding)"   --->   Operation 20 'read' 'Padding_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%Kernel_stride_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %Kernel_stride)"   --->   Operation 21 'read' 'Kernel_stride_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%r_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %r)"   --->   Operation 22 'read' 'r_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%r_9b_V = trunc i32 %r_read to i9" [cnn.cpp:308]   --->   Operation 23 'trunc' 'r_9b_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%Kernel_stride_2b_V = trunc i32 %Kernel_stride_read to i2" [cnn.cpp:315]   --->   Operation 24 'trunc' 'Kernel_stride_2b_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "%Padding_1b_V = trunc i32 %Padding_read to i1" [cnn.cpp:317]   --->   Operation 25 'trunc' 'Padding_1b_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "%rhs_V = zext i2 %Kernel_stride_2b_V to i11" [cnn.cpp:327]   --->   Operation 26 'zext' 'rhs_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "%rhs_V_2 = zext i1 %Padding_1b_V to i12" [cnn.cpp:327]   --->   Operation 27 'zext' 'rhs_V_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 28 [1/1] (0.00ns)   --->   "%lhs_V_4 = zext i9 %r_9b_V to i11" [cnn.cpp:328]   --->   Operation 28 'zext' 'lhs_V_4' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 29 [1/1] (3.36ns)   --->   "%r_V_9 = mul i11 %rhs_V, %lhs_V_4" [cnn.cpp:328]   --->   Operation 29 'mul' 'r_V_9' <Predicate = true> <Delay = 3.36> <Core = "DSP48">   --->   Core 61 'DSP48' <Latency = 0> <II = 1> <Delay = 6.38> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_1 : Operation 30 [1/1] (0.00ns)   --->   "%lhs_V_5 = zext i11 %r_V_9 to i12" [cnn.cpp:328]   --->   Operation 30 'zext' 'lhs_V_5' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 31 [1/1] (3.02ns)   --->   "%r_V_21 = sub i12 %lhs_V_5, %rhs_V_2" [cnn.cpp:328]   --->   Operation 31 'sub' 'r_V_21' <Predicate = true> <Delay = 3.02> <Core = "DSP48">   --->   Core 61 'DSP48' <Latency = 0> <II = 1> <Delay = 6.38> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_1 : Operation 32 [1/1] (0.00ns)   --->   "%TRow_top_V = trunc i12 %r_V_21 to i10" [cnn.cpp:347]   --->   Operation 32 'trunc' 'TRow_top_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 33 [1/1] (0.00ns)   --->   "%tmp_81 = trunc i12 %r_V_21 to i6" [cnn.cpp:356]   --->   Operation 33 'trunc' 'tmp_81' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 34 [1/1] (0.00ns)   --->   "%tmp_86 = trunc i12 %r_V_21 to i1" [cnn.cpp:384]   --->   Operation 34 'trunc' 'tmp_86' <Predicate = true> <Delay = 0.00>

State 2 <SV = 1> <Delay = 10.1>
ST_2 : Operation 35 [1/1] (0.00ns)   --->   "%IHxIW_read = call i19 @_ssdm_op_Read.ap_auto.i19(i19 %IHxIW)"   --->   Operation 35 'read' 'IHxIW_read' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 36 [1/1] (0.00ns)   --->   "%Input_h_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %Input_h)"   --->   Operation 36 'read' 'Input_h_read' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 37 [1/1] (0.00ns)   --->   "%TCol_read = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %TCol)"   --->   Operation 37 'read' 'TCol_read' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 38 [1/1] (0.00ns)   --->   "%TRow_read = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %TRow)"   --->   Operation 38 'read' 'TRow_read' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 39 [1/1] (0.00ns)   --->   "%n_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %n)"   --->   Operation 39 'read' 'n_read' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 40 [1/1] (0.00ns)   --->   "%c_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %c)"   --->   Operation 40 'read' 'c_read' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 41 [1/1] (0.00ns)   --->   "%c_9b_V = trunc i32 %c_read to i9" [cnn.cpp:310]   --->   Operation 41 'trunc' 'c_9b_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 42 [1/1] (0.00ns)   --->   "%n_11b_V = trunc i32 %n_read to i11" [cnn.cpp:313]   --->   Operation 42 'trunc' 'n_11b_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 43 [1/1] (0.00ns)   --->   "%Input_h_10b_V = trunc i32 %Input_h_read to i10" [cnn.cpp:320]   --->   Operation 43 'trunc' 'Input_h_10b_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 44 [1/1] (0.00ns)   --->   "%IHxIW_18b_V = trunc i19 %IHxIW_read to i18" [cnn.cpp:324]   --->   Operation 44 'trunc' 'IHxIW_18b_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 45 [1/1] (0.00ns)   --->   "%lhs_V = zext i9 %c_9b_V to i11" [cnn.cpp:327]   --->   Operation 45 'zext' 'lhs_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 46 [1/1] (3.36ns)   --->   "%r_V = mul i11 %rhs_V, %lhs_V" [cnn.cpp:327]   --->   Operation 46 'mul' 'r_V' <Predicate = true> <Delay = 3.36> <Core = "DSP48">   --->   Core 61 'DSP48' <Latency = 0> <II = 1> <Delay = 6.38> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 47 [1/1] (0.00ns)   --->   "%lhs_V_3 = zext i11 %r_V to i12" [cnn.cpp:327]   --->   Operation 47 'zext' 'lhs_V_3' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 48 [1/1] (3.02ns)   --->   "%r_V_20 = sub i12 %lhs_V_3, %rhs_V_2" [cnn.cpp:327]   --->   Operation 48 'sub' 'r_V_20' <Predicate = true> <Delay = 3.02> <Core = "DSP48">   --->   Core 61 'DSP48' <Latency = 0> <II = 1> <Delay = 6.38> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 49 [1/1] (1.99ns)   --->   "%tmp = icmp sgt i12 %r_V_20, 0" [cnn.cpp:334]   --->   Operation 49 'icmp' 'tmp' <Predicate = true> <Delay = 1.99> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.42> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 50 [1/1] (0.00ns)   --->   "%TCol_left_V = trunc i12 %r_V_20 to i10" [cnn.cpp:335]   --->   Operation 50 'trunc' 'TCol_left_V' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 51 [1/1] (0.00ns)   --->   "%rhs_V_8_cast = zext i8 %TCol_read to i12" [cnn.cpp:339]   --->   Operation 51 'zext' 'rhs_V_8_cast' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 52 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%r_V_11 = add i12 %rhs_V_8_cast, %r_V_20" [cnn.cpp:339]   --->   Operation 52 'add' 'r_V_11' <Predicate = true> <Delay = 0.00> <Core = "TAddSub">   --->   Core 80 'TAddSub' <Latency = 0> <II = 1> <Delay = 1.89> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 53 [1/1] (3.78ns) (root node of TernaryAdder)   --->   "%r_V_12 = add i12 -1, %r_V_11" [cnn.cpp:339]   --->   Operation 53 'add' 'r_V_12' <Predicate = true> <Delay = 3.78> <Core = "TAddSub">   --->   Core 80 'TAddSub' <Latency = 0> <II = 1> <Delay = 1.89> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 54 [1/1] (0.00ns)   --->   "%tmp_76 = trunc i12 %r_V_20 to i6" [cnn.cpp:344]   --->   Operation 54 'trunc' 'tmp_76' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 55 [1/1] (0.00ns)   --->   "%tmp_77 = trunc i8 %TCol_read to i6" [cnn.cpp:344]   --->   Operation 55 'trunc' 'tmp_77' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 56 [1/1] (1.82ns)   --->   "%tmp_46 = add i6 %tmp_77, %tmp_76" [cnn.cpp:344]   --->   Operation 56 'add' 'tmp_46' <Predicate = true> <Delay = 1.82> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 57 [1/1] (1.99ns)   --->   "%tmp_48 = icmp sgt i12 %r_V_21, 0" [cnn.cpp:346]   --->   Operation 57 'icmp' 'tmp_48' <Predicate = true> <Delay = 1.99> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.42> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 58 [1/1] (0.68ns)   --->   "%TRow_top_V_1 = select i1 %tmp_48, i10 %TRow_top_V, i10 0" [cnn.cpp:346]   --->   Operation 58 'select' 'TRow_top_V_1' <Predicate = true> <Delay = 0.68> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.98> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 59 [1/1] (0.00ns)   --->   "%rhs_V_9_cast = zext i8 %TRow_read to i12" [cnn.cpp:351]   --->   Operation 59 'zext' 'rhs_V_9_cast' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 60 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%r_V_13 = add i12 %rhs_V_9_cast, %r_V_21" [cnn.cpp:351]   --->   Operation 60 'add' 'r_V_13' <Predicate = true> <Delay = 0.00> <Core = "TAddSub">   --->   Core 80 'TAddSub' <Latency = 0> <II = 1> <Delay = 1.89> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 61 [1/1] (3.78ns) (root node of TernaryAdder)   --->   "%r_V_14 = add i12 -1, %r_V_13" [cnn.cpp:351]   --->   Operation 61 'add' 'r_V_14' <Predicate = true> <Delay = 3.78> <Core = "TAddSub">   --->   Core 80 'TAddSub' <Latency = 0> <II = 1> <Delay = 1.89> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 62 [1/1] (0.00ns)   --->   "%tmp_71_cast = zext i10 %Input_h_10b_V to i12" [cnn.cpp:351]   --->   Operation 62 'zext' 'tmp_71_cast' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 63 [1/1] (1.99ns)   --->   "%tmp_49 = icmp slt i12 %r_V_14, %tmp_71_cast" [cnn.cpp:351]   --->   Operation 63 'icmp' 'tmp_49' <Predicate = true> <Delay = 1.99> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.42> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 64 [1/1] (0.00ns)   --->   "%tmp_82 = trunc i8 %TRow_read to i6" [cnn.cpp:356]   --->   Operation 64 'trunc' 'tmp_82' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 65 [1/1] (1.82ns)   --->   "%tmp_50 = add i6 %tmp_82, %tmp_81" [cnn.cpp:356]   --->   Operation 65 'add' 'tmp_50' <Predicate = true> <Delay = 1.82> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 66 [1/1] (0.00ns) (grouped into LUT with out node row_len_V)   --->   "%tmp_83 = trunc i32 %Input_h_read to i6" [cnn.cpp:356]   --->   Operation 66 'trunc' 'tmp_83' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 67 [1/1] (0.00ns) (grouped into LUT with out node row_len_V)   --->   "%tmp_20 = select i1 %tmp_49, i6 %tmp_50, i6 %tmp_83" [cnn.cpp:356]   --->   Operation 67 'select' 'tmp_20' <Predicate = true> <Delay = 0.00> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.98> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 68 [1/1] (0.00ns) (grouped into LUT with out node row_len_V)   --->   "%tmp_84 = trunc i10 %TRow_top_V_1 to i6" [cnn.cpp:356]   --->   Operation 68 'trunc' 'tmp_84' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 69 [1/1] (1.82ns) (out node of the LUT)   --->   "%row_len_V = sub i6 %tmp_20, %tmp_84" [cnn.cpp:356]   --->   Operation 69 'sub' 'row_len_V' <Predicate = true> <Delay = 1.82> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 70 [1/1] (0.00ns)   --->   "%lhs_V_6 = zext i11 %n_11b_V to i29" [cnn.cpp:358]   --->   Operation 70 'zext' 'lhs_V_6' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 71 [1/1] (0.00ns)   --->   "%rhs_V_3 = zext i18 %IHxIW_18b_V to i29" [cnn.cpp:358]   --->   Operation 71 'zext' 'rhs_V_3' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 72 [1/1] (6.38ns)   --->   "%r_V_15 = mul i29 %lhs_V_6, %rhs_V_3" [cnn.cpp:358]   --->   Operation 72 'mul' 'r_V_15' <Predicate = true> <Delay = 6.38> <Core = "DSP48">   --->   Core 61 'DSP48' <Latency = 0> <II = 1> <Delay = 6.38> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 73 [1/1] (0.00ns)   --->   "%tmp_85 = trunc i10 %TRow_top_V_1 to i1" [cnn.cpp:384]   --->   Operation 73 'trunc' 'tmp_85' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 74 [1/1] (0.97ns)   --->   "%RowSub_V = xor i1 %tmp_85, %tmp_86" [cnn.cpp:384]   --->   Operation 74 'xor' 'RowSub_V' <Predicate = true> <Delay = 0.97> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 75 [1/1] (0.00ns)   --->   "%tmp_88 = trunc i12 %r_V_20 to i1" [cnn.cpp:385]   --->   Operation 75 'trunc' 'tmp_88' <Predicate = true> <Delay = 0.00>

State 3 <SV = 2> <Delay = 8.87>
ST_3 : Operation 76 [1/1] (0.00ns)   --->   "%trow_loops_V_read = call i6 @_ssdm_op_Read.ap_auto.i6(i6 %trow_loops_V)"   --->   Operation 76 'read' 'trow_loops_V_read' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 77 [1/1] (0.00ns)   --->   "%LayerType_read = call i2 @_ssdm_op_Read.ap_auto.i2(i2 %LayerType)"   --->   Operation 77 'read' 'LayerType_read' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 78 [1/1] (0.00ns)   --->   "%TN_MIN_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %TN_MIN)"   --->   Operation 78 'read' 'TN_MIN_read' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 79 [1/1] (0.00ns)   --->   "%Input_w_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %Input_w)"   --->   Operation 79 'read' 'Input_w_read' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 80 [1/1] (0.00ns)   --->   "%input3_offset_read = call i30 @_ssdm_op_Read.ap_auto.i30(i30 %input3_offset)"   --->   Operation 80 'read' 'input3_offset_read' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 81 [1/1] (0.00ns)   --->   "%input2_offset_read = call i30 @_ssdm_op_Read.ap_auto.i30(i30 %input2_offset)"   --->   Operation 81 'read' 'input2_offset_read' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 82 [1/1] (0.00ns)   --->   "%input1_offset_read = call i30 @_ssdm_op_Read.ap_auto.i30(i30 %input1_offset)"   --->   Operation 82 'read' 'input1_offset_read' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 83 [1/1] (0.00ns)   --->   "%input_offset_read = call i30 @_ssdm_op_Read.ap_auto.i30(i30 %input_offset)"   --->   Operation 83 'read' 'input_offset_read' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 84 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32* %input3, [6 x i8]* @p_str16, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 512, [10 x i8]* @p_str21, [6 x i8]* @p_str18, [1 x i8]* @p_str1, i32 1, i32 16, i32 64, i32 16, [1 x i8]* @p_str1, [1 x i8]* @p_str1)"   --->   Operation 84 'specinterface' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 85 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32* %input2, [6 x i8]* @p_str16, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 512, [10 x i8]* @p_str20, [6 x i8]* @p_str18, [1 x i8]* @p_str1, i32 1, i32 16, i32 64, i32 16, [1 x i8]* @p_str1, [1 x i8]* @p_str1)"   --->   Operation 85 'specinterface' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 86 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32* %input1, [6 x i8]* @p_str16, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 512, [10 x i8]* @p_str19, [6 x i8]* @p_str18, [1 x i8]* @p_str1, i32 1, i32 1, i32 64, i32 64, [1 x i8]* @p_str1, [1 x i8]* @p_str1)"   --->   Operation 86 'specinterface' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 87 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32* %input_r, [6 x i8]* @p_str16, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 512, [10 x i8]* @p_str17, [6 x i8]* @p_str18, [1 x i8]* @p_str1, i32 1, i32 1, i32 64, i32 64, [1 x i8]* @p_str1, [1 x i8]* @p_str1)"   --->   Operation 87 'specinterface' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 88 [1/1] (0.00ns)   --->   "%Input_w_9b_V = trunc i32 %Input_w_read to i9" [cnn.cpp:319]   --->   Operation 88 'trunc' 'Input_w_9b_V' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 89 [1/1] (0.00ns)   --->   "%TN_MIN_3b_V = trunc i32 %TN_MIN_read to i3" [cnn.cpp:323]   --->   Operation 89 'trunc' 'TN_MIN_3b_V' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 90 [1/1] (0.68ns)   --->   "%TCol_left_V_1 = select i1 %tmp, i10 %TCol_left_V, i10 0" [cnn.cpp:334]   --->   Operation 90 'select' 'TCol_left_V_1' <Predicate = true> <Delay = 0.68> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.98> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 91 [1/1] (0.00ns)   --->   "%tmp_cast = zext i9 %Input_w_9b_V to i12" [cnn.cpp:339]   --->   Operation 91 'zext' 'tmp_cast' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 92 [1/1] (1.99ns)   --->   "%tmp_s = icmp slt i12 %r_V_12, %tmp_cast" [cnn.cpp:339]   --->   Operation 92 'icmp' 'tmp_s' <Predicate = true> <Delay = 1.99> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.42> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 93 [1/1] (0.00ns) (grouped into LUT with out node col_len_V)   --->   "%tmp_78 = trunc i32 %Input_w_read to i6" [cnn.cpp:344]   --->   Operation 93 'trunc' 'tmp_78' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 94 [1/1] (0.00ns) (grouped into LUT with out node col_len_V)   --->   "%tmp_18 = select i1 %tmp_s, i6 %tmp_46, i6 %tmp_78" [cnn.cpp:344]   --->   Operation 94 'select' 'tmp_18' <Predicate = true> <Delay = 0.00> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.98> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 95 [1/1] (0.00ns) (grouped into LUT with out node col_len_V)   --->   "%tmp_79 = trunc i10 %TCol_left_V_1 to i6" [cnn.cpp:344]   --->   Operation 95 'trunc' 'tmp_79' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 96 [1/1] (1.82ns) (out node of the LUT)   --->   "%col_len_V = sub i6 %tmp_18, %tmp_79" [cnn.cpp:344]   --->   Operation 96 'sub' 'col_len_V' <Predicate = true> <Delay = 1.82> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 97 [1/1] (0.00ns)   --->   "%lhs_V_7 = zext i10 %TRow_top_V_1 to i19" [cnn.cpp:358]   --->   Operation 97 'zext' 'lhs_V_7' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 98 [1/1] (0.00ns)   --->   "%rhs_V_4 = zext i9 %Input_w_9b_V to i19" [cnn.cpp:358]   --->   Operation 98 'zext' 'rhs_V_4' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 99 [1/1] (3.36ns)   --->   "%r_V_16 = mul i19 %rhs_V_4, %lhs_V_7" [cnn.cpp:358]   --->   Operation 99 'mul' 'r_V_16' <Predicate = true> <Delay = 3.36> <Core = "DSP48">   --->   Core 61 'DSP48' <Latency = 0> <II = 1> <Delay = 6.38> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 100 [1/1] (0.00ns)   --->   "%lhs_V_8 = zext i29 %r_V_15 to i30" [cnn.cpp:358]   --->   Operation 100 'zext' 'lhs_V_8' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 101 [1/1] (0.00ns)   --->   "%rhs_V_5 = zext i19 %r_V_16 to i30" [cnn.cpp:358]   --->   Operation 101 'zext' 'rhs_V_5' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 102 [1/1] (3.02ns)   --->   "%r_V_17 = add i30 %rhs_V_5, %lhs_V_8" [cnn.cpp:358]   --->   Operation 102 'add' 'r_V_17' <Predicate = true> <Delay = 3.02> <Core = "DSP48">   --->   Core 61 'DSP48' <Latency = 0> <II = 1> <Delay = 6.38> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 103 [1/1] (0.00ns)   --->   "%rhs_V_13_cast = zext i10 %TCol_left_V_1 to i30" [cnn.cpp:358]   --->   Operation 103 'zext' 'rhs_V_13_cast' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 104 [1/1] (2.49ns)   --->   "%r_V_18 = add i30 %rhs_V_13_cast, %r_V_17" [cnn.cpp:358]   --->   Operation 104 'add' 'r_V_18' <Predicate = true> <Delay = 2.49> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 105 [1/1] (1.66ns)   --->   "%sel_tmp = icmp eq i9 %Input_w_9b_V, 13" [cnn.cpp:319]   --->   Operation 105 'icmp' 'sel_tmp' <Predicate = true> <Delay = 1.66> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.42> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 106 [1/1] (1.66ns)   --->   "%sel_tmp2 = icmp eq i9 %Input_w_9b_V, 26" [cnn.cpp:319]   --->   Operation 106 'icmp' 'sel_tmp2' <Predicate = true> <Delay = 1.66> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.42> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 107 [1/1] (0.97ns)   --->   "%tmp_21 = or i1 %sel_tmp2, %sel_tmp" [cnn.cpp:319]   --->   Operation 107 'or' 'tmp_21' <Predicate = true> <Delay = 0.97> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 108 [1/1] (0.96ns)   --->   "%p_2 = select i1 %tmp_21, i9 52, i9 %Input_w_9b_V" [cnn.cpp:319]   --->   Operation 108 'select' 'p_2' <Predicate = true> <Delay = 0.96> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.98> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 109 [1/1] (1.18ns)   --->   "%p_3 = select i1 %tmp_21, i6 -12, i6 %col_len_V" [cnn.cpp:319]   --->   Operation 109 'select' 'p_3' <Predicate = true> <Delay = 1.18> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.98> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 110 [1/1] (0.00ns) (grouped into LUT with out node p_4)   --->   "%sel_tmp9 = select i1 %sel_tmp2, i3 2, i3 -4" [cnn.cpp:319]   --->   Operation 110 'select' 'sel_tmp9' <Predicate = true> <Delay = 0.00> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.98> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 111 [1/1] (0.98ns) (out node of the LUT)   --->   "%p_4 = select i1 %tmp_21, i3 %sel_tmp9, i3 1" [cnn.cpp:319]   --->   Operation 111 'select' 'p_4' <Predicate = true> <Delay = 0.98> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.98> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 112 [1/1] (0.00ns)   --->   "%tmp_87 = trunc i10 %TCol_left_V_1 to i1" [cnn.cpp:385]   --->   Operation 112 'trunc' 'tmp_87' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 113 [1/1] (0.97ns)   --->   "%ColSub_V = xor i1 %tmp_87, %tmp_88" [cnn.cpp:385]   --->   Operation 113 'xor' 'ColSub_V' <Predicate = true> <Delay = 0.97> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 114 [1/1] (0.00ns)   --->   "%lhs_V_20_cast = zext i6 %trow_loops_V_read to i7" [cnn.cpp:395]   --->   Operation 114 'zext' 'lhs_V_20_cast' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 115 [1/1] (1.82ns)   --->   "%r_V_19 = add i7 1, %lhs_V_20_cast" [cnn.cpp:395]   --->   Operation 115 'add' 'r_V_19' <Predicate = true> <Delay = 1.82> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 116 [1/1] (0.00ns)   --->   "%tmp_81_cast = zext i1 %RowSub_V to i6" [cnn.cpp:395]   --->   Operation 116 'zext' 'tmp_81_cast' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 117 [1/1] (0.00ns)   --->   "%tmp_51 = zext i3 %p_4 to i6" [cnn.cpp:395]   --->   Operation 117 'zext' 'tmp_51' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 118 [1/1] (0.00ns)   --->   "%lhs_V_1 = zext i6 %row_len_V to i7" [cnn.cpp:397]   --->   Operation 118 'zext' 'lhs_V_1' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 119 [1/1] (0.00ns)   --->   "%rhs_V_6 = zext i1 %RowSub_V to i7" [cnn.cpp:397]   --->   Operation 119 'zext' 'rhs_V_6' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 120 [1/1] (1.82ns)   --->   "%r_V_1 = add i7 %rhs_V_6, %lhs_V_1" [cnn.cpp:397]   --->   Operation 120 'add' 'r_V_1' <Predicate = true> <Delay = 1.82> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 121 [1/1] (1.76ns)   --->   "br label %.preheader" [cnn.cpp:395]   --->   Operation 121 'br' <Predicate = true> <Delay = 1.76>

State 4 <SV = 3> <Delay = 2.46>
ST_4 : Operation 122 [1/1] (0.00ns)   --->   "%p_5 = phi i6 [ 0, %_ifconv ], [ %TMP_t2_V, %2 ]"   --->   Operation 122 'phi' 'p_5' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 123 [1/1] (0.00ns)   --->   "%p_6 = phi i6 [ 0, %_ifconv ], [ %t2_V, %2 ]"   --->   Operation 123 'phi' 'p_6' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 124 [1/1] (0.00ns)   --->   "%pingpong = phi i1 [ true, %_ifconv ], [ %pingpong_1, %2 ]"   --->   Operation 124 'phi' 'pingpong' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 125 [1/1] (0.00ns)   --->   "%tmp_84_cast = zext i6 %p_5 to i7" [cnn.cpp:395]   --->   Operation 125 'zext' 'tmp_84_cast' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 126 [1/1] (1.48ns)   --->   "%tmp_52 = icmp ult i7 %tmp_84_cast, %r_V_19" [cnn.cpp:395]   --->   Operation 126 'icmp' 'tmp_52' <Predicate = true> <Delay = 1.48> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.42> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 127 [1/1] (0.00ns)   --->   "%empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 1, i64 64, i64 0)"   --->   Operation 127 'speclooptripcount' 'empty' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 128 [1/1] (1.82ns)   --->   "%TMP_t2_V = add i6 %p_5, 1" [cnn.cpp:395]   --->   Operation 128 'add' 'TMP_t2_V' <Predicate = true> <Delay = 1.82> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 129 [1/1] (0.00ns)   --->   "br i1 %tmp_52, label %._crit_edge1107, label %3" [cnn.cpp:395]   --->   Operation 129 'br' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 130 [1/1] (0.00ns)   --->   "%tmp_86_cast = zext i6 %p_6 to i7" [cnn.cpp:397]   --->   Operation 130 'zext' 'tmp_86_cast' <Predicate = (tmp_52)> <Delay = 0.00>
ST_4 : Operation 131 [1/1] (1.48ns)   --->   "%tmp_53 = icmp ult i7 %tmp_86_cast, %r_V_1" [cnn.cpp:397]   --->   Operation 131 'icmp' 'tmp_53' <Predicate = (tmp_52)> <Delay = 1.48> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.42> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 132 [1/1] (1.42ns)   --->   "%ult = icmp ult i6 %p_6, %tmp_81_cast" [cnn.cpp:397]   --->   Operation 132 'icmp' 'ult' <Predicate = (tmp_52)> <Delay = 1.42> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.42> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 133 [1/1] (0.00ns) (grouped into LUT with out node IsRowPixel)   --->   "%rev = xor i1 %ult, true" [cnn.cpp:397]   --->   Operation 133 'xor' 'rev' <Predicate = (tmp_52)> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 134 [1/1] (0.97ns) (out node of the LUT)   --->   "%IsRowPixel = and i1 %tmp_53, %rev" [cnn.cpp:397]   --->   Operation 134 'and' 'IsRowPixel' <Predicate = (tmp_52)> <Delay = 0.97> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 135 [1/1] (1.42ns)   --->   "%tmp_54 = icmp ne i6 %p_5, %trow_loops_V_read" [cnn.cpp:404]   --->   Operation 135 'icmp' 'tmp_54' <Predicate = (tmp_52)> <Delay = 1.42> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.42> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 136 [1/1] (0.00ns)   --->   "br i1 %pingpong, label %0, label %1" [cnn.cpp:399]   --->   Operation 136 'br' <Predicate = (tmp_52)> <Delay = 0.00>
ST_4 : Operation 137 [1/1] (1.42ns)   --->   "%tmp_58 = icmp ne i6 %p_5, 0" [cnn.cpp:419]   --->   Operation 137 'icmp' 'tmp_58' <Predicate = (tmp_52 & !pingpong)> <Delay = 1.42> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.42> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 138 [1/1] (1.42ns)   --->   "%tmp_56 = icmp ne i6 %p_5, 0" [cnn.cpp:408]   --->   Operation 138 'icmp' 'tmp_56' <Predicate = (tmp_52 & pingpong)> <Delay = 1.42> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.42> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 139 [1/1] (0.00ns)   --->   "ret void" [cnn.cpp:427]   --->   Operation 139 'ret' <Predicate = (!tmp_52)> <Delay = 0.00>

State 5 <SV = 4> <Delay = 7.71>
ST_5 : Operation 140 [1/1] (0.00ns)   --->   "%next_t2_0_V_1_load = load i6* %next_t2_0_V_1" [cnn.cpp:419]   --->   Operation 140 'load' 'next_t2_0_V_1_load' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 141 [1/1] (0.00ns)   --->   "%next_IsRowPixel_0_1_1 = load i1* %next_IsRowPixel_0_1" [cnn.cpp:419]   --->   Operation 141 'load' 'next_IsRowPixel_0_1_1' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 142 [1/1] (0.00ns)   --->   "%RowBeginByte_0_V_1_1 = load i1* %RowBeginByte_0_V_1" [cnn.cpp:419]   --->   Operation 142 'load' 'RowBeginByte_0_V_1_1' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 143 [1/1] (0.00ns)   --->   "%RowBeginByte_1_V_1_1 = load i1* %RowBeginByte_1_V_1" [cnn.cpp:419]   --->   Operation 143 'load' 'RowBeginByte_1_V_1_1' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 144 [1/1] (0.00ns)   --->   "%RowBeginByte_2_V_1_1 = load i1* %RowBeginByte_2_V_1" [cnn.cpp:419]   --->   Operation 144 'load' 'RowBeginByte_2_V_1_1' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 145 [1/1] (0.00ns)   --->   "%RowBeginByte_3_V_1_1 = load i1* %RowBeginByte_3_V_1" [cnn.cpp:419]   --->   Operation 145 'load' 'RowBeginByte_3_V_1_1' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 146 [1/1] (0.00ns)   --->   "%RowBeginByte2_0_V_1_2 = load i1* %RowBeginByte2_0_V_1" [cnn.cpp:415]   --->   Operation 146 'load' 'RowBeginByte2_0_V_1_2' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 147 [1/1] (0.00ns)   --->   "%RowBeginByte2_1_V_1_2 = load i1* %RowBeginByte2_1_V_1" [cnn.cpp:415]   --->   Operation 147 'load' 'RowBeginByte2_1_V_1_2' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 148 [1/1] (0.00ns)   --->   "%RowBeginByte2_2_V_1_2 = load i1* %RowBeginByte2_2_V_1" [cnn.cpp:415]   --->   Operation 148 'load' 'RowBeginByte2_2_V_1_2' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 149 [1/1] (0.00ns)   --->   "%RowBeginByte2_3_V_1_2 = load i1* %RowBeginByte2_3_V_1" [cnn.cpp:415]   --->   Operation 149 'load' 'RowBeginByte2_3_V_1_2' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 150 [2/2] (5.01ns)   --->   "%tmp_57 = call fastcc { i6, i1, i1, i1, i1, i1 } @mmcpy_inputpixel_m2b(i32* %input_r, i30 %input_offset_read, i32* %input1, i30 %input1_offset_read, i32* %input2, i30 %input2_offset_read, i32* %input3, i30 %input3_offset_read, [28 x i32]* nocapture @input_memcpy_buffer0_1, [28 x i32]* nocapture @input_memcpy_buffer1_1, [28 x i32]* nocapture @input_memcpy_buffer2_1, [28 x i32]* nocapture @input_memcpy_buffer3_1, i1 %RowBeginByte2_0_V_1_2, i1 %RowBeginByte2_1_V_1_2, i1 %RowBeginByte2_2_V_1_2, i1 %RowBeginByte2_3_V_1_2, i3 %TN_MIN_3b_V, i6 %p_6, i30 %r_V_18, i9 %p_2, i18 %IHxIW_18b_V, i6 %p_3, i1 %IsRowPixel, i1 %tmp_54)" [cnn.cpp:415]   --->   Operation 150 'call' 'tmp_57' <Predicate = true> <Delay = 5.01> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_5 : Operation 151 [2/2] (7.71ns)   --->   "call fastcc void @copy_input2buf_row([2809 x i16]* %input_buffer_0, [2809 x i16]* %input_buffer_1, [2809 x i16]* %input_buffer_2, [2809 x i16]* %input_buffer_3, i6 %row_len_V, i6 %col_len_V, i1 %RowSub_V, i1 %ColSub_V, [28 x i32]* @input_memcpy_buffer0, [28 x i32]* @input_memcpy_buffer1, [28 x i32]* @input_memcpy_buffer2, [28 x i32]* @input_memcpy_buffer3, i1 %RowBeginByte_0_V_1_1, i1 %RowBeginByte_1_V_1_1, i1 %RowBeginByte_2_V_1_1, i1 %RowBeginByte_3_V_1_1, i8 %TCol_read, i2 %LayerType_read, i6 %next_t2_0_V_1_load, i1 %next_IsRowPixel_0_1_1, i1 %tmp_58, i3 %p_4)" [cnn.cpp:419]   --->   Operation 151 'call' <Predicate = true> <Delay = 7.71> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 6 <SV = 5> <Delay = 1.82>
ST_6 : Operation 152 [1/2] (1.76ns)   --->   "%tmp_57 = call fastcc { i6, i1, i1, i1, i1, i1 } @mmcpy_inputpixel_m2b(i32* %input_r, i30 %input_offset_read, i32* %input1, i30 %input1_offset_read, i32* %input2, i30 %input2_offset_read, i32* %input3, i30 %input3_offset_read, [28 x i32]* nocapture @input_memcpy_buffer0_1, [28 x i32]* nocapture @input_memcpy_buffer1_1, [28 x i32]* nocapture @input_memcpy_buffer2_1, [28 x i32]* nocapture @input_memcpy_buffer3_1, i1 %RowBeginByte2_0_V_1_2, i1 %RowBeginByte2_1_V_1_2, i1 %RowBeginByte2_2_V_1_2, i1 %RowBeginByte2_3_V_1_2, i3 %TN_MIN_3b_V, i6 %p_6, i30 %r_V_18, i9 %p_2, i18 %IHxIW_18b_V, i6 %p_3, i1 %IsRowPixel, i1 %tmp_54)" [cnn.cpp:415]   --->   Operation 152 'call' 'tmp_57' <Predicate = (!pingpong)> <Delay = 1.76> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_6 : Operation 153 [1/1] (0.00ns)   --->   "%next_t22_0_V = extractvalue { i6, i1, i1, i1, i1, i1 } %tmp_57, 0" [cnn.cpp:415]   --->   Operation 153 'extractvalue' 'next_t22_0_V' <Predicate = (!pingpong)> <Delay = 0.00>
ST_6 : Operation 154 [1/1] (0.00ns)   --->   "%next_IsRowPixel2_0 = extractvalue { i6, i1, i1, i1, i1, i1 } %tmp_57, 1" [cnn.cpp:415]   --->   Operation 154 'extractvalue' 'next_IsRowPixel2_0' <Predicate = (!pingpong)> <Delay = 0.00>
ST_6 : Operation 155 [1/1] (0.00ns)   --->   "%RowBeginByte2_0_V = extractvalue { i6, i1, i1, i1, i1, i1 } %tmp_57, 2" [cnn.cpp:415]   --->   Operation 155 'extractvalue' 'RowBeginByte2_0_V' <Predicate = (!pingpong)> <Delay = 0.00>
ST_6 : Operation 156 [1/1] (0.00ns)   --->   "%RowBeginByte2_1_V = extractvalue { i6, i1, i1, i1, i1, i1 } %tmp_57, 3" [cnn.cpp:415]   --->   Operation 156 'extractvalue' 'RowBeginByte2_1_V' <Predicate = (!pingpong)> <Delay = 0.00>
ST_6 : Operation 157 [1/1] (0.00ns)   --->   "%RowBeginByte2_2_V = extractvalue { i6, i1, i1, i1, i1, i1 } %tmp_57, 4" [cnn.cpp:415]   --->   Operation 157 'extractvalue' 'RowBeginByte2_2_V' <Predicate = (!pingpong)> <Delay = 0.00>
ST_6 : Operation 158 [1/1] (0.00ns)   --->   "%RowBeginByte2_3_V = extractvalue { i6, i1, i1, i1, i1, i1 } %tmp_57, 5" [cnn.cpp:415]   --->   Operation 158 'extractvalue' 'RowBeginByte2_3_V' <Predicate = (!pingpong)> <Delay = 0.00>
ST_6 : Operation 159 [1/2] (0.00ns)   --->   "call fastcc void @copy_input2buf_row([2809 x i16]* %input_buffer_0, [2809 x i16]* %input_buffer_1, [2809 x i16]* %input_buffer_2, [2809 x i16]* %input_buffer_3, i6 %row_len_V, i6 %col_len_V, i1 %RowSub_V, i1 %ColSub_V, [28 x i32]* @input_memcpy_buffer0, [28 x i32]* @input_memcpy_buffer1, [28 x i32]* @input_memcpy_buffer2, [28 x i32]* @input_memcpy_buffer3, i1 %RowBeginByte_0_V_1_1, i1 %RowBeginByte_1_V_1_1, i1 %RowBeginByte_2_V_1_1, i1 %RowBeginByte_3_V_1_1, i8 %TCol_read, i2 %LayerType_read, i6 %next_t2_0_V_1_load, i1 %next_IsRowPixel_0_1_1, i1 %tmp_58, i3 %p_4)" [cnn.cpp:419]   --->   Operation 159 'call' <Predicate = (!pingpong)> <Delay = 0.00> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_6 : Operation 160 [1/1] (0.00ns)   --->   "store i1 %RowBeginByte2_3_V, i1* %RowBeginByte2_3_V_1" [cnn.cpp:415]   --->   Operation 160 'store' <Predicate = (!pingpong)> <Delay = 0.00>
ST_6 : Operation 161 [1/1] (0.00ns)   --->   "store i1 %RowBeginByte2_2_V, i1* %RowBeginByte2_2_V_1" [cnn.cpp:415]   --->   Operation 161 'store' <Predicate = (!pingpong)> <Delay = 0.00>
ST_6 : Operation 162 [1/1] (0.00ns)   --->   "store i1 %RowBeginByte2_1_V, i1* %RowBeginByte2_1_V_1" [cnn.cpp:415]   --->   Operation 162 'store' <Predicate = (!pingpong)> <Delay = 0.00>
ST_6 : Operation 163 [1/1] (0.00ns)   --->   "store i1 %RowBeginByte2_0_V, i1* %RowBeginByte2_0_V_1" [cnn.cpp:415]   --->   Operation 163 'store' <Predicate = (!pingpong)> <Delay = 0.00>
ST_6 : Operation 164 [1/1] (0.00ns)   --->   "store i1 %next_IsRowPixel2_0, i1* %next_IsRowPixel2_0_1" [cnn.cpp:415]   --->   Operation 164 'store' <Predicate = (!pingpong)> <Delay = 0.00>
ST_6 : Operation 165 [1/1] (0.00ns)   --->   "store i6 %next_t22_0_V, i6* %next_t22_0_V_1" [cnn.cpp:415]   --->   Operation 165 'store' <Predicate = (!pingpong)> <Delay = 0.00>
ST_6 : Operation 166 [1/1] (1.76ns)   --->   "br label %2"   --->   Operation 166 'br' <Predicate = (!pingpong)> <Delay = 1.76>
ST_6 : Operation 167 [1/2] (1.76ns)   --->   "%tmp_55 = call fastcc { i6, i1, i1, i1, i1, i1 } @mmcpy_inputpixel_m2b(i32* %input_r, i30 %input_offset_read, i32* %input1, i30 %input1_offset_read, i32* %input2, i30 %input2_offset_read, i32* %input3, i30 %input3_offset_read, [28 x i32]* nocapture @input_memcpy_buffer0, [28 x i32]* nocapture @input_memcpy_buffer1, [28 x i32]* nocapture @input_memcpy_buffer2, [28 x i32]* nocapture @input_memcpy_buffer3, i1 %RowBeginByte_0_V_1_s, i1 %RowBeginByte_1_V_1_s, i1 %RowBeginByte_2_V_1_s, i1 %RowBeginByte_3_V_1_s, i3 %TN_MIN_3b_V, i6 %p_6, i30 %r_V_18, i9 %p_2, i18 %IHxIW_18b_V, i6 %p_3, i1 %IsRowPixel, i1 %tmp_54)" [cnn.cpp:404]   --->   Operation 167 'call' 'tmp_55' <Predicate = (pingpong)> <Delay = 1.76> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_6 : Operation 168 [1/1] (0.00ns)   --->   "%next_t2_0_V = extractvalue { i6, i1, i1, i1, i1, i1 } %tmp_55, 0" [cnn.cpp:404]   --->   Operation 168 'extractvalue' 'next_t2_0_V' <Predicate = (pingpong)> <Delay = 0.00>
ST_6 : Operation 169 [1/1] (0.00ns)   --->   "%next_IsRowPixel_0 = extractvalue { i6, i1, i1, i1, i1, i1 } %tmp_55, 1" [cnn.cpp:404]   --->   Operation 169 'extractvalue' 'next_IsRowPixel_0' <Predicate = (pingpong)> <Delay = 0.00>
ST_6 : Operation 170 [1/1] (0.00ns)   --->   "%RowBeginByte_0_V = extractvalue { i6, i1, i1, i1, i1, i1 } %tmp_55, 2" [cnn.cpp:404]   --->   Operation 170 'extractvalue' 'RowBeginByte_0_V' <Predicate = (pingpong)> <Delay = 0.00>
ST_6 : Operation 171 [1/1] (0.00ns)   --->   "%RowBeginByte_1_V = extractvalue { i6, i1, i1, i1, i1, i1 } %tmp_55, 3" [cnn.cpp:404]   --->   Operation 171 'extractvalue' 'RowBeginByte_1_V' <Predicate = (pingpong)> <Delay = 0.00>
ST_6 : Operation 172 [1/1] (0.00ns)   --->   "%RowBeginByte_2_V = extractvalue { i6, i1, i1, i1, i1, i1 } %tmp_55, 4" [cnn.cpp:404]   --->   Operation 172 'extractvalue' 'RowBeginByte_2_V' <Predicate = (pingpong)> <Delay = 0.00>
ST_6 : Operation 173 [1/1] (0.00ns)   --->   "%RowBeginByte_3_V = extractvalue { i6, i1, i1, i1, i1, i1 } %tmp_55, 5" [cnn.cpp:404]   --->   Operation 173 'extractvalue' 'RowBeginByte_3_V' <Predicate = (pingpong)> <Delay = 0.00>
ST_6 : Operation 174 [1/2] (0.00ns)   --->   "call fastcc void @copy_input2buf_row([2809 x i16]* %input_buffer_0, [2809 x i16]* %input_buffer_1, [2809 x i16]* %input_buffer_2, [2809 x i16]* %input_buffer_3, i6 %row_len_V, i6 %col_len_V, i1 %RowSub_V, i1 %ColSub_V, [28 x i32]* @input_memcpy_buffer0_1, [28 x i32]* @input_memcpy_buffer1_1, [28 x i32]* @input_memcpy_buffer2_1, [28 x i32]* @input_memcpy_buffer3_1, i1 %RowBeginByte2_0_V_1_1, i1 %RowBeginByte2_1_V_1_1, i1 %RowBeginByte2_2_V_1_1, i1 %RowBeginByte2_3_V_1_1, i8 %TCol_read, i2 %LayerType_read, i6 %next_t22_0_V_1_load, i1 %next_IsRowPixel2_0_s, i1 %tmp_56, i3 %p_4)" [cnn.cpp:408]   --->   Operation 174 'call' <Predicate = (pingpong)> <Delay = 0.00> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_6 : Operation 175 [1/1] (0.00ns)   --->   "store i1 %RowBeginByte_3_V, i1* %RowBeginByte_3_V_1" [cnn.cpp:404]   --->   Operation 175 'store' <Predicate = (pingpong)> <Delay = 0.00>
ST_6 : Operation 176 [1/1] (0.00ns)   --->   "store i1 %RowBeginByte_2_V, i1* %RowBeginByte_2_V_1" [cnn.cpp:404]   --->   Operation 176 'store' <Predicate = (pingpong)> <Delay = 0.00>
ST_6 : Operation 177 [1/1] (0.00ns)   --->   "store i1 %RowBeginByte_1_V, i1* %RowBeginByte_1_V_1" [cnn.cpp:404]   --->   Operation 177 'store' <Predicate = (pingpong)> <Delay = 0.00>
ST_6 : Operation 178 [1/1] (0.00ns)   --->   "store i1 %RowBeginByte_0_V, i1* %RowBeginByte_0_V_1" [cnn.cpp:404]   --->   Operation 178 'store' <Predicate = (pingpong)> <Delay = 0.00>
ST_6 : Operation 179 [1/1] (0.00ns)   --->   "store i1 %next_IsRowPixel_0, i1* %next_IsRowPixel_0_1" [cnn.cpp:404]   --->   Operation 179 'store' <Predicate = (pingpong)> <Delay = 0.00>
ST_6 : Operation 180 [1/1] (0.00ns)   --->   "store i6 %next_t2_0_V, i6* %next_t2_0_V_1" [cnn.cpp:404]   --->   Operation 180 'store' <Predicate = (pingpong)> <Delay = 0.00>
ST_6 : Operation 181 [1/1] (1.76ns)   --->   "br label %2" [cnn.cpp:410]   --->   Operation 181 'br' <Predicate = (pingpong)> <Delay = 1.76>
ST_6 : Operation 182 [1/1] (0.00ns)   --->   "%pingpong_1 = phi i1 [ false, %0 ], [ true, %1 ]"   --->   Operation 182 'phi' 'pingpong_1' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 183 [1/1] (1.82ns)   --->   "%t2_V = add i6 %tmp_51, %p_6" [cnn.cpp:395]   --->   Operation 183 'add' 't2_V' <Predicate = true> <Delay = 1.82> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 184 [1/1] (0.00ns)   --->   "br label %.preheader" [cnn.cpp:395]   --->   Operation 184 'br' <Predicate = true> <Delay = 0.00>

State 7 <SV = 4> <Delay = 7.71>
ST_7 : Operation 185 [1/1] (0.00ns)   --->   "%next_t22_0_V_1_load = load i6* %next_t22_0_V_1" [cnn.cpp:408]   --->   Operation 185 'load' 'next_t22_0_V_1_load' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 186 [1/1] (0.00ns)   --->   "%next_IsRowPixel2_0_s = load i1* %next_IsRowPixel2_0_1" [cnn.cpp:408]   --->   Operation 186 'load' 'next_IsRowPixel2_0_s' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 187 [1/1] (0.00ns)   --->   "%RowBeginByte_0_V_1_s = load i1* %RowBeginByte_0_V_1" [cnn.cpp:404]   --->   Operation 187 'load' 'RowBeginByte_0_V_1_s' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 188 [1/1] (0.00ns)   --->   "%RowBeginByte_1_V_1_s = load i1* %RowBeginByte_1_V_1" [cnn.cpp:404]   --->   Operation 188 'load' 'RowBeginByte_1_V_1_s' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 189 [1/1] (0.00ns)   --->   "%RowBeginByte_2_V_1_s = load i1* %RowBeginByte_2_V_1" [cnn.cpp:404]   --->   Operation 189 'load' 'RowBeginByte_2_V_1_s' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 190 [1/1] (0.00ns)   --->   "%RowBeginByte_3_V_1_s = load i1* %RowBeginByte_3_V_1" [cnn.cpp:404]   --->   Operation 190 'load' 'RowBeginByte_3_V_1_s' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 191 [1/1] (0.00ns)   --->   "%RowBeginByte2_0_V_1_1 = load i1* %RowBeginByte2_0_V_1" [cnn.cpp:408]   --->   Operation 191 'load' 'RowBeginByte2_0_V_1_1' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 192 [1/1] (0.00ns)   --->   "%RowBeginByte2_1_V_1_1 = load i1* %RowBeginByte2_1_V_1" [cnn.cpp:408]   --->   Operation 192 'load' 'RowBeginByte2_1_V_1_1' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 193 [1/1] (0.00ns)   --->   "%RowBeginByte2_2_V_1_1 = load i1* %RowBeginByte2_2_V_1" [cnn.cpp:408]   --->   Operation 193 'load' 'RowBeginByte2_2_V_1_1' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 194 [1/1] (0.00ns)   --->   "%RowBeginByte2_3_V_1_1 = load i1* %RowBeginByte2_3_V_1" [cnn.cpp:408]   --->   Operation 194 'load' 'RowBeginByte2_3_V_1_1' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 195 [2/2] (5.01ns)   --->   "%tmp_55 = call fastcc { i6, i1, i1, i1, i1, i1 } @mmcpy_inputpixel_m2b(i32* %input_r, i30 %input_offset_read, i32* %input1, i30 %input1_offset_read, i32* %input2, i30 %input2_offset_read, i32* %input3, i30 %input3_offset_read, [28 x i32]* nocapture @input_memcpy_buffer0, [28 x i32]* nocapture @input_memcpy_buffer1, [28 x i32]* nocapture @input_memcpy_buffer2, [28 x i32]* nocapture @input_memcpy_buffer3, i1 %RowBeginByte_0_V_1_s, i1 %RowBeginByte_1_V_1_s, i1 %RowBeginByte_2_V_1_s, i1 %RowBeginByte_3_V_1_s, i3 %TN_MIN_3b_V, i6 %p_6, i30 %r_V_18, i9 %p_2, i18 %IHxIW_18b_V, i6 %p_3, i1 %IsRowPixel, i1 %tmp_54)" [cnn.cpp:404]   --->   Operation 195 'call' 'tmp_55' <Predicate = true> <Delay = 5.01> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_7 : Operation 196 [2/2] (7.71ns)   --->   "call fastcc void @copy_input2buf_row([2809 x i16]* %input_buffer_0, [2809 x i16]* %input_buffer_1, [2809 x i16]* %input_buffer_2, [2809 x i16]* %input_buffer_3, i6 %row_len_V, i6 %col_len_V, i1 %RowSub_V, i1 %ColSub_V, [28 x i32]* @input_memcpy_buffer0_1, [28 x i32]* @input_memcpy_buffer1_1, [28 x i32]* @input_memcpy_buffer2_1, [28 x i32]* @input_memcpy_buffer3_1, i1 %RowBeginByte2_0_V_1_1, i1 %RowBeginByte2_1_V_1_1, i1 %RowBeginByte2_2_V_1_1, i1 %RowBeginByte2_3_V_1_1, i8 %TCol_read, i2 %LayerType_read, i6 %next_t22_0_V_1_load, i1 %next_IsRowPixel2_0_s, i1 %tmp_56, i3 %p_4)" [cnn.cpp:408]   --->   Operation 196 'call' <Predicate = true> <Delay = 7.71> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 6.38ns
The critical path consists of the following:
	wire read on port 'Kernel_stride' [57]  (0 ns)
	'mul' operation ('r.V', cnn.cpp:328) [85]  (3.36 ns)
	'sub' operation ('r.V', cnn.cpp:328) [87]  (3.02 ns)

 <State 2>: 10.2ns
The critical path consists of the following:
	wire read on port 'c' [59]  (0 ns)
	'mul' operation ('r.V', cnn.cpp:327) [80]  (3.36 ns)
	'sub' operation ('r.V', cnn.cpp:327) [83]  (3.02 ns)
	'add' operation ('r.V', cnn.cpp:339) [92]  (0 ns)
	'add' operation ('r.V', cnn.cpp:339) [93]  (3.79 ns)

 <State 3>: 8.87ns
The critical path consists of the following:
	wire read on port 'Input_w' [53]  (0 ns)
	'mul' operation ('r.V', cnn.cpp:358) [123]  (3.36 ns)
	'add' operation ('r.V', cnn.cpp:358) [126]  (3.02 ns)
	'add' operation ('r.V', cnn.cpp:358) [128]  (2.49 ns)

 <State 4>: 2.47ns
The critical path consists of the following:
	'phi' operation ('t2.V') with incoming values : ('t2.V', cnn.cpp:395) [152]  (0 ns)
	'icmp' operation ('tmp_53', cnn.cpp:397) [161]  (1.49 ns)
	'and' operation ('IsRowPixel', cnn.cpp:397) [164]  (0.978 ns)

 <State 5>: 7.71ns
The critical path consists of the following:
	'load' operation ('next_t2_0_V_1_load', cnn.cpp:419) on local variable 'next_t2[0].V' [168]  (0 ns)
	'call' operation (cnn.cpp:419) to 'copy_input2buf_row' [186]  (7.71 ns)

 <State 6>: 1.83ns
The critical path consists of the following:
	'add' operation ('t2.V', cnn.cpp:395) [223]  (1.83 ns)

 <State 7>: 7.71ns
The critical path consists of the following:
	'load' operation ('next_t22_0_V_1_load', cnn.cpp:408) on local variable 'next_t22[0].V' [195]  (0 ns)
	'call' operation (cnn.cpp:408) to 'copy_input2buf_row' [213]  (7.71 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
