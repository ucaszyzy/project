

================================================================
== Vivado HLS Report for 'write_back_output_re'
================================================================
* Date:           Thu Jul 29 20:17:22 2021

* Version:        2018.2 (Build 2258646 on Thu Jun 14 20:25:20 MDT 2018)
* Project:        Yolo_demo
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|     9.634|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    ?|    ?|    ?|    ?|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------+-----+-----+----------+-----------+-----------+--------+----------+
        |             |  Latency  | Iteration|  Initiation Interval  |  Trip  |          |
        |  Loop Name  | min | max |  Latency |  achieved |   target  |  Count | Pipelined|
        +-------------+-----+-----+----------+-----------+-----------+--------+----------+
        |- Loop 1     |    ?|    ?|         ?|          -|          -| 0 ~ 16 |    no    |
        | + Loop 1.1  |    ?|    ?|  3 ~ 266 |          -|          -| 2 ~ 27 |    no    |
        +-------------+-----+-----+----------+-----------+-----------+--------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 6
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / (write_flag_read)
	4  / (!write_flag_read)
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / (write_flag_read & !exitcond1)
5 --> 
	6  / (!exitcond)
	4  / (exitcond)
6 --> 
	5  / true

* FSM state operations: 

State 1 <SV = 0> <Delay = 6.38>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%LayerType_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %LayerType)"   --->   Operation 7 'read' 'LayerType_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%InterSubOutput_read = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %InterSubOutput)"   --->   Operation 8 'read' 'InterSubOutput_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%IsNL_read = call i1 @_ssdm_op_Read.ap_auto.i1(i1 %IsNL)"   --->   Operation 9 'read' 'IsNL_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%write_flag_read = call i1 @_ssdm_op_Read.ap_auto.i1(i1 %write_flag)"   --->   Operation 10 'read' 'write_flag_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%OHxOW_read = call i18 @_ssdm_op_Read.ap_auto.i18(i18 %OHxOW)"   --->   Operation 11 'read' 'OHxOW_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%TC_MIN_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %TC_MIN)"   --->   Operation 12 'read' 'TC_MIN_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%TM_MIN_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %TM_MIN)"   --->   Operation 13 'read' 'TM_MIN_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%Output_w_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %Output_w)"   --->   Operation 14 'read' 'Output_w_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%m_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %m)"   --->   Operation 15 'read' 'm_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%c_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %c)"   --->   Operation 16 'read' 'c_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%r_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %r)"   --->   Operation 17 'read' 'r_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%Output1_offset_read = call i30 @_ssdm_op_Read.ap_auto.i30(i30 %Output1_offset)"   --->   Operation 18 'read' 'Output1_offset_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%Output_offset_read = call i30 @_ssdm_op_Read.ap_auto.i30(i30 %Output_offset)"   --->   Operation 19 'read' 'Output_offset_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32* %Output1, [6 x i8]* @p_str16, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 512, [10 x i8]* @p_str19, [6 x i8]* @p_str18, [1 x i8]* @p_str1, i32 1, i32 1, i32 64, i32 64, [1 x i8]* @p_str1, [1 x i8]* @p_str1)"   --->   Operation 20 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32* %Output_r, [6 x i8]* @p_str16, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 512, [10 x i8]* @p_str17, [6 x i8]* @p_str18, [1 x i8]* @p_str1, i32 1, i32 1, i32 64, i32 64, [1 x i8]* @p_str1, [1 x i8]* @p_str1)"   --->   Operation 21 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "br i1 %write_flag_read, label %._crit_edge_ifconv, label %.loopexit" [cnn.cpp:800]   --->   Operation 22 'br' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%wb_start_flag = alloca i1"   --->   Operation 23 'alloca' 'wb_start_flag' <Predicate = (write_flag_read)> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%pingpong = alloca i1"   --->   Operation 24 'alloca' 'pingpong' <Predicate = (write_flag_read)> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "%tm_next_0_V_1 = alloca i6"   --->   Operation 25 'alloca' 'tm_next_0_V_1' <Predicate = (write_flag_read)> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "%tm_next1_0_V_1 = alloca i6"   --->   Operation 26 'alloca' 'tm_next1_0_V_1' <Predicate = (write_flag_read)> <Delay = 0.00>
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "%outputoffsetarray_0_1 = alloca i32"   --->   Operation 27 'alloca' 'outputoffsetarray_0_1' <Predicate = (write_flag_read)> <Delay = 0.00>
ST_1 : Operation 28 [1/1] (0.00ns)   --->   "%outputoffsetarray_1_1 = alloca i32"   --->   Operation 28 'alloca' 'outputoffsetarray_1_1' <Predicate = (write_flag_read)> <Delay = 0.00>
ST_1 : Operation 29 [1/1] (0.00ns)   --->   "%outputoffsetarray1_0 = alloca i32"   --->   Operation 29 'alloca' 'outputoffsetarray1_0' <Predicate = (write_flag_read)> <Delay = 0.00>
ST_1 : Operation 30 [1/1] (0.00ns)   --->   "%outputoffsetarray1_1 = alloca i32"   --->   Operation 30 'alloca' 'outputoffsetarray1_1' <Predicate = (write_flag_read)> <Delay = 0.00>
ST_1 : Operation 31 [1/1] (0.00ns)   --->   "%TM_MIN_6b_V = trunc i32 %TM_MIN_read to i6" [cnn.cpp:807]   --->   Operation 31 'trunc' 'TM_MIN_6b_V' <Predicate = (write_flag_read)> <Delay = 0.00>
ST_1 : Operation 32 [1/1] (0.00ns)   --->   "%Output_w_9b_V = trunc i32 %Output_w_read to i9" [cnn.cpp:809]   --->   Operation 32 'trunc' 'Output_w_9b_V' <Predicate = (write_flag_read)> <Delay = 0.00>
ST_1 : Operation 33 [1/1] (0.00ns)   --->   "%m_10b_V = trunc i32 %m_read to i10" [cnn.cpp:810]   --->   Operation 33 'trunc' 'm_10b_V' <Predicate = (write_flag_read)> <Delay = 0.00>
ST_1 : Operation 34 [1/1] (0.00ns)   --->   "%r_9b_V = trunc i32 %r_read to i9" [cnn.cpp:811]   --->   Operation 34 'trunc' 'r_9b_V' <Predicate = (write_flag_read)> <Delay = 0.00>
ST_1 : Operation 35 [1/1] (0.00ns)   --->   "%c_9b_V = trunc i32 %c_read to i9" [cnn.cpp:812]   --->   Operation 35 'trunc' 'c_9b_V' <Predicate = (write_flag_read)> <Delay = 0.00>
ST_1 : Operation 36 [1/1] (0.00ns)   --->   "%lhs_V = zext i10 %m_10b_V to i28" [cnn.cpp:826]   --->   Operation 36 'zext' 'lhs_V' <Predicate = (write_flag_read)> <Delay = 0.00>
ST_1 : Operation 37 [1/1] (0.00ns)   --->   "%rhs_V = zext i18 %OHxOW_read to i28" [cnn.cpp:826]   --->   Operation 37 'zext' 'rhs_V' <Predicate = (write_flag_read)> <Delay = 0.00>
ST_1 : Operation 38 [1/1] (6.38ns)   --->   "%r_V = mul i28 %rhs_V, %lhs_V" [cnn.cpp:826]   --->   Operation 38 'mul' 'r_V' <Predicate = (write_flag_read)> <Delay = 6.38> <Core = "DSP48">   --->   Core 61 'DSP48' <Latency = 0> <II = 1> <Delay = 6.38> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_1 : Operation 39 [1/1] (1.76ns)   --->   "store i1 true, i1* %pingpong"   --->   Operation 39 'store' <Predicate = (write_flag_read)> <Delay = 1.76>
ST_1 : Operation 40 [1/1] (1.76ns)   --->   "store i1 true, i1* %wb_start_flag"   --->   Operation 40 'store' <Predicate = (write_flag_read)> <Delay = 1.76>

State 2 <SV = 1> <Delay = 8.81>
ST_2 : Operation 41 [1/1] (1.42ns)   --->   "%tmp_8 = icmp eq i6 %TM_MIN_6b_V, 9" [cnn.cpp:821]   --->   Operation 41 'icmp' 'tmp_8' <Predicate = true> <Delay = 1.42> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 42 [1/1] (1.18ns)   --->   "%TM_MIN_g_V = select i1 %tmp_8, i6 12, i6 %TM_MIN_6b_V" [cnn.cpp:821]   --->   Operation 42 'select' 'TM_MIN_g_V' <Predicate = true> <Delay = 1.18> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.02> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 43 [1/1] (0.00ns)   --->   "%tmp_10 = trunc i6 %TM_MIN_g_V to i5" [cnn.cpp:821]   --->   Operation 43 'trunc' 'tmp_10' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 44 [1/1] (0.00ns)   --->   "%lhs_V_1 = zext i9 %r_9b_V to i18" [cnn.cpp:826]   --->   Operation 44 'zext' 'lhs_V_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 45 [1/1] (0.00ns)   --->   "%rhs_V_1 = zext i9 %Output_w_9b_V to i18" [cnn.cpp:826]   --->   Operation 45 'zext' 'rhs_V_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 46 [1/1] (3.36ns)   --->   "%r_V_1 = mul i18 %rhs_V_1, %lhs_V_1" [cnn.cpp:826]   --->   Operation 46 'mul' 'r_V_1' <Predicate = true> <Delay = 3.36> <Core = "DSP48">   --->   Core 61 'DSP48' <Latency = 0> <II = 1> <Delay = 6.38> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 47 [1/1] (0.00ns)   --->   "%rhs_V_2_cast = zext i18 %r_V_1 to i28" [cnn.cpp:826]   --->   Operation 47 'zext' 'rhs_V_2_cast' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 48 [1/1] (3.02ns)   --->   "%r_V_2 = add i28 %r_V, %rhs_V_2_cast" [cnn.cpp:826]   --->   Operation 48 'add' 'r_V_2' <Predicate = true> <Delay = 3.02> <Core = "DSP48">   --->   Core 61 'DSP48' <Latency = 0> <II = 1> <Delay = 6.38> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 49 [1/1] (0.00ns)   --->   "%rhs_V_3_cast = zext i9 %c_9b_V to i28" [cnn.cpp:826]   --->   Operation 49 'zext' 'rhs_V_3_cast' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 50 [1/1] (2.43ns)   --->   "%r_V_3 = add i28 %r_V_2, %rhs_V_3_cast" [cnn.cpp:826]   --->   Operation 50 'add' 'r_V_3' <Predicate = true> <Delay = 2.43> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.46> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 51 [1/1] (1.42ns)   --->   "%TM_MINaboveTmdiv2 = icmp ugt i6 %TM_MIN_g_V, 16" [cnn.cpp:828]   --->   Operation 51 'icmp' 'TM_MINaboveTmdiv2' <Predicate = true> <Delay = 1.42> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 52 [1/1] (1.82ns)   --->   "%mLoop2_V = add i6 -16, %TM_MIN_g_V" [cnn.cpp:835]   --->   Operation 52 'add' 'mLoop2_V' <Predicate = true> <Delay = 1.82> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.46> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 53 [1/1] (1.21ns)   --->   "%mLoop1_V = select i1 %TM_MINaboveTmdiv2, i5 -16, i5 %tmp_10" [cnn.cpp:831]   --->   Operation 53 'select' 'mLoop1_V' <Predicate = true> <Delay = 1.21> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.02> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 54 [1/1] (1.18ns)   --->   "%mLoop2_V_1 = select i1 %TM_MINaboveTmdiv2, i6 %mLoop2_V, i6 0" [cnn.cpp:831]   --->   Operation 54 'select' 'mLoop2_V_1' <Predicate = true> <Delay = 1.18> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.02> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 55 [1/1] (0.00ns)   --->   "%mLoop = call i4 @_ssdm_op_PartSelect.i4.i5.i32.i32(i5 %mLoop1_V, i32 1, i32 4)" [cnn.cpp:863]   --->   Operation 55 'partselect' 'mLoop' <Predicate = true> <Delay = 0.00>

State 3 <SV = 2> <Delay = 6.38>
ST_3 : Operation 56 [1/1] (0.00ns)   --->   "%OutputOffset1_sum_3_s = zext i28 %r_V_3 to i29" [cnn.cpp:876]   --->   Operation 56 'zext' 'OutputOffset1_sum_3_s' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 57 [1/1] (2.47ns)   --->   "%TC_MINe26 = icmp eq i32 %TC_MIN_read, 26" [cnn.cpp:829]   --->   Operation 57 'icmp' 'TC_MINe26' <Predicate = true> <Delay = 2.47> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 58 [1/1] (0.00ns)   --->   "%lhs_V_4_cast = zext i5 %mLoop1_V to i23" [cnn.cpp:844]   --->   Operation 58 'zext' 'lhs_V_4_cast' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 59 [1/1] (0.00ns)   --->   "%rhs_V_4_cast = zext i18 %OHxOW_read to i23" [cnn.cpp:844]   --->   Operation 59 'zext' 'rhs_V_4_cast' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 60 [1/1] (3.36ns)   --->   "%r_V_4 = mul i23 %rhs_V_4_cast, %lhs_V_4_cast" [cnn.cpp:844]   --->   Operation 60 'mul' 'r_V_4' <Predicate = true> <Delay = 3.36> <Core = "DSP48">   --->   Core 61 'DSP48' <Latency = 0> <II = 1> <Delay = 6.38> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 61 [1/1] (0.00ns)   --->   "%tmp_cast = zext i23 %r_V_4 to i29" [cnn.cpp:844]   --->   Operation 61 'zext' 'tmp_cast' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 62 [1/1] (3.02ns)   --->   "%OutputOffset1_sum1_3 = add i29 %OutputOffset1_sum_3_s, %tmp_cast" [cnn.cpp:844]   --->   Operation 62 'add' 'OutputOffset1_sum1_3' <Predicate = true> <Delay = 3.02> <Core = "DSP48">   --->   Core 61 'DSP48' <Latency = 0> <II = 1> <Delay = 6.38> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 63 [1/1] (0.00ns)   --->   "%mLoop_3 = zext i4 %mLoop to i5" [cnn.cpp:863]   --->   Operation 63 'zext' 'mLoop_3' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 64 [1/1] (1.24ns)   --->   "%tmp = select i1 %TC_MINe26, i8 13, i8 -87" [cnn.cpp:829]   --->   Operation 64 'select' 'tmp' <Predicate = true> <Delay = 1.24> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.02> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 65 [1/1] (1.21ns)   --->   "%mLoop_1 = select i1 %TC_MINe26, i5 %mLoop1_V, i5 %mLoop_3" [cnn.cpp:829]   --->   Operation 65 'select' 'mLoop_1' <Predicate = true> <Delay = 1.21> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.02> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 66 [1/1] (1.02ns)   --->   "%rLoop_cast4_cast = select i1 %TC_MINe26, i5 -6, i5 1" [cnn.cpp:829]   --->   Operation 66 'select' 'rLoop_cast4_cast' <Predicate = true> <Delay = 1.02> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.02> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 67 [1/1] (0.75ns)   --->   "%OutputOffset = select i1 %TC_MINe26, i18 %OHxOW_read, i18 338" [cnn.cpp:829]   --->   Operation 67 'select' 'OutputOffset' <Predicate = true> <Delay = 0.75> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.02> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 68 [1/1] (0.00ns)   --->   "%OutputOffset_cast = zext i18 %OutputOffset to i29" [cnn.cpp:829]   --->   Operation 68 'zext' 'OutputOffset_cast' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 69 [1/1] (0.96ns)   --->   "%OutputOffset3 = select i1 %TC_MINe26, i9 %Output_w_9b_V, i9 0" [cnn.cpp:829]   --->   Operation 69 'select' 'OutputOffset3' <Predicate = true> <Delay = 0.96> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.02> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 70 [1/1] (0.00ns)   --->   "%OutputOffset3_cast = zext i9 %OutputOffset3 to i14" [cnn.cpp:829]   --->   Operation 70 'zext' 'OutputOffset3_cast' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 71 [1/1] (1.02ns)   --->   "%tmp_2_cast3_cast = select i1 %TC_MINe26, i5 -5, i5 2" [cnn.cpp:877]   --->   Operation 71 'select' 'tmp_2_cast3_cast' <Predicate = true> <Delay = 1.02> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.02> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 72 [1/1] (1.76ns)   --->   "br label %.preheader336" [cnn.cpp:876]   --->   Operation 72 'br' <Predicate = true> <Delay = 1.76>

State 4 <SV = 3> <Delay = 1.78>
ST_4 : Operation 73 [1/1] (0.00ns)   --->   "%tm = phi i5 [ 0, %._crit_edge_ifconv ], [ %tm_1, %5 ]"   --->   Operation 73 'phi' 'tm' <Predicate = (write_flag_read)> <Delay = 0.00>
ST_4 : Operation 74 [1/1] (0.00ns)   --->   "%OutputOffset1_sum = phi i29 [ %OutputOffset1_sum_3_s, %._crit_edge_ifconv ], [ %OutputOffset1_sum_1, %5 ]"   --->   Operation 74 'phi' 'OutputOffset1_sum' <Predicate = (write_flag_read)> <Delay = 0.00>
ST_4 : Operation 75 [1/1] (0.00ns)   --->   "%OutputOffset1_sum1 = phi i29 [ %OutputOffset1_sum1_3, %._crit_edge_ifconv ], [ %OutputOffset1_sum1_1, %5 ]"   --->   Operation 75 'phi' 'OutputOffset1_sum1' <Predicate = (write_flag_read)> <Delay = 0.00>
ST_4 : Operation 76 [1/1] (0.00ns)   --->   "%empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 0, i64 16, i64 0)"   --->   Operation 76 'speclooptripcount' 'empty' <Predicate = (write_flag_read)> <Delay = 0.00>
ST_4 : Operation 77 [1/1] (1.36ns)   --->   "%exitcond1 = icmp eq i5 %tm, %mLoop_1" [cnn.cpp:876]   --->   Operation 77 'icmp' 'exitcond1' <Predicate = (write_flag_read)> <Delay = 1.36> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 78 [1/1] (1.78ns)   --->   "%tm_1 = add i5 %tm, 1" [cnn.cpp:876]   --->   Operation 78 'add' 'tm_1' <Predicate = (write_flag_read)> <Delay = 1.78> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.46> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 79 [1/1] (0.00ns)   --->   "br i1 %exitcond1, label %.loopexit.loopexit, label %.preheader.preheader" [cnn.cpp:876]   --->   Operation 79 'br' <Predicate = (write_flag_read)> <Delay = 0.00>
ST_4 : Operation 80 [1/1] (1.76ns)   --->   "br label %.preheader"   --->   Operation 80 'br' <Predicate = (write_flag_read & !exitcond1)> <Delay = 1.76>
ST_4 : Operation 81 [1/1] (0.00ns)   --->   "br label %.loopexit"   --->   Operation 81 'br' <Predicate = (write_flag_read & exitcond1)> <Delay = 0.00>
ST_4 : Operation 82 [1/1] (0.00ns)   --->   "ret void" [cnn.cpp:894]   --->   Operation 82 'ret' <Predicate = (!write_flag_read) | (exitcond1)> <Delay = 0.00>

State 5 <SV = 4> <Delay = 4.90>
ST_5 : Operation 83 [1/1] (0.00ns)   --->   "%tr = phi i5 [ %tr_1, %4 ], [ 0, %.preheader.preheader ]"   --->   Operation 83 'phi' 'tr' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 84 [1/1] (0.00ns)   --->   "%OutputOffset2_sum = phi i14 [ %OutputOffset2_sum_1, %4 ], [ 0, %.preheader.preheader ]"   --->   Operation 84 'phi' 'OutputOffset2_sum' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 85 [1/1] (0.00ns)   --->   "%empty_17 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 2, i64 27, i64 0)"   --->   Operation 85 'speclooptripcount' 'empty_17' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 86 [1/1] (1.36ns)   --->   "%exitcond = icmp eq i5 %tr, %tmp_2_cast3_cast" [cnn.cpp:877]   --->   Operation 86 'icmp' 'exitcond' <Predicate = true> <Delay = 1.36> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 87 [1/1] (1.78ns)   --->   "%tr_1 = add i5 %tr, 1" [cnn.cpp:877]   --->   Operation 87 'add' 'tr_1' <Predicate = true> <Delay = 1.78> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.46> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 88 [1/1] (0.00ns)   --->   "br i1 %exitcond, label %5, label %1" [cnn.cpp:877]   --->   Operation 88 'br' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 89 [1/1] (0.00ns)   --->   "%pingpong_load = load i1* %pingpong" [cnn.cpp:879]   --->   Operation 89 'load' 'pingpong_load' <Predicate = (!exitcond)> <Delay = 0.00>
ST_5 : Operation 90 [1/1] (1.36ns)   --->   "%tmp_5 = icmp ne i5 %tr, %rLoop_cast4_cast" [cnn.cpp:881]   --->   Operation 90 'icmp' 'tmp_5' <Predicate = (!exitcond)> <Delay = 1.36> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 91 [1/1] (0.00ns)   --->   "%wb_start_flag_load = load i1* %wb_start_flag" [cnn.cpp:881]   --->   Operation 91 'load' 'wb_start_flag_load' <Predicate = (!exitcond)> <Delay = 0.00>
ST_5 : Operation 92 [1/1] (0.00ns)   --->   "%tm_next_0_V_1_load = load i6* %tm_next_0_V_1" [cnn.cpp:881]   --->   Operation 92 'load' 'tm_next_0_V_1_load' <Predicate = (!exitcond)> <Delay = 0.00>
ST_5 : Operation 93 [1/1] (0.00ns)   --->   "%tm_next1_0_V_1_load = load i6* %tm_next1_0_V_1" [cnn.cpp:883]   --->   Operation 93 'load' 'tm_next1_0_V_1_load' <Predicate = (!exitcond)> <Delay = 0.00>
ST_5 : Operation 94 [1/1] (0.00ns)   --->   "%outputoffsetarray_0_2 = load i32* %outputoffsetarray_0_1" [cnn.cpp:881]   --->   Operation 94 'load' 'outputoffsetarray_0_2' <Predicate = (!exitcond)> <Delay = 0.00>
ST_5 : Operation 95 [1/1] (0.00ns)   --->   "%outputoffsetarray_1_2 = load i32* %outputoffsetarray_1_1" [cnn.cpp:881]   --->   Operation 95 'load' 'outputoffsetarray_1_2' <Predicate = (!exitcond)> <Delay = 0.00>
ST_5 : Operation 96 [1/1] (0.00ns)   --->   "%outputoffsetarray1_0_1 = load i32* %outputoffsetarray1_0" [cnn.cpp:883]   --->   Operation 96 'load' 'outputoffsetarray1_0_1' <Predicate = (!exitcond)> <Delay = 0.00>
ST_5 : Operation 97 [1/1] (0.00ns)   --->   "%outputoffsetarray1_1_1 = load i32* %outputoffsetarray1_1" [cnn.cpp:883]   --->   Operation 97 'load' 'outputoffsetarray1_1_1' <Predicate = (!exitcond)> <Delay = 0.00>
ST_5 : Operation 98 [1/1] (0.00ns)   --->   "br i1 %pingpong_load, label %2, label %3" [cnn.cpp:879]   --->   Operation 98 'br' <Predicate = (!exitcond)> <Delay = 0.00>
ST_5 : Operation 99 [2/2] (3.53ns)   --->   "%call_ret = call fastcc { i6, i32, i32 } @outputpixel2buf([676 x i32]* %output_buffer_0, [676 x i32]* %output_buffer_1, [676 x i32]* %output_buffer_2, [676 x i32]* %output_buffer_3, [676 x i32]* %output_buffer_4, [676 x i32]* %output_buffer_5, [676 x i32]* %output_buffer_6, [676 x i32]* %output_buffer_7, [676 x i32]* %output_buffer_8, [676 x i32]* %output_buffer_9, [676 x i32]* %output_buffer_10, [676 x i32]* %output_buffer_11, [676 x i32]* %output_buffer_12, [676 x i32]* %output_buffer_13, [676 x i32]* %output_buffer_14, [676 x i32]* %output_buffer_15, [676 x i32]* %output_buffer_16, [676 x i32]* %output_buffer_17, [676 x i32]* %output_buffer_18, [676 x i32]* %output_buffer_19, [676 x i32]* %output_buffer_20, [676 x i32]* %output_buffer_21, [676 x i32]* %output_buffer_22, [676 x i32]* %output_buffer_23, [676 x i32]* %output_buffer_24, [676 x i32]* %output_buffer_25, [676 x i32]* %output_buffer_26, [676 x i32]* %output_buffer_27, [676 x i32]* %output_buffer_28, [676 x i32]* %output_buffer_29, [676 x i32]* %output_buffer_30, [676 x i32]* %output_buffer_31, [169 x i32]* @output_tmp10, [169 x i32]* @output_tmp11, i1 %IsNL_read, i8 %InterSubOutput_read, i32 %LayerType_read, i1 %TC_MINe26, i32 %TC_MIN_read, i5 %tm, i5 %tr, i1 %wb_start_flag_load, i32 %outputoffsetarray1_0_1, i32 %outputoffsetarray1_1_1, i29 %OutputOffset1_sum, i29 %OutputOffset1_sum1, i14 %OutputOffset2_sum, i6 %tm_next1_0_V_1_load, i1 %tmp_5)" [cnn.cpp:887]   --->   Operation 99 'call' 'call_ret' <Predicate = (!exitcond & !pingpong_load)> <Delay = 3.53> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_5 : Operation 100 [1/1] (1.36ns)   --->   "%tmp_9 = icmp ne i5 %tr, 0" [cnn.cpp:889]   --->   Operation 100 'icmp' 'tmp_9' <Predicate = (!exitcond & !pingpong_load)> <Delay = 1.36> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 101 [2/2] (1.76ns)   --->   "call fastcc void @mmcpy_outputpixel(i32* %Output_r, i30 %Output_offset_read, i32* %Output1, i30 %Output1_offset_read, [169 x i32]* nocapture @output_tmp00, [169 x i32]* nocapture @output_tmp01, i6 %tm_next_0_V_1_load, i5 %mLoop1_V, i6 %mLoop2_V_1, i32 %outputoffsetarray_0_2, i32 %outputoffsetarray_1_2, i8 %tmp, i8 %tmp, i1 %tmp_9)" [cnn.cpp:889]   --->   Operation 101 'call' <Predicate = (!exitcond & !pingpong_load)> <Delay = 1.76> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_5 : Operation 102 [2/2] (3.53ns)   --->   "%call_ret2 = call fastcc { i6, i32, i32 } @outputpixel2buf([676 x i32]* %output_buffer_0, [676 x i32]* %output_buffer_1, [676 x i32]* %output_buffer_2, [676 x i32]* %output_buffer_3, [676 x i32]* %output_buffer_4, [676 x i32]* %output_buffer_5, [676 x i32]* %output_buffer_6, [676 x i32]* %output_buffer_7, [676 x i32]* %output_buffer_8, [676 x i32]* %output_buffer_9, [676 x i32]* %output_buffer_10, [676 x i32]* %output_buffer_11, [676 x i32]* %output_buffer_12, [676 x i32]* %output_buffer_13, [676 x i32]* %output_buffer_14, [676 x i32]* %output_buffer_15, [676 x i32]* %output_buffer_16, [676 x i32]* %output_buffer_17, [676 x i32]* %output_buffer_18, [676 x i32]* %output_buffer_19, [676 x i32]* %output_buffer_20, [676 x i32]* %output_buffer_21, [676 x i32]* %output_buffer_22, [676 x i32]* %output_buffer_23, [676 x i32]* %output_buffer_24, [676 x i32]* %output_buffer_25, [676 x i32]* %output_buffer_26, [676 x i32]* %output_buffer_27, [676 x i32]* %output_buffer_28, [676 x i32]* %output_buffer_29, [676 x i32]* %output_buffer_30, [676 x i32]* %output_buffer_31, [169 x i32]* @output_tmp00, [169 x i32]* @output_tmp01, i1 %IsNL_read, i8 %InterSubOutput_read, i32 %LayerType_read, i1 %TC_MINe26, i32 %TC_MIN_read, i5 %tm, i5 %tr, i1 %wb_start_flag_load, i32 %outputoffsetarray_0_2, i32 %outputoffsetarray_1_2, i29 %OutputOffset1_sum, i29 %OutputOffset1_sum1, i14 %OutputOffset2_sum, i6 %tm_next_0_V_1_load, i1 %tmp_5)" [cnn.cpp:881]   --->   Operation 102 'call' 'call_ret2' <Predicate = (!exitcond & pingpong_load)> <Delay = 3.53> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_5 : Operation 103 [1/1] (1.36ns)   --->   "%tmp_6 = icmp ne i5 %tr, 0" [cnn.cpp:883]   --->   Operation 103 'icmp' 'tmp_6' <Predicate = (!exitcond & pingpong_load)> <Delay = 1.36> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.36> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 104 [2/2] (1.76ns)   --->   "call fastcc void @mmcpy_outputpixel(i32* %Output_r, i30 %Output_offset_read, i32* %Output1, i30 %Output1_offset_read, [169 x i32]* nocapture @output_tmp10, [169 x i32]* nocapture @output_tmp11, i6 %tm_next1_0_V_1_load, i5 %mLoop1_V, i6 %mLoop2_V_1, i32 %outputoffsetarray1_0_1, i32 %outputoffsetarray1_1_1, i8 %tmp, i8 %tmp, i1 %tmp_6)" [cnn.cpp:883]   --->   Operation 104 'call' <Predicate = (!exitcond & pingpong_load)> <Delay = 1.76> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_5 : Operation 105 [1/1] (2.46ns)   --->   "%OutputOffset1_sum_1 = add i29 %OutputOffset_cast, %OutputOffset1_sum" [cnn.cpp:876]   --->   Operation 105 'add' 'OutputOffset1_sum_1' <Predicate = (exitcond)> <Delay = 2.46> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.46> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 106 [1/1] (2.46ns)   --->   "%OutputOffset1_sum1_1 = add i29 %OutputOffset_cast, %OutputOffset1_sum1" [cnn.cpp:876]   --->   Operation 106 'add' 'OutputOffset1_sum1_1' <Predicate = (exitcond)> <Delay = 2.46> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.46> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 107 [1/1] (0.00ns)   --->   "br label %.preheader336" [cnn.cpp:876]   --->   Operation 107 'br' <Predicate = (exitcond)> <Delay = 0.00>

State 6 <SV = 5> <Delay = 3.53>
ST_6 : Operation 108 [1/2] (0.00ns)   --->   "%call_ret = call fastcc { i6, i32, i32 } @outputpixel2buf([676 x i32]* %output_buffer_0, [676 x i32]* %output_buffer_1, [676 x i32]* %output_buffer_2, [676 x i32]* %output_buffer_3, [676 x i32]* %output_buffer_4, [676 x i32]* %output_buffer_5, [676 x i32]* %output_buffer_6, [676 x i32]* %output_buffer_7, [676 x i32]* %output_buffer_8, [676 x i32]* %output_buffer_9, [676 x i32]* %output_buffer_10, [676 x i32]* %output_buffer_11, [676 x i32]* %output_buffer_12, [676 x i32]* %output_buffer_13, [676 x i32]* %output_buffer_14, [676 x i32]* %output_buffer_15, [676 x i32]* %output_buffer_16, [676 x i32]* %output_buffer_17, [676 x i32]* %output_buffer_18, [676 x i32]* %output_buffer_19, [676 x i32]* %output_buffer_20, [676 x i32]* %output_buffer_21, [676 x i32]* %output_buffer_22, [676 x i32]* %output_buffer_23, [676 x i32]* %output_buffer_24, [676 x i32]* %output_buffer_25, [676 x i32]* %output_buffer_26, [676 x i32]* %output_buffer_27, [676 x i32]* %output_buffer_28, [676 x i32]* %output_buffer_29, [676 x i32]* %output_buffer_30, [676 x i32]* %output_buffer_31, [169 x i32]* @output_tmp10, [169 x i32]* @output_tmp11, i1 %IsNL_read, i8 %InterSubOutput_read, i32 %LayerType_read, i1 %TC_MINe26, i32 %TC_MIN_read, i5 %tm, i5 %tr, i1 %wb_start_flag_load, i32 %outputoffsetarray1_0_1, i32 %outputoffsetarray1_1_1, i29 %OutputOffset1_sum, i29 %OutputOffset1_sum1, i14 %OutputOffset2_sum, i6 %tm_next1_0_V_1_load, i1 %tmp_5)" [cnn.cpp:887]   --->   Operation 108 'call' 'call_ret' <Predicate = (!pingpong_load)> <Delay = 0.00> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_6 : Operation 109 [1/1] (0.00ns)   --->   "%tm_next1_0_V = extractvalue { i6, i32, i32 } %call_ret, 0" [cnn.cpp:887]   --->   Operation 109 'extractvalue' 'tm_next1_0_V' <Predicate = (!pingpong_load)> <Delay = 0.00>
ST_6 : Operation 110 [1/1] (0.00ns)   --->   "%outputoffsetarray1_0_2 = extractvalue { i6, i32, i32 } %call_ret, 1" [cnn.cpp:887]   --->   Operation 110 'extractvalue' 'outputoffsetarray1_0_2' <Predicate = (!pingpong_load)> <Delay = 0.00>
ST_6 : Operation 111 [1/1] (0.00ns)   --->   "%outputoffsetarray1_1_2 = extractvalue { i6, i32, i32 } %call_ret, 2" [cnn.cpp:887]   --->   Operation 111 'extractvalue' 'outputoffsetarray1_1_2' <Predicate = (!pingpong_load)> <Delay = 0.00>
ST_6 : Operation 112 [1/2] (0.00ns)   --->   "call fastcc void @mmcpy_outputpixel(i32* %Output_r, i30 %Output_offset_read, i32* %Output1, i30 %Output1_offset_read, [169 x i32]* nocapture @output_tmp00, [169 x i32]* nocapture @output_tmp01, i6 %tm_next_0_V_1_load, i5 %mLoop1_V, i6 %mLoop2_V_1, i32 %outputoffsetarray_0_2, i32 %outputoffsetarray_1_2, i8 %tmp, i8 %tmp, i1 %tmp_9)" [cnn.cpp:889]   --->   Operation 112 'call' <Predicate = (!pingpong_load)> <Delay = 0.00> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_6 : Operation 113 [1/1] (0.00ns)   --->   "store i32 %outputoffsetarray1_1_2, i32* %outputoffsetarray1_1" [cnn.cpp:887]   --->   Operation 113 'store' <Predicate = (!pingpong_load)> <Delay = 0.00>
ST_6 : Operation 114 [1/1] (0.00ns)   --->   "store i32 %outputoffsetarray1_0_2, i32* %outputoffsetarray1_0" [cnn.cpp:887]   --->   Operation 114 'store' <Predicate = (!pingpong_load)> <Delay = 0.00>
ST_6 : Operation 115 [1/1] (0.00ns)   --->   "store i6 %tm_next1_0_V, i6* %tm_next1_0_V_1" [cnn.cpp:887]   --->   Operation 115 'store' <Predicate = (!pingpong_load)> <Delay = 0.00>
ST_6 : Operation 116 [1/1] (1.76ns)   --->   "br label %4"   --->   Operation 116 'br' <Predicate = (!pingpong_load)> <Delay = 1.76>
ST_6 : Operation 117 [1/2] (0.00ns)   --->   "%call_ret2 = call fastcc { i6, i32, i32 } @outputpixel2buf([676 x i32]* %output_buffer_0, [676 x i32]* %output_buffer_1, [676 x i32]* %output_buffer_2, [676 x i32]* %output_buffer_3, [676 x i32]* %output_buffer_4, [676 x i32]* %output_buffer_5, [676 x i32]* %output_buffer_6, [676 x i32]* %output_buffer_7, [676 x i32]* %output_buffer_8, [676 x i32]* %output_buffer_9, [676 x i32]* %output_buffer_10, [676 x i32]* %output_buffer_11, [676 x i32]* %output_buffer_12, [676 x i32]* %output_buffer_13, [676 x i32]* %output_buffer_14, [676 x i32]* %output_buffer_15, [676 x i32]* %output_buffer_16, [676 x i32]* %output_buffer_17, [676 x i32]* %output_buffer_18, [676 x i32]* %output_buffer_19, [676 x i32]* %output_buffer_20, [676 x i32]* %output_buffer_21, [676 x i32]* %output_buffer_22, [676 x i32]* %output_buffer_23, [676 x i32]* %output_buffer_24, [676 x i32]* %output_buffer_25, [676 x i32]* %output_buffer_26, [676 x i32]* %output_buffer_27, [676 x i32]* %output_buffer_28, [676 x i32]* %output_buffer_29, [676 x i32]* %output_buffer_30, [676 x i32]* %output_buffer_31, [169 x i32]* @output_tmp00, [169 x i32]* @output_tmp01, i1 %IsNL_read, i8 %InterSubOutput_read, i32 %LayerType_read, i1 %TC_MINe26, i32 %TC_MIN_read, i5 %tm, i5 %tr, i1 %wb_start_flag_load, i32 %outputoffsetarray_0_2, i32 %outputoffsetarray_1_2, i29 %OutputOffset1_sum, i29 %OutputOffset1_sum1, i14 %OutputOffset2_sum, i6 %tm_next_0_V_1_load, i1 %tmp_5)" [cnn.cpp:881]   --->   Operation 117 'call' 'call_ret2' <Predicate = (pingpong_load)> <Delay = 0.00> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_6 : Operation 118 [1/1] (0.00ns)   --->   "%tm_next_0_V = extractvalue { i6, i32, i32 } %call_ret2, 0" [cnn.cpp:881]   --->   Operation 118 'extractvalue' 'tm_next_0_V' <Predicate = (pingpong_load)> <Delay = 0.00>
ST_6 : Operation 119 [1/1] (0.00ns)   --->   "%outputoffsetarray_0 = extractvalue { i6, i32, i32 } %call_ret2, 1" [cnn.cpp:881]   --->   Operation 119 'extractvalue' 'outputoffsetarray_0' <Predicate = (pingpong_load)> <Delay = 0.00>
ST_6 : Operation 120 [1/1] (0.00ns)   --->   "%outputoffsetarray_1 = extractvalue { i6, i32, i32 } %call_ret2, 2" [cnn.cpp:881]   --->   Operation 120 'extractvalue' 'outputoffsetarray_1' <Predicate = (pingpong_load)> <Delay = 0.00>
ST_6 : Operation 121 [1/2] (0.00ns)   --->   "call fastcc void @mmcpy_outputpixel(i32* %Output_r, i30 %Output_offset_read, i32* %Output1, i30 %Output1_offset_read, [169 x i32]* nocapture @output_tmp10, [169 x i32]* nocapture @output_tmp11, i6 %tm_next1_0_V_1_load, i5 %mLoop1_V, i6 %mLoop2_V_1, i32 %outputoffsetarray1_0_1, i32 %outputoffsetarray1_1_1, i8 %tmp, i8 %tmp, i1 %tmp_6)" [cnn.cpp:883]   --->   Operation 121 'call' <Predicate = (pingpong_load)> <Delay = 0.00> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_6 : Operation 122 [1/1] (0.00ns)   --->   "store i32 %outputoffsetarray_1, i32* %outputoffsetarray_1_1" [cnn.cpp:881]   --->   Operation 122 'store' <Predicate = (pingpong_load)> <Delay = 0.00>
ST_6 : Operation 123 [1/1] (0.00ns)   --->   "store i32 %outputoffsetarray_0, i32* %outputoffsetarray_0_1" [cnn.cpp:881]   --->   Operation 123 'store' <Predicate = (pingpong_load)> <Delay = 0.00>
ST_6 : Operation 124 [1/1] (0.00ns)   --->   "store i6 %tm_next_0_V, i6* %tm_next_0_V_1" [cnn.cpp:881]   --->   Operation 124 'store' <Predicate = (pingpong_load)> <Delay = 0.00>
ST_6 : Operation 125 [1/1] (1.76ns)   --->   "br label %4" [cnn.cpp:885]   --->   Operation 125 'br' <Predicate = (pingpong_load)> <Delay = 1.76>
ST_6 : Operation 126 [1/1] (0.00ns)   --->   "%pingpong_2 = phi i1 [ false, %2 ], [ true, %3 ]"   --->   Operation 126 'phi' 'pingpong_2' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 127 [1/1] (1.81ns)   --->   "%OutputOffset2_sum_1 = add i14 %OutputOffset3_cast, %OutputOffset2_sum" [cnn.cpp:877]   --->   Operation 127 'add' 'OutputOffset2_sum_1' <Predicate = true> <Delay = 1.81> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.46> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 128 [1/1] (1.76ns)   --->   "store i1 %pingpong_2, i1* %pingpong"   --->   Operation 128 'store' <Predicate = true> <Delay = 1.76>
ST_6 : Operation 129 [1/1] (1.76ns)   --->   "store i1 false, i1* %wb_start_flag"   --->   Operation 129 'store' <Predicate = true> <Delay = 1.76>
ST_6 : Operation 130 [1/1] (0.00ns)   --->   "br label %.preheader" [cnn.cpp:877]   --->   Operation 130 'br' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 6.38ns
The critical path consists of the following:
	wire read on port 'OHxOW' [57]  (0 ns)
	'mul' operation ('r.V', cnn.cpp:826) [88]  (6.38 ns)

 <State 2>: 8.81ns
The critical path consists of the following:
	'mul' operation ('r.V', cnn.cpp:826) [91]  (3.36 ns)
	'add' operation ('r.V', cnn.cpp:826) [93]  (3.02 ns)
	'add' operation ('r.V', cnn.cpp:826) [95]  (2.43 ns)

 <State 3>: 6.38ns
The critical path consists of the following:
	'mul' operation ('r.V', cnn.cpp:844) [104]  (3.36 ns)
	'add' operation ('OutputOffset1_sum1', cnn.cpp:844) [106]  (3.02 ns)

 <State 4>: 1.78ns
The critical path consists of the following:
	'phi' operation ('tm') with incoming values : ('tm', cnn.cpp:876) [121]  (0 ns)
	'add' operation ('tm', cnn.cpp:876) [126]  (1.78 ns)

 <State 5>: 4.9ns
The critical path consists of the following:
	'phi' operation ('tr') with incoming values : ('tr', cnn.cpp:877) [131]  (0 ns)
	'icmp' operation ('tmp_5', cnn.cpp:881) [139]  (1.36 ns)
	'call' operation ('call_ret', cnn.cpp:887) to 'outputpixel2buf' [149]  (3.54 ns)

 <State 6>: 3.54ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('pingpong_2') [171]  (1.77 ns)
	'phi' operation ('pingpong_2') [171]  (0 ns)
	'store' operation of variable 'pingpong_2' on local variable 'pingpong' [173]  (1.77 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
