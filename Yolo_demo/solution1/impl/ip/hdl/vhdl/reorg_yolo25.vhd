-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity reorg_yolo25 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Input_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    Input_0_ce0 : OUT STD_LOGIC;
    Input_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Output_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Output_0_ce0 : OUT STD_LOGIC;
    Output_0_we0 : OUT STD_LOGIC;
    Output_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Output_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Output_1_ce0 : OUT STD_LOGIC;
    Output_1_we0 : OUT STD_LOGIC;
    Output_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Output_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Output_2_ce0 : OUT STD_LOGIC;
    Output_2_we0 : OUT STD_LOGIC;
    Output_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Output_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Output_3_ce0 : OUT STD_LOGIC;
    Output_3_we0 : OUT STD_LOGIC;
    Output_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    TR_MIN : IN STD_LOGIC_VECTOR (31 downto 0);
    TC_MIN : IN STD_LOGIC_VECTOR (31 downto 0);
    enable : IN STD_LOGIC );
end;


architecture behav of reorg_yolo25 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv66_0 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv35_0 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv66_1 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv35_1 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_1A : STD_LOGIC_VECTOR (10 downto 0) := "00000011010";
    constant ap_const_lv13_35 : STD_LOGIC_VECTOR (12 downto 0) := "0000000110101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten1_reg_161 : STD_LOGIC_VECTOR (65 downto 0);
    signal indvar_flatten2_reg_172 : STD_LOGIC_VECTOR (34 downto 0);
    signal indvar_flatten_reg_183 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_reg_194 : STD_LOGIC_VECTOR (30 downto 0);
    signal x_reg_205 : STD_LOGIC_VECTOR (30 downto 0);
    signal ky_reg_216 : STD_LOGIC_VECTOR (1 downto 0);
    signal kx_reg_227 : STD_LOGIC_VECTOR (1 downto 0);
    signal enable_read_read_fu_78_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bound8_fu_246_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal bound8_reg_661 : STD_LOGIC_VECTOR (34 downto 0);
    signal bound_fu_258_p2 : STD_LOGIC_VECTOR (65 downto 0);
    signal bound_reg_666 : STD_LOGIC_VECTOR (65 downto 0);
    signal exitcond_flatten2_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten2_reg_671 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_flatten2_reg_671_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next2_fu_269_p2 : STD_LOGIC_VECTOR (65 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal exitcond_flatten_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_680 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_reg_692 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1_reg_697 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_mid_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_mid_reg_702 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_711 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_310_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_next1_fu_324_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_7_mid2_v_fu_385_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_7_mid2_v_reg_727 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal tmp_24_fu_392_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_24_reg_732 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_29_fu_461_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_29_reg_737 : STD_LOGIC_VECTOR (10 downto 0);
    signal x_mid2_fu_510_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_34_fu_565_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_34_reg_747 : STD_LOGIC_VECTOR (7 downto 0);
    signal ky_mid2_fu_587_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal Xoffset_fu_599_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Xoffset_reg_757 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_index_t_fu_605_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal in_index_t_reg_762 : STD_LOGIC_VECTOR (1 downto 0);
    signal in_index_t_reg_762_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal kx_1_fu_611_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_642_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_reg_771 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter1_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_phi_mux_y_phi_fu_198_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_23_cast_fu_623_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_cast_fu_627_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_634_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_238_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal bound_fu_258_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_258_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal indvar_flatten_op_fu_304_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten23_op_fu_318_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_18_fu_332_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_19_fu_344_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_356_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_336_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_1_fu_372_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_25_fu_396_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_mid1_fu_400_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_348_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_mid_fu_378_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal x_1_fu_433_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_27_fu_450_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_26_fu_446_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_28_fu_454_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_30_fu_468_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_mid1_fu_472_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_mid_fu_415_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_fu_366_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_flatten_not_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_mid_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_1_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ky_mid_fu_439_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_mid1_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ky_1_fu_517_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_mid1_fu_541_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_mid2_fu_408_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal Yoffset_fu_360_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_32_fu_551_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal Yoffset_mid1_fu_545_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_33_fu_558_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_35_fu_573_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_mid_fu_487_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal kx_mid2_fu_533_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_595_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_mid2_fu_480_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_mid2_fu_579_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_648_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_642_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_648_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_648_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_648_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_258_p00 : STD_LOGIC_VECTOR (65 downto 0);
    signal bound_fu_258_p10 : STD_LOGIC_VECTOR (65 downto 0);
    signal grp_fu_648_p10 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_648_p20 : STD_LOGIC_VECTOR (12 downto 0);

    component YOLO2_FPGA_mac_muocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component YOLO2_FPGA_mac_mupcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;



begin
    YOLO2_FPGA_mac_muocq_U552 : component YOLO2_FPGA_mac_muocq
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 11,
        din2_WIDTH => 11,
        dout_WIDTH => 11)
    port map (
        din0 => grp_fu_642_p0,
        din1 => tmp_24_reg_732,
        din2 => tmp_29_reg_737,
        dout => grp_fu_642_p3);

    YOLO2_FPGA_mac_mupcA_U553 : component YOLO2_FPGA_mac_mupcA
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 13)
    port map (
        din0 => grp_fu_648_p0,
        din1 => grp_fu_648_p1,
        din2 => grp_fu_648_p2,
        dout => grp_fu_648_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((exitcond_flatten2_fu_264_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (enable_read_read_fu_78_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter1_state3)) then 
                        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_start = ap_const_logic_1) and (enable_read_read_fu_78_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten1_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_fu_264_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                indvar_flatten1_reg_161 <= indvar_flatten_next2_fu_269_p2;
            elsif (((ap_start = ap_const_logic_1) and (enable_read_read_fu_78_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten1_reg_161 <= ap_const_lv66_0;
            end if; 
        end if;
    end process;

    indvar_flatten2_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_fu_264_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                indvar_flatten2_reg_172 <= indvar_flatten_next1_fu_324_p3;
            elsif (((ap_start = ap_const_logic_1) and (enable_read_read_fu_78_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten2_reg_172 <= ap_const_lv35_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_fu_264_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                indvar_flatten_reg_183 <= indvar_flatten_next_fu_310_p3;
            elsif (((ap_start = ap_const_logic_1) and (enable_read_read_fu_78_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_183 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    kx_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_671 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                kx_reg_227 <= kx_1_fu_611_p2;
            elsif (((ap_start = ap_const_logic_1) and (enable_read_read_fu_78_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                kx_reg_227 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    ky_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_671 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                ky_reg_216 <= ky_mid2_fu_587_p3;
            elsif (((ap_start = ap_const_logic_1) and (enable_read_read_fu_78_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ky_reg_216 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    x_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_671 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                x_reg_205 <= x_mid2_fu_510_p3;
            elsif (((ap_start = ap_const_logic_1) and (enable_read_read_fu_78_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                x_reg_205 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    y_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (exitcond_flatten2_reg_671_pp0_iter1_reg = ap_const_lv1_0))) then 
                y_reg_194 <= tmp_7_mid2_v_reg_727;
            elsif (((ap_start = ap_const_logic_1) and (enable_read_read_fu_78_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                y_reg_194 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_671 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                Xoffset_reg_757 <= Xoffset_fu_599_p2;
                in_index_t_reg_762 <= in_index_t_fu_605_p2;
                tmp_24_reg_732 <= tmp_24_fu_392_p1;
                tmp_29_reg_737 <= tmp_29_fu_461_p3;
                tmp_34_reg_747 <= tmp_34_fu_565_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (enable_read_read_fu_78_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    bound8_reg_661(33 downto 2) <= bound8_fu_246_p1(33 downto 2);
                    bound_reg_666(65 downto 2) <= bound_fu_258_p2(65 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_fu_264_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_flatten1_reg_697 <= exitcond_flatten1_fu_286_p2;
                exitcond_flatten_mid_reg_702 <= exitcond_flatten_mid_fu_292_p2;
                exitcond_flatten_reg_680 <= exitcond_flatten_fu_275_p2;
                not_exitcond_flatten_reg_692 <= not_exitcond_flatten_fu_280_p2;
                tmp_1_reg_711 <= tmp_1_fu_298_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_flatten2_reg_671 <= exitcond_flatten2_fu_264_p2;
                exitcond_flatten2_reg_671_pp0_iter1_reg <= exitcond_flatten2_reg_671;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                in_index_t_reg_762_pp0_iter2_reg <= in_index_t_reg_762;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten2_reg_671 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                tmp_7_mid2_v_reg_727 <= tmp_7_mid2_v_fu_385_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (exitcond_flatten2_reg_671_pp0_iter1_reg = ap_const_lv1_0))) then
                tmp_8_reg_771 <= grp_fu_642_p3;
            end if;
        end if;
    end process;
    bound8_reg_661(1 downto 0) <= "00";
    bound8_reg_661(34) <= '0';
    bound_reg_666(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, enable_read_read_fu_78_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (enable_read_read_fu_78_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_start = ap_const_logic_1) and (enable_read_read_fu_78_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    Input_0_address0 <= tmp_23_cast_fu_623_p1(12 - 1 downto 0);

    Input_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Input_0_ce0 <= ap_const_logic_1;
        else 
            Input_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Output_0_address0 <= tmp_17_cast_fu_627_p1(10 - 1 downto 0);

    Output_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            Output_0_ce0 <= ap_const_logic_1;
        else 
            Output_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Output_0_d0 <= tmp_7_fu_634_p1;

    Output_0_we0_assign_proc : process(ap_block_pp0_stage0_11001, in_index_t_reg_762_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (in_index_t_reg_762_pp0_iter2_reg = ap_const_lv2_0))) then 
            Output_0_we0 <= ap_const_logic_1;
        else 
            Output_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Output_1_address0 <= tmp_17_cast_fu_627_p1(10 - 1 downto 0);

    Output_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            Output_1_ce0 <= ap_const_logic_1;
        else 
            Output_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Output_1_d0 <= tmp_7_fu_634_p1;

    Output_1_we0_assign_proc : process(ap_block_pp0_stage0_11001, in_index_t_reg_762_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (in_index_t_reg_762_pp0_iter2_reg = ap_const_lv2_1))) then 
            Output_1_we0 <= ap_const_logic_1;
        else 
            Output_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Output_2_address0 <= tmp_17_cast_fu_627_p1(10 - 1 downto 0);

    Output_2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            Output_2_ce0 <= ap_const_logic_1;
        else 
            Output_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Output_2_d0 <= tmp_7_fu_634_p1;

    Output_2_we0_assign_proc : process(ap_block_pp0_stage0_11001, in_index_t_reg_762_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (in_index_t_reg_762_pp0_iter2_reg = ap_const_lv2_2))) then 
            Output_2_we0 <= ap_const_logic_1;
        else 
            Output_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Output_3_address0 <= tmp_17_cast_fu_627_p1(10 - 1 downto 0);

    Output_3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            Output_3_ce0 <= ap_const_logic_1;
        else 
            Output_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Output_3_d0 <= tmp_7_fu_634_p1;

    Output_3_we0_assign_proc : process(ap_block_pp0_stage0_11001, in_index_t_reg_762_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (in_index_t_reg_762_pp0_iter2_reg = ap_const_lv2_3))) then 
            Output_3_we0 <= ap_const_logic_1;
        else 
            Output_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Xoffset_fu_599_p2 <= std_logic_vector(unsigned(tmp_6_fu_595_p1) + unsigned(tmp_5_mid2_fu_480_p3));
    Yoffset_fu_360_p2 <= std_logic_vector(unsigned(tmp_3_fu_356_p1) + unsigned(tmp_2_fu_336_p3));
    Yoffset_mid1_fu_545_p2 <= std_logic_vector(unsigned(tmp_3_mid1_fu_541_p1) + unsigned(tmp_2_mid2_fu_408_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter1_state3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter1_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter1_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_y_phi_fu_198_p4_assign_proc : process(y_reg_194, exitcond_flatten2_reg_671_pp0_iter1_reg, tmp_7_mid2_v_reg_727, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond_flatten2_reg_671_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_y_phi_fu_198_p4 <= tmp_7_mid2_v_reg_727;
        else 
            ap_phi_mux_y_phi_fu_198_p4 <= y_reg_194;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bound8_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_238_p3),35));
    bound_fu_258_p0 <= bound_fu_258_p00(32 - 1 downto 0);
    bound_fu_258_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(TR_MIN),66));
    bound_fu_258_p1 <= bound_fu_258_p10(34 - 1 downto 0);
    bound_fu_258_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_238_p3),66));
    bound_fu_258_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_258_p0) * unsigned(bound_fu_258_p1), 66));
    enable_read_read_fu_78_p2 <= (0=>enable, others=>'-');
    exitcond_flatten1_fu_286_p2 <= "1" when (indvar_flatten_reg_183 = ap_const_lv4_4) else "0";
    exitcond_flatten2_fu_264_p2 <= "1" when (indvar_flatten1_reg_161 = bound_reg_666) else "0";
    exitcond_flatten_fu_275_p2 <= "1" when (indvar_flatten2_reg_172 = bound8_reg_661) else "0";
    exitcond_flatten_mid_fu_292_p2 <= (not_exitcond_flatten_fu_280_p2 and exitcond_flatten1_fu_286_p2);
    exitcond_flatten_not_fu_494_p2 <= (exitcond_flatten1_reg_697 xor ap_const_lv1_1);
    exitcond_fu_422_p2 <= "1" when (kx_reg_227 = ap_const_lv2_2) else "0";
    exitcond_mid1_fu_504_p2 <= (not_exitcond_flatten_1_fu_499_p2 and exitcond_mid_fu_428_p2);
    exitcond_mid_fu_428_p2 <= (not_exitcond_flatten_reg_692 and exitcond_fu_422_p2);
    grp_fu_642_p0 <= ap_const_lv11_1A(6 - 1 downto 0);
    grp_fu_648_p0 <= ap_const_lv13_35(7 - 1 downto 0);
    grp_fu_648_p1 <= grp_fu_648_p10(8 - 1 downto 0);
    grp_fu_648_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_reg_747),13));
    grp_fu_648_p2 <= grp_fu_648_p20(8 - 1 downto 0);
    grp_fu_648_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Xoffset_reg_757),13));
    in_index_t_fu_605_p2 <= std_logic_vector(unsigned(kx_mid2_fu_533_p3) + unsigned(tmp_8_mid2_fu_579_p3));
    indvar_flatten23_op_fu_318_p2 <= std_logic_vector(unsigned(indvar_flatten2_reg_172) + unsigned(ap_const_lv35_1));
    indvar_flatten_next1_fu_324_p3 <= 
        ap_const_lv35_1 when (exitcond_flatten_fu_275_p2(0) = '1') else 
        indvar_flatten23_op_fu_318_p2;
    indvar_flatten_next2_fu_269_p2 <= std_logic_vector(unsigned(ap_const_lv66_1) + unsigned(indvar_flatten1_reg_161));
    indvar_flatten_next_fu_310_p3 <= 
        ap_const_lv4_1 when (tmp_1_fu_298_p2(0) = '1') else 
        indvar_flatten_op_fu_304_p2;
    indvar_flatten_op_fu_304_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_183) + unsigned(ap_const_lv4_1));
    kx_1_fu_611_p2 <= std_logic_vector(unsigned(kx_mid2_fu_533_p3) + unsigned(ap_const_lv2_1));
    kx_mid2_fu_533_p3 <= 
        ap_const_lv2_0 when (tmp_31_fu_528_p2(0) = '1') else 
        kx_reg_227;
    ky_1_fu_517_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(ky_mid_fu_439_p3));
    ky_mid2_fu_587_p3 <= 
        ky_1_fu_517_p2 when (exitcond_mid1_fu_504_p2(0) = '1') else 
        ky_mid_fu_439_p3;
    ky_mid_fu_439_p3 <= 
        ap_const_lv2_0 when (tmp_1_reg_711(0) = '1') else 
        ky_reg_216;
    not_exitcond_flatten_1_fu_499_p2 <= (exitcond_flatten_reg_680 or exitcond_flatten_not_fu_494_p2);
    not_exitcond_flatten_fu_280_p2 <= (exitcond_flatten_fu_275_p2 xor ap_const_lv1_1);
        tmp_17_cast_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_reg_771),64));

    tmp_18_fu_332_p1 <= ap_phi_mux_y_phi_fu_198_p4(7 - 1 downto 0);
    tmp_19_fu_344_p1 <= x_reg_205(7 - 1 downto 0);
    tmp_1_fu_298_p2 <= (exitcond_flatten_mid_fu_292_p2 or exitcond_flatten_fu_275_p2);
    tmp_22_fu_366_p2 <= std_logic_vector(shift_left(unsigned(ky_reg_216),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
        tmp_23_cast_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_648_p3),64));

    tmp_24_fu_392_p1 <= tmp_7_mid2_v_fu_385_p3(11 - 1 downto 0);
    tmp_25_fu_396_p1 <= y_1_fu_372_p2(7 - 1 downto 0);
    tmp_26_fu_446_p1 <= x_1_fu_433_p2(11 - 1 downto 0);
    tmp_27_fu_450_p1 <= x_reg_205(11 - 1 downto 0);
    tmp_28_fu_454_p3 <= 
        ap_const_lv11_0 when (exitcond_flatten_reg_680(0) = '1') else 
        tmp_27_fu_450_p1;
    tmp_29_fu_461_p3 <= 
        tmp_26_fu_446_p1 when (exitcond_flatten_mid_reg_702(0) = '1') else 
        tmp_28_fu_454_p3;
    tmp_2_fu_336_p3 <= (tmp_18_fu_332_p1 & ap_const_lv1_0);
    tmp_2_mid1_fu_400_p3 <= (tmp_25_fu_396_p1 & ap_const_lv1_0);
    tmp_2_mid2_fu_408_p3 <= 
        tmp_2_mid1_fu_400_p3 when (exitcond_flatten_reg_680(0) = '1') else 
        tmp_2_fu_336_p3;
    tmp_30_fu_468_p1 <= x_1_fu_433_p2(7 - 1 downto 0);
    tmp_31_fu_528_p2 <= (tmp_9_fu_523_p2 or exitcond_flatten_reg_680);
    tmp_32_fu_551_p3 <= 
        tmp_2_mid1_fu_400_p3 when (exitcond_flatten_reg_680(0) = '1') else 
        Yoffset_fu_360_p2;
    tmp_33_fu_558_p3 <= 
        tmp_2_mid2_fu_408_p3 when (exitcond_flatten_mid_reg_702(0) = '1') else 
        tmp_32_fu_551_p3;
    tmp_34_fu_565_p3 <= 
        Yoffset_mid1_fu_545_p2 when (exitcond_mid1_fu_504_p2(0) = '1') else 
        tmp_33_fu_558_p3;
    tmp_35_fu_573_p2 <= std_logic_vector(shift_left(unsigned(ky_1_fu_517_p2),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    tmp_3_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ky_reg_216),8));
    tmp_3_mid1_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ky_1_fu_517_p2),8));
    tmp_5_fu_348_p3 <= (tmp_19_fu_344_p1 & ap_const_lv1_0);
    tmp_5_mid1_fu_472_p3 <= (tmp_30_fu_468_p1 & ap_const_lv1_0);
    tmp_5_mid2_fu_480_p3 <= 
        tmp_5_mid1_fu_472_p3 when (exitcond_flatten_mid_reg_702(0) = '1') else 
        tmp_5_mid_fu_415_p3;
    tmp_5_mid_fu_415_p3 <= 
        ap_const_lv8_0 when (exitcond_flatten_reg_680(0) = '1') else 
        tmp_5_fu_348_p3;
    tmp_6_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kx_mid2_fu_533_p3),8));
        tmp_7_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Input_0_q0),32));

    tmp_7_mid2_v_fu_385_p3 <= 
        y_1_fu_372_p2 when (exitcond_flatten_reg_680(0) = '1') else 
        ap_phi_mux_y_phi_fu_198_p4;
    tmp_8_mid2_fu_579_p3 <= 
        tmp_35_fu_573_p2 when (exitcond_mid1_fu_504_p2(0) = '1') else 
        tmp_8_mid_fu_487_p3;
    tmp_8_mid_fu_487_p3 <= 
        ap_const_lv2_0 when (tmp_1_reg_711(0) = '1') else 
        tmp_22_fu_366_p2;
    tmp_9_fu_523_p2 <= (exitcond_mid1_fu_504_p2 or exitcond_flatten_mid_reg_702);
    tmp_fu_238_p3 <= (TC_MIN & ap_const_lv2_0);
    x_1_fu_433_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(x_mid_fu_378_p3));
    x_mid2_fu_510_p3 <= 
        x_1_fu_433_p2 when (exitcond_flatten_mid_reg_702(0) = '1') else 
        x_mid_fu_378_p3;
    x_mid_fu_378_p3 <= 
        ap_const_lv31_0 when (exitcond_flatten_reg_680(0) = '1') else 
        x_reg_205;
    y_1_fu_372_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(ap_phi_mux_y_phi_fu_198_p4));
end behav;
