-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity input_load is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_input_r_AWVALID : OUT STD_LOGIC;
    m_axi_input_r_AWREADY : IN STD_LOGIC;
    m_axi_input_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_WVALID : OUT STD_LOGIC;
    m_axi_input_r_WREADY : IN STD_LOGIC;
    m_axi_input_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_WLAST : OUT STD_LOGIC;
    m_axi_input_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_ARVALID : OUT STD_LOGIC;
    m_axi_input_r_ARREADY : IN STD_LOGIC;
    m_axi_input_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_RVALID : IN STD_LOGIC;
    m_axi_input_r_RREADY : OUT STD_LOGIC;
    m_axi_input_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_r_RLAST : IN STD_LOGIC;
    m_axi_input_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_BVALID : IN STD_LOGIC;
    m_axi_input_r_BREADY : OUT STD_LOGIC;
    m_axi_input_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_offset : IN STD_LOGIC_VECTOR (29 downto 0);
    m_axi_input1_AWVALID : OUT STD_LOGIC;
    m_axi_input1_AWREADY : IN STD_LOGIC;
    m_axi_input1_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input1_WVALID : OUT STD_LOGIC;
    m_axi_input1_WREADY : IN STD_LOGIC;
    m_axi_input1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input1_WLAST : OUT STD_LOGIC;
    m_axi_input1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input1_ARVALID : OUT STD_LOGIC;
    m_axi_input1_ARREADY : IN STD_LOGIC;
    m_axi_input1_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input1_RVALID : IN STD_LOGIC;
    m_axi_input1_RREADY : OUT STD_LOGIC;
    m_axi_input1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input1_RLAST : IN STD_LOGIC;
    m_axi_input1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input1_BVALID : IN STD_LOGIC;
    m_axi_input1_BREADY : OUT STD_LOGIC;
    m_axi_input1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input1_offset : IN STD_LOGIC_VECTOR (29 downto 0);
    m_axi_input2_AWVALID : OUT STD_LOGIC;
    m_axi_input2_AWREADY : IN STD_LOGIC;
    m_axi_input2_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input2_WVALID : OUT STD_LOGIC;
    m_axi_input2_WREADY : IN STD_LOGIC;
    m_axi_input2_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input2_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input2_WLAST : OUT STD_LOGIC;
    m_axi_input2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input2_ARVALID : OUT STD_LOGIC;
    m_axi_input2_ARREADY : IN STD_LOGIC;
    m_axi_input2_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input2_RVALID : IN STD_LOGIC;
    m_axi_input2_RREADY : OUT STD_LOGIC;
    m_axi_input2_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input2_RLAST : IN STD_LOGIC;
    m_axi_input2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input2_BVALID : IN STD_LOGIC;
    m_axi_input2_BREADY : OUT STD_LOGIC;
    m_axi_input2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input2_offset : IN STD_LOGIC_VECTOR (29 downto 0);
    m_axi_input3_AWVALID : OUT STD_LOGIC;
    m_axi_input3_AWREADY : IN STD_LOGIC;
    m_axi_input3_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input3_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input3_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input3_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input3_WVALID : OUT STD_LOGIC;
    m_axi_input3_WREADY : IN STD_LOGIC;
    m_axi_input3_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input3_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input3_WLAST : OUT STD_LOGIC;
    m_axi_input3_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input3_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input3_ARVALID : OUT STD_LOGIC;
    m_axi_input3_ARREADY : IN STD_LOGIC;
    m_axi_input3_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input3_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input3_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input3_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input3_RVALID : IN STD_LOGIC;
    m_axi_input3_RREADY : OUT STD_LOGIC;
    m_axi_input3_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input3_RLAST : IN STD_LOGIC;
    m_axi_input3_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input3_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input3_BVALID : IN STD_LOGIC;
    m_axi_input3_BREADY : OUT STD_LOGIC;
    m_axi_input3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input3_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input3_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input3_offset : IN STD_LOGIC_VECTOR (29 downto 0);
    input_buffer_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_buffer_0_ce0 : OUT STD_LOGIC;
    input_buffer_0_we0 : OUT STD_LOGIC;
    input_buffer_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    input_buffer_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_buffer_1_ce0 : OUT STD_LOGIC;
    input_buffer_1_we0 : OUT STD_LOGIC;
    input_buffer_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    input_buffer_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_buffer_2_ce0 : OUT STD_LOGIC;
    input_buffer_2_we0 : OUT STD_LOGIC;
    input_buffer_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    input_buffer_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_buffer_3_ce0 : OUT STD_LOGIC;
    input_buffer_3_we0 : OUT STD_LOGIC;
    input_buffer_3_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    r : IN STD_LOGIC_VECTOR (31 downto 0);
    c : IN STD_LOGIC_VECTOR (31 downto 0);
    n : IN STD_LOGIC_VECTOR (31 downto 0);
    Kernel_stride : IN STD_LOGIC_VECTOR (31 downto 0);
    Padding : IN STD_LOGIC_VECTOR (31 downto 0);
    TRow : IN STD_LOGIC_VECTOR (7 downto 0);
    TCol : IN STD_LOGIC_VECTOR (7 downto 0);
    Input_w : IN STD_LOGIC_VECTOR (31 downto 0);
    Input_h : IN STD_LOGIC_VECTOR (31 downto 0);
    TN_MIN : IN STD_LOGIC_VECTOR (31 downto 0);
    IHxIW : IN STD_LOGIC_VECTOR (18 downto 0);
    LayerType : IN STD_LOGIC_VECTOR (1 downto 0);
    trow_loops_V : IN STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of input_load is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv9_D : STD_LOGIC_VECTOR (8 downto 0) := "000001101";
    constant ap_const_lv9_1A : STD_LOGIC_VECTOR (8 downto 0) := "000011010";
    constant ap_const_lv9_34 : STD_LOGIC_VECTOR (8 downto 0) := "000110100";
    constant ap_const_lv6_34 : STD_LOGIC_VECTOR (5 downto 0) := "110100";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_memcpy_buffer0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal input_memcpy_buffer0_ce0 : STD_LOGIC;
    signal input_memcpy_buffer0_we0 : STD_LOGIC;
    signal input_memcpy_buffer0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_memcpy_buffer1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal input_memcpy_buffer1_ce0 : STD_LOGIC;
    signal input_memcpy_buffer1_we0 : STD_LOGIC;
    signal input_memcpy_buffer1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_memcpy_buffer2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal input_memcpy_buffer2_ce0 : STD_LOGIC;
    signal input_memcpy_buffer2_we0 : STD_LOGIC;
    signal input_memcpy_buffer2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_memcpy_buffer3_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal input_memcpy_buffer3_ce0 : STD_LOGIC;
    signal input_memcpy_buffer3_we0 : STD_LOGIC;
    signal input_memcpy_buffer3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_memcpy_buffer0_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal input_memcpy_buffer0_1_ce0 : STD_LOGIC;
    signal input_memcpy_buffer0_1_we0 : STD_LOGIC;
    signal input_memcpy_buffer0_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_memcpy_buffer1_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal input_memcpy_buffer1_1_ce0 : STD_LOGIC;
    signal input_memcpy_buffer1_1_we0 : STD_LOGIC;
    signal input_memcpy_buffer1_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_memcpy_buffer2_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal input_memcpy_buffer2_1_ce0 : STD_LOGIC;
    signal input_memcpy_buffer2_1_we0 : STD_LOGIC;
    signal input_memcpy_buffer2_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_memcpy_buffer3_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal input_memcpy_buffer3_1_ce0 : STD_LOGIC;
    signal input_memcpy_buffer3_1_we0 : STD_LOGIC;
    signal input_memcpy_buffer3_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_fu_513_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal rhs_V_reg_1065 : STD_LOGIC_VECTOR (10 downto 0);
    signal rhs_V_2_fu_517_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal rhs_V_2_reg_1070 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_956_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_21_reg_1075 : STD_LOGIC_VECTOR (11 downto 0);
    signal TRow_top_V_fu_525_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal TRow_top_V_reg_1081 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_81_fu_528_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_81_reg_1086 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_86_fu_531_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_86_reg_1091 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal IHxIW_18b_V_fu_546_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal IHxIW_18b_V_reg_1101 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1106 : STD_LOGIC_VECTOR (0 downto 0);
    signal TCol_left_V_fu_559_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal TCol_left_V_reg_1111 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_12_fu_571_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_12_reg_1116 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_46_fu_584_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_46_reg_1121 : STD_LOGIC_VECTOR (5 downto 0);
    signal TRow_top_V_1_fu_595_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal TRow_top_V_1_reg_1126 : STD_LOGIC_VECTOR (9 downto 0);
    signal row_len_V_fu_652_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal row_len_V_reg_1131 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_15_fu_978_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_15_reg_1137 : STD_LOGIC_VECTOR (28 downto 0);
    signal RowSub_V_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal RowSub_V_reg_1142 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_88_fu_675_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_88_reg_1149 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal TN_MIN_3b_V_fu_682_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal TN_MIN_3b_V_reg_1184 : STD_LOGIC_VECTOR (2 downto 0);
    signal col_len_V_fu_716_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_len_V_reg_1189 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_18_fu_736_p2 : STD_LOGIC_VECTOR (29 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of r_V_18_fu_736_p2 : signal is "no";
    signal r_V_18_reg_1194 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_2_fu_759_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_2_reg_1199 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_3_fu_767_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_3_reg_1204 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_4_fu_783_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_4_reg_1209 : STD_LOGIC_VECTOR (2 downto 0);
    signal ColSub_V_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ColSub_V_reg_1214 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_19_fu_804_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_19_reg_1219 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_81_cast_fu_810_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_81_cast_reg_1224 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_51_fu_813_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_51_reg_1229 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_1_fu_823_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_1_reg_1234 : STD_LOGIC_VECTOR (6 downto 0);
    signal TMP_t2_V_fu_838_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal TMP_t2_V_reg_1242 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal IsRowPixel_fu_864_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal IsRowPixel_reg_1247 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_fu_833_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_fu_870_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_reg_1252 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_reg_1257 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_pingpong_phi_fu_327_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_reg_1262 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal t2_V_fu_943_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_mmcpy_inputpixel_m2b_fu_348_ap_idle : STD_LOGIC;
    signal grp_mmcpy_inputpixel_m2b_fu_348_ap_ready : STD_LOGIC;
    signal grp_mmcpy_inputpixel_m2b_fu_348_ap_done : STD_LOGIC;
    signal pingpong_reg_323 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_input2buf_row_fu_391_ap_idle : STD_LOGIC;
    signal grp_copy_input2buf_row_fu_391_ap_ready : STD_LOGIC;
    signal grp_copy_input2buf_row_fu_391_ap_done : STD_LOGIC;
    signal ap_block_state6_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_mmcpy_inputpixel_m2b_fu_348_ap_start : STD_LOGIC;
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_AWVALID : STD_LOGIC;
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_WVALID : STD_LOGIC;
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_WLAST : STD_LOGIC;
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_ARVALID : STD_LOGIC;
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_RREADY : STD_LOGIC;
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_BREADY : STD_LOGIC;
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_AWVALID : STD_LOGIC;
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_WVALID : STD_LOGIC;
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_WLAST : STD_LOGIC;
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_ARVALID : STD_LOGIC;
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_RREADY : STD_LOGIC;
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_BREADY : STD_LOGIC;
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_AWVALID : STD_LOGIC;
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_WVALID : STD_LOGIC;
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_WLAST : STD_LOGIC;
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_ARVALID : STD_LOGIC;
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_RREADY : STD_LOGIC;
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_BREADY : STD_LOGIC;
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_AWVALID : STD_LOGIC;
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_WVALID : STD_LOGIC;
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_WLAST : STD_LOGIC;
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_ARVALID : STD_LOGIC;
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_RREADY : STD_LOGIC;
    signal grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_BREADY : STD_LOGIC;
    signal grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer_ce0 : STD_LOGIC;
    signal grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer_we0 : STD_LOGIC;
    signal grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer1_ce0 : STD_LOGIC;
    signal grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer1_we0 : STD_LOGIC;
    signal grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer2_ce0 : STD_LOGIC;
    signal grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer2_we0 : STD_LOGIC;
    signal grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer3_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer3_ce0 : STD_LOGIC;
    signal grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer3_we0 : STD_LOGIC;
    signal grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_RowBeginByte_0_V_read : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_RowBeginByte_1_V_read : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_RowBeginByte_2_V_read : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_RowBeginByte_3_V_read : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_IsRowPixel : STD_LOGIC;
    signal grp_mmcpy_inputpixel_m2b_fu_348_enable : STD_LOGIC;
    signal grp_mmcpy_inputpixel_m2b_fu_348_ap_return_0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_ap_return_1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_ap_return_2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_ap_return_3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_ap_return_4 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_ap_return_5 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_input2buf_row_fu_391_ap_start : STD_LOGIC;
    signal grp_copy_input2buf_row_fu_391_input_buffer_0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_copy_input2buf_row_fu_391_input_buffer_0_ce0 : STD_LOGIC;
    signal grp_copy_input2buf_row_fu_391_input_buffer_0_we0 : STD_LOGIC;
    signal grp_copy_input2buf_row_fu_391_input_buffer_0_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_input2buf_row_fu_391_input_buffer_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_copy_input2buf_row_fu_391_input_buffer_1_ce0 : STD_LOGIC;
    signal grp_copy_input2buf_row_fu_391_input_buffer_1_we0 : STD_LOGIC;
    signal grp_copy_input2buf_row_fu_391_input_buffer_1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_input2buf_row_fu_391_input_buffer_2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_copy_input2buf_row_fu_391_input_buffer_2_ce0 : STD_LOGIC;
    signal grp_copy_input2buf_row_fu_391_input_buffer_2_we0 : STD_LOGIC;
    signal grp_copy_input2buf_row_fu_391_input_buffer_2_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_input2buf_row_fu_391_input_buffer_3_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_copy_input2buf_row_fu_391_input_buffer_3_ce0 : STD_LOGIC;
    signal grp_copy_input2buf_row_fu_391_input_buffer_3_we0 : STD_LOGIC;
    signal grp_copy_input2buf_row_fu_391_input_buffer_3_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_input2buf_row_fu_391_input_memcpy_buffer_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_copy_input2buf_row_fu_391_input_memcpy_buffer_ce0 : STD_LOGIC;
    signal grp_copy_input2buf_row_fu_391_input_memcpy_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_input2buf_row_fu_391_input_memcpy_buffer1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_copy_input2buf_row_fu_391_input_memcpy_buffer1_ce0 : STD_LOGIC;
    signal grp_copy_input2buf_row_fu_391_input_memcpy_buffer1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_input2buf_row_fu_391_input_memcpy_buffer2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_copy_input2buf_row_fu_391_input_memcpy_buffer2_ce0 : STD_LOGIC;
    signal grp_copy_input2buf_row_fu_391_input_memcpy_buffer2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_input2buf_row_fu_391_input_memcpy_buffer3_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_copy_input2buf_row_fu_391_input_memcpy_buffer3_ce0 : STD_LOGIC;
    signal grp_copy_input2buf_row_fu_391_input_memcpy_buffer3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_input2buf_row_fu_391_RowBeginByte_0_V_re : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_input2buf_row_fu_391_RowBeginByte_1_V_re : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_input2buf_row_fu_391_RowBeginByte_2_V_re : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_input2buf_row_fu_391_RowBeginByte_3_V_re : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_input2buf_row_fu_391_next_t2_0_V_read : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_copy_input2buf_row_fu_391_p_read15 : STD_LOGIC;
    signal grp_copy_input2buf_row_fu_391_enable : STD_LOGIC;
    signal p_5_reg_300 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_6_reg_311 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_pingpong_1_phi_fu_339_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputpixel_m2b_fu_348_ap_start_reg : STD_LOGIC := '0';
    signal grp_copy_input2buf_row_fu_391_ap_start_reg : STD_LOGIC := '0';
    signal next_t2_0_V_1_fu_150 : STD_LOGIC_VECTOR (5 downto 0);
    signal next_IsRowPixel_0_1_fu_154 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_t22_0_V_1_fu_158 : STD_LOGIC_VECTOR (5 downto 0);
    signal next_IsRowPixel2_0_1_fu_162 : STD_LOGIC_VECTOR (0 downto 0);
    signal RowBeginByte_0_V_1_fu_166 : STD_LOGIC_VECTOR (0 downto 0);
    signal RowBeginByte_1_V_1_fu_170 : STD_LOGIC_VECTOR (0 downto 0);
    signal RowBeginByte_2_V_1_fu_174 : STD_LOGIC_VECTOR (0 downto 0);
    signal RowBeginByte_3_V_1_fu_178 : STD_LOGIC_VECTOR (0 downto 0);
    signal RowBeginByte2_0_V_1_fu_182 : STD_LOGIC_VECTOR (0 downto 0);
    signal RowBeginByte2_1_V_1_fu_186 : STD_LOGIC_VECTOR (0 downto 0);
    signal RowBeginByte2_2_V_1_fu_190 : STD_LOGIC_VECTOR (0 downto 0);
    signal RowBeginByte2_3_V_1_fu_194 : STD_LOGIC_VECTOR (0 downto 0);
    signal Kernel_stride_2b_V_fu_505_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal Padding_1b_V_fu_509_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_9b_V_fu_501_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_9b_V_fu_534_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_967_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal rhs_V_8_cast_fu_562_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_11_fu_566_p2 : STD_LOGIC_VECTOR (11 downto 0);
    attribute use_dsp48 of r_V_11_fu_566_p2 : signal is "no";
    signal tmp_77_fu_580_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_76_fu_577_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_48_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_9_cast_fu_602_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_13_fu_606_p2 : STD_LOGIC_VECTOR (11 downto 0);
    attribute use_dsp48 of r_V_13_fu_606_p2 : signal is "no";
    signal Input_h_10b_V_fu_542_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_14_fu_611_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_71_cast_fu_617_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_82_fu_627_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_49_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_50_fu_631_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_83_fu_636_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_20_fu_640_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_84_fu_648_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal n_11b_V_fu_538_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_85_fu_666_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal Input_w_9b_V_fu_678_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_cast_fu_692_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_78_fu_701_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal TCol_left_V_1_fu_686_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_18_fu_705_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_79_fu_712_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal rhs_V_13_cast_fu_732_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_984_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal sel_tmp2_fu_747_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp9_fu_775_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_87_fu_791_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal lhs_V_20_cast_fu_800_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal rhs_V_6_fu_820_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal lhs_V_1_fu_817_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_84_cast_fu_829_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_86_cast_fu_844_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ult_fu_853_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_fu_848_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_858_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_956_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_956_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_956_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_967_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_967_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_967_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_15_fu_978_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_15_fu_978_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_984_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_984_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_984_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_956_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_956_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_956_p20 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_967_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_984_p00 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_984_p10 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_984_p20 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_15_fu_978_p00 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_15_fu_978_p10 : STD_LOGIC_VECTOR (28 downto 0);

    component mmcpy_inputpixel_m2b IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_input_r_AWVALID : OUT STD_LOGIC;
        m_axi_input_r_AWREADY : IN STD_LOGIC;
        m_axi_input_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_WVALID : OUT STD_LOGIC;
        m_axi_input_r_WREADY : IN STD_LOGIC;
        m_axi_input_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_WLAST : OUT STD_LOGIC;
        m_axi_input_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_ARVALID : OUT STD_LOGIC;
        m_axi_input_r_ARREADY : IN STD_LOGIC;
        m_axi_input_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_RVALID : IN STD_LOGIC;
        m_axi_input_r_RREADY : OUT STD_LOGIC;
        m_axi_input_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_RLAST : IN STD_LOGIC;
        m_axi_input_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_BVALID : IN STD_LOGIC;
        m_axi_input_r_BREADY : OUT STD_LOGIC;
        m_axi_input_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        m_axi_input1_AWVALID : OUT STD_LOGIC;
        m_axi_input1_AWREADY : IN STD_LOGIC;
        m_axi_input1_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input1_WVALID : OUT STD_LOGIC;
        m_axi_input1_WREADY : IN STD_LOGIC;
        m_axi_input1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input1_WLAST : OUT STD_LOGIC;
        m_axi_input1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input1_ARVALID : OUT STD_LOGIC;
        m_axi_input1_ARREADY : IN STD_LOGIC;
        m_axi_input1_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input1_RVALID : IN STD_LOGIC;
        m_axi_input1_RREADY : OUT STD_LOGIC;
        m_axi_input1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input1_RLAST : IN STD_LOGIC;
        m_axi_input1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input1_BVALID : IN STD_LOGIC;
        m_axi_input1_BREADY : OUT STD_LOGIC;
        m_axi_input1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input1_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        m_axi_input2_AWVALID : OUT STD_LOGIC;
        m_axi_input2_AWREADY : IN STD_LOGIC;
        m_axi_input2_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input2_WVALID : OUT STD_LOGIC;
        m_axi_input2_WREADY : IN STD_LOGIC;
        m_axi_input2_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input2_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input2_WLAST : OUT STD_LOGIC;
        m_axi_input2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input2_ARVALID : OUT STD_LOGIC;
        m_axi_input2_ARREADY : IN STD_LOGIC;
        m_axi_input2_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input2_RVALID : IN STD_LOGIC;
        m_axi_input2_RREADY : OUT STD_LOGIC;
        m_axi_input2_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input2_RLAST : IN STD_LOGIC;
        m_axi_input2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input2_BVALID : IN STD_LOGIC;
        m_axi_input2_BREADY : OUT STD_LOGIC;
        m_axi_input2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input2_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        m_axi_input3_AWVALID : OUT STD_LOGIC;
        m_axi_input3_AWREADY : IN STD_LOGIC;
        m_axi_input3_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input3_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input3_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input3_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input3_WVALID : OUT STD_LOGIC;
        m_axi_input3_WREADY : IN STD_LOGIC;
        m_axi_input3_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input3_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input3_WLAST : OUT STD_LOGIC;
        m_axi_input3_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input3_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input3_ARVALID : OUT STD_LOGIC;
        m_axi_input3_ARREADY : IN STD_LOGIC;
        m_axi_input3_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input3_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input3_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input3_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input3_RVALID : IN STD_LOGIC;
        m_axi_input3_RREADY : OUT STD_LOGIC;
        m_axi_input3_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input3_RLAST : IN STD_LOGIC;
        m_axi_input3_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input3_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input3_BVALID : IN STD_LOGIC;
        m_axi_input3_BREADY : OUT STD_LOGIC;
        m_axi_input3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input3_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input3_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input3_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        input_memcpy_buffer_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        input_memcpy_buffer_ce0 : OUT STD_LOGIC;
        input_memcpy_buffer_we0 : OUT STD_LOGIC;
        input_memcpy_buffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        input_memcpy_buffer1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        input_memcpy_buffer1_ce0 : OUT STD_LOGIC;
        input_memcpy_buffer1_we0 : OUT STD_LOGIC;
        input_memcpy_buffer1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        input_memcpy_buffer2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        input_memcpy_buffer2_ce0 : OUT STD_LOGIC;
        input_memcpy_buffer2_we0 : OUT STD_LOGIC;
        input_memcpy_buffer2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        input_memcpy_buffer3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        input_memcpy_buffer3_ce0 : OUT STD_LOGIC;
        input_memcpy_buffer3_we0 : OUT STD_LOGIC;
        input_memcpy_buffer3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        RowBeginByte_0_V_read : IN STD_LOGIC_VECTOR (0 downto 0);
        RowBeginByte_1_V_read : IN STD_LOGIC_VECTOR (0 downto 0);
        RowBeginByte_2_V_read : IN STD_LOGIC_VECTOR (0 downto 0);
        RowBeginByte_3_V_read : IN STD_LOGIC_VECTOR (0 downto 0);
        TN_MIN_3b_V : IN STD_LOGIC_VECTOR (2 downto 0);
        next_t2_0_V_write : IN STD_LOGIC_VECTOR (5 downto 0);
        IN_OFFSET : IN STD_LOGIC_VECTOR (29 downto 0);
        RowIncreaseLength_V : IN STD_LOGIC_VECTOR (8 downto 0);
        IHxIW_18b_V : IN STD_LOGIC_VECTOR (17 downto 0);
        ColIncreaseLength_V : IN STD_LOGIC_VECTOR (5 downto 0);
        IsRowPixel : IN STD_LOGIC;
        enable : IN STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component copy_input2buf_row IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_buffer_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        input_buffer_0_ce0 : OUT STD_LOGIC;
        input_buffer_0_we0 : OUT STD_LOGIC;
        input_buffer_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        input_buffer_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        input_buffer_1_ce0 : OUT STD_LOGIC;
        input_buffer_1_we0 : OUT STD_LOGIC;
        input_buffer_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        input_buffer_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        input_buffer_2_ce0 : OUT STD_LOGIC;
        input_buffer_2_we0 : OUT STD_LOGIC;
        input_buffer_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        input_buffer_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        input_buffer_3_ce0 : OUT STD_LOGIC;
        input_buffer_3_we0 : OUT STD_LOGIC;
        input_buffer_3_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        row_len_V : IN STD_LOGIC_VECTOR (5 downto 0);
        col_len_V : IN STD_LOGIC_VECTOR (5 downto 0);
        RowSub_V : IN STD_LOGIC_VECTOR (0 downto 0);
        ColSub_V : IN STD_LOGIC_VECTOR (0 downto 0);
        input_memcpy_buffer_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        input_memcpy_buffer_ce0 : OUT STD_LOGIC;
        input_memcpy_buffer_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_memcpy_buffer1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        input_memcpy_buffer1_ce0 : OUT STD_LOGIC;
        input_memcpy_buffer1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_memcpy_buffer2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        input_memcpy_buffer2_ce0 : OUT STD_LOGIC;
        input_memcpy_buffer2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_memcpy_buffer3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        input_memcpy_buffer3_ce0 : OUT STD_LOGIC;
        input_memcpy_buffer3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        RowBeginByte_0_V_re : IN STD_LOGIC_VECTOR (0 downto 0);
        RowBeginByte_1_V_re : IN STD_LOGIC_VECTOR (0 downto 0);
        RowBeginByte_2_V_re : IN STD_LOGIC_VECTOR (0 downto 0);
        RowBeginByte_3_V_re : IN STD_LOGIC_VECTOR (0 downto 0);
        TCol : IN STD_LOGIC_VECTOR (7 downto 0);
        LayerType : IN STD_LOGIC_VECTOR (1 downto 0);
        next_t2_0_V_read : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read15 : IN STD_LOGIC;
        enable : IN STD_LOGIC;
        T2Rate_V : IN STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component YOLO2_FPGA_mac_mujbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component YOLO2_FPGA_mul_mukbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component YOLO2_FPGA_mac_mulbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component input_load_input_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    input_memcpy_buffer0_U : component input_load_input_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input_memcpy_buffer0_address0,
        ce0 => input_memcpy_buffer0_ce0,
        we0 => input_memcpy_buffer0_we0,
        d0 => grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer_d0,
        q0 => input_memcpy_buffer0_q0);

    input_memcpy_buffer1_U : component input_load_input_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input_memcpy_buffer1_address0,
        ce0 => input_memcpy_buffer1_ce0,
        we0 => input_memcpy_buffer1_we0,
        d0 => grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer1_d0,
        q0 => input_memcpy_buffer1_q0);

    input_memcpy_buffer2_U : component input_load_input_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input_memcpy_buffer2_address0,
        ce0 => input_memcpy_buffer2_ce0,
        we0 => input_memcpy_buffer2_we0,
        d0 => grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer2_d0,
        q0 => input_memcpy_buffer2_q0);

    input_memcpy_buffer3_U : component input_load_input_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input_memcpy_buffer3_address0,
        ce0 => input_memcpy_buffer3_ce0,
        we0 => input_memcpy_buffer3_we0,
        d0 => grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer3_d0,
        q0 => input_memcpy_buffer3_q0);

    input_memcpy_buffer0_1_U : component input_load_input_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input_memcpy_buffer0_1_address0,
        ce0 => input_memcpy_buffer0_1_ce0,
        we0 => input_memcpy_buffer0_1_we0,
        d0 => grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer_d0,
        q0 => input_memcpy_buffer0_1_q0);

    input_memcpy_buffer1_1_U : component input_load_input_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input_memcpy_buffer1_1_address0,
        ce0 => input_memcpy_buffer1_1_ce0,
        we0 => input_memcpy_buffer1_1_we0,
        d0 => grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer1_d0,
        q0 => input_memcpy_buffer1_1_q0);

    input_memcpy_buffer2_1_U : component input_load_input_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input_memcpy_buffer2_1_address0,
        ce0 => input_memcpy_buffer2_1_ce0,
        we0 => input_memcpy_buffer2_1_we0,
        d0 => grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer2_d0,
        q0 => input_memcpy_buffer2_1_q0);

    input_memcpy_buffer3_1_U : component input_load_input_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input_memcpy_buffer3_1_address0,
        ce0 => input_memcpy_buffer3_1_ce0,
        we0 => input_memcpy_buffer3_1_we0,
        d0 => grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer3_d0,
        q0 => input_memcpy_buffer3_1_q0);

    grp_mmcpy_inputpixel_m2b_fu_348 : component mmcpy_inputpixel_m2b
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mmcpy_inputpixel_m2b_fu_348_ap_start,
        ap_done => grp_mmcpy_inputpixel_m2b_fu_348_ap_done,
        ap_idle => grp_mmcpy_inputpixel_m2b_fu_348_ap_idle,
        ap_ready => grp_mmcpy_inputpixel_m2b_fu_348_ap_ready,
        m_axi_input_r_AWVALID => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_AWVALID,
        m_axi_input_r_AWREADY => ap_const_logic_0,
        m_axi_input_r_AWADDR => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_AWADDR,
        m_axi_input_r_AWID => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_AWID,
        m_axi_input_r_AWLEN => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_AWLEN,
        m_axi_input_r_AWSIZE => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_AWSIZE,
        m_axi_input_r_AWBURST => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_AWBURST,
        m_axi_input_r_AWLOCK => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_AWLOCK,
        m_axi_input_r_AWCACHE => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_AWCACHE,
        m_axi_input_r_AWPROT => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_AWPROT,
        m_axi_input_r_AWQOS => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_AWQOS,
        m_axi_input_r_AWREGION => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_AWREGION,
        m_axi_input_r_AWUSER => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_AWUSER,
        m_axi_input_r_WVALID => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_WVALID,
        m_axi_input_r_WREADY => ap_const_logic_0,
        m_axi_input_r_WDATA => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_WDATA,
        m_axi_input_r_WSTRB => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_WSTRB,
        m_axi_input_r_WLAST => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_WLAST,
        m_axi_input_r_WID => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_WID,
        m_axi_input_r_WUSER => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_WUSER,
        m_axi_input_r_ARVALID => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_ARVALID,
        m_axi_input_r_ARREADY => m_axi_input_r_ARREADY,
        m_axi_input_r_ARADDR => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_ARADDR,
        m_axi_input_r_ARID => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_ARID,
        m_axi_input_r_ARLEN => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_ARLEN,
        m_axi_input_r_ARSIZE => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_ARSIZE,
        m_axi_input_r_ARBURST => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_ARBURST,
        m_axi_input_r_ARLOCK => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_ARLOCK,
        m_axi_input_r_ARCACHE => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_ARCACHE,
        m_axi_input_r_ARPROT => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_ARPROT,
        m_axi_input_r_ARQOS => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_ARQOS,
        m_axi_input_r_ARREGION => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_ARREGION,
        m_axi_input_r_ARUSER => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_ARUSER,
        m_axi_input_r_RVALID => m_axi_input_r_RVALID,
        m_axi_input_r_RREADY => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_RREADY,
        m_axi_input_r_RDATA => m_axi_input_r_RDATA,
        m_axi_input_r_RLAST => m_axi_input_r_RLAST,
        m_axi_input_r_RID => m_axi_input_r_RID,
        m_axi_input_r_RUSER => m_axi_input_r_RUSER,
        m_axi_input_r_RRESP => m_axi_input_r_RRESP,
        m_axi_input_r_BVALID => ap_const_logic_0,
        m_axi_input_r_BREADY => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_BREADY,
        m_axi_input_r_BRESP => ap_const_lv2_0,
        m_axi_input_r_BID => ap_const_lv1_0,
        m_axi_input_r_BUSER => ap_const_lv1_0,
        input_offset => input_offset,
        m_axi_input1_AWVALID => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_AWVALID,
        m_axi_input1_AWREADY => ap_const_logic_0,
        m_axi_input1_AWADDR => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_AWADDR,
        m_axi_input1_AWID => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_AWID,
        m_axi_input1_AWLEN => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_AWLEN,
        m_axi_input1_AWSIZE => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_AWSIZE,
        m_axi_input1_AWBURST => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_AWBURST,
        m_axi_input1_AWLOCK => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_AWLOCK,
        m_axi_input1_AWCACHE => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_AWCACHE,
        m_axi_input1_AWPROT => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_AWPROT,
        m_axi_input1_AWQOS => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_AWQOS,
        m_axi_input1_AWREGION => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_AWREGION,
        m_axi_input1_AWUSER => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_AWUSER,
        m_axi_input1_WVALID => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_WVALID,
        m_axi_input1_WREADY => ap_const_logic_0,
        m_axi_input1_WDATA => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_WDATA,
        m_axi_input1_WSTRB => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_WSTRB,
        m_axi_input1_WLAST => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_WLAST,
        m_axi_input1_WID => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_WID,
        m_axi_input1_WUSER => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_WUSER,
        m_axi_input1_ARVALID => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_ARVALID,
        m_axi_input1_ARREADY => m_axi_input1_ARREADY,
        m_axi_input1_ARADDR => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_ARADDR,
        m_axi_input1_ARID => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_ARID,
        m_axi_input1_ARLEN => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_ARLEN,
        m_axi_input1_ARSIZE => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_ARSIZE,
        m_axi_input1_ARBURST => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_ARBURST,
        m_axi_input1_ARLOCK => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_ARLOCK,
        m_axi_input1_ARCACHE => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_ARCACHE,
        m_axi_input1_ARPROT => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_ARPROT,
        m_axi_input1_ARQOS => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_ARQOS,
        m_axi_input1_ARREGION => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_ARREGION,
        m_axi_input1_ARUSER => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_ARUSER,
        m_axi_input1_RVALID => m_axi_input1_RVALID,
        m_axi_input1_RREADY => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_RREADY,
        m_axi_input1_RDATA => m_axi_input1_RDATA,
        m_axi_input1_RLAST => m_axi_input1_RLAST,
        m_axi_input1_RID => m_axi_input1_RID,
        m_axi_input1_RUSER => m_axi_input1_RUSER,
        m_axi_input1_RRESP => m_axi_input1_RRESP,
        m_axi_input1_BVALID => ap_const_logic_0,
        m_axi_input1_BREADY => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_BREADY,
        m_axi_input1_BRESP => ap_const_lv2_0,
        m_axi_input1_BID => ap_const_lv1_0,
        m_axi_input1_BUSER => ap_const_lv1_0,
        input1_offset => input1_offset,
        m_axi_input2_AWVALID => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_AWVALID,
        m_axi_input2_AWREADY => ap_const_logic_0,
        m_axi_input2_AWADDR => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_AWADDR,
        m_axi_input2_AWID => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_AWID,
        m_axi_input2_AWLEN => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_AWLEN,
        m_axi_input2_AWSIZE => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_AWSIZE,
        m_axi_input2_AWBURST => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_AWBURST,
        m_axi_input2_AWLOCK => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_AWLOCK,
        m_axi_input2_AWCACHE => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_AWCACHE,
        m_axi_input2_AWPROT => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_AWPROT,
        m_axi_input2_AWQOS => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_AWQOS,
        m_axi_input2_AWREGION => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_AWREGION,
        m_axi_input2_AWUSER => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_AWUSER,
        m_axi_input2_WVALID => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_WVALID,
        m_axi_input2_WREADY => ap_const_logic_0,
        m_axi_input2_WDATA => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_WDATA,
        m_axi_input2_WSTRB => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_WSTRB,
        m_axi_input2_WLAST => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_WLAST,
        m_axi_input2_WID => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_WID,
        m_axi_input2_WUSER => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_WUSER,
        m_axi_input2_ARVALID => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_ARVALID,
        m_axi_input2_ARREADY => m_axi_input2_ARREADY,
        m_axi_input2_ARADDR => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_ARADDR,
        m_axi_input2_ARID => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_ARID,
        m_axi_input2_ARLEN => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_ARLEN,
        m_axi_input2_ARSIZE => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_ARSIZE,
        m_axi_input2_ARBURST => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_ARBURST,
        m_axi_input2_ARLOCK => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_ARLOCK,
        m_axi_input2_ARCACHE => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_ARCACHE,
        m_axi_input2_ARPROT => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_ARPROT,
        m_axi_input2_ARQOS => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_ARQOS,
        m_axi_input2_ARREGION => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_ARREGION,
        m_axi_input2_ARUSER => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_ARUSER,
        m_axi_input2_RVALID => m_axi_input2_RVALID,
        m_axi_input2_RREADY => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_RREADY,
        m_axi_input2_RDATA => m_axi_input2_RDATA,
        m_axi_input2_RLAST => m_axi_input2_RLAST,
        m_axi_input2_RID => m_axi_input2_RID,
        m_axi_input2_RUSER => m_axi_input2_RUSER,
        m_axi_input2_RRESP => m_axi_input2_RRESP,
        m_axi_input2_BVALID => ap_const_logic_0,
        m_axi_input2_BREADY => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_BREADY,
        m_axi_input2_BRESP => ap_const_lv2_0,
        m_axi_input2_BID => ap_const_lv1_0,
        m_axi_input2_BUSER => ap_const_lv1_0,
        input2_offset => input2_offset,
        m_axi_input3_AWVALID => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_AWVALID,
        m_axi_input3_AWREADY => ap_const_logic_0,
        m_axi_input3_AWADDR => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_AWADDR,
        m_axi_input3_AWID => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_AWID,
        m_axi_input3_AWLEN => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_AWLEN,
        m_axi_input3_AWSIZE => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_AWSIZE,
        m_axi_input3_AWBURST => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_AWBURST,
        m_axi_input3_AWLOCK => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_AWLOCK,
        m_axi_input3_AWCACHE => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_AWCACHE,
        m_axi_input3_AWPROT => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_AWPROT,
        m_axi_input3_AWQOS => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_AWQOS,
        m_axi_input3_AWREGION => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_AWREGION,
        m_axi_input3_AWUSER => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_AWUSER,
        m_axi_input3_WVALID => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_WVALID,
        m_axi_input3_WREADY => ap_const_logic_0,
        m_axi_input3_WDATA => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_WDATA,
        m_axi_input3_WSTRB => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_WSTRB,
        m_axi_input3_WLAST => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_WLAST,
        m_axi_input3_WID => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_WID,
        m_axi_input3_WUSER => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_WUSER,
        m_axi_input3_ARVALID => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_ARVALID,
        m_axi_input3_ARREADY => m_axi_input3_ARREADY,
        m_axi_input3_ARADDR => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_ARADDR,
        m_axi_input3_ARID => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_ARID,
        m_axi_input3_ARLEN => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_ARLEN,
        m_axi_input3_ARSIZE => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_ARSIZE,
        m_axi_input3_ARBURST => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_ARBURST,
        m_axi_input3_ARLOCK => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_ARLOCK,
        m_axi_input3_ARCACHE => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_ARCACHE,
        m_axi_input3_ARPROT => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_ARPROT,
        m_axi_input3_ARQOS => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_ARQOS,
        m_axi_input3_ARREGION => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_ARREGION,
        m_axi_input3_ARUSER => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_ARUSER,
        m_axi_input3_RVALID => m_axi_input3_RVALID,
        m_axi_input3_RREADY => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_RREADY,
        m_axi_input3_RDATA => m_axi_input3_RDATA,
        m_axi_input3_RLAST => m_axi_input3_RLAST,
        m_axi_input3_RID => m_axi_input3_RID,
        m_axi_input3_RUSER => m_axi_input3_RUSER,
        m_axi_input3_RRESP => m_axi_input3_RRESP,
        m_axi_input3_BVALID => ap_const_logic_0,
        m_axi_input3_BREADY => grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_BREADY,
        m_axi_input3_BRESP => ap_const_lv2_0,
        m_axi_input3_BID => ap_const_lv1_0,
        m_axi_input3_BUSER => ap_const_lv1_0,
        input3_offset => input3_offset,
        input_memcpy_buffer_address0 => grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer_address0,
        input_memcpy_buffer_ce0 => grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer_ce0,
        input_memcpy_buffer_we0 => grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer_we0,
        input_memcpy_buffer_d0 => grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer_d0,
        input_memcpy_buffer1_address0 => grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer1_address0,
        input_memcpy_buffer1_ce0 => grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer1_ce0,
        input_memcpy_buffer1_we0 => grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer1_we0,
        input_memcpy_buffer1_d0 => grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer1_d0,
        input_memcpy_buffer2_address0 => grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer2_address0,
        input_memcpy_buffer2_ce0 => grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer2_ce0,
        input_memcpy_buffer2_we0 => grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer2_we0,
        input_memcpy_buffer2_d0 => grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer2_d0,
        input_memcpy_buffer3_address0 => grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer3_address0,
        input_memcpy_buffer3_ce0 => grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer3_ce0,
        input_memcpy_buffer3_we0 => grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer3_we0,
        input_memcpy_buffer3_d0 => grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer3_d0,
        RowBeginByte_0_V_read => grp_mmcpy_inputpixel_m2b_fu_348_RowBeginByte_0_V_read,
        RowBeginByte_1_V_read => grp_mmcpy_inputpixel_m2b_fu_348_RowBeginByte_1_V_read,
        RowBeginByte_2_V_read => grp_mmcpy_inputpixel_m2b_fu_348_RowBeginByte_2_V_read,
        RowBeginByte_3_V_read => grp_mmcpy_inputpixel_m2b_fu_348_RowBeginByte_3_V_read,
        TN_MIN_3b_V => TN_MIN_3b_V_reg_1184,
        next_t2_0_V_write => p_6_reg_311,
        IN_OFFSET => r_V_18_reg_1194,
        RowIncreaseLength_V => p_2_reg_1199,
        IHxIW_18b_V => IHxIW_18b_V_reg_1101,
        ColIncreaseLength_V => p_3_reg_1204,
        IsRowPixel => grp_mmcpy_inputpixel_m2b_fu_348_IsRowPixel,
        enable => grp_mmcpy_inputpixel_m2b_fu_348_enable,
        ap_return_0 => grp_mmcpy_inputpixel_m2b_fu_348_ap_return_0,
        ap_return_1 => grp_mmcpy_inputpixel_m2b_fu_348_ap_return_1,
        ap_return_2 => grp_mmcpy_inputpixel_m2b_fu_348_ap_return_2,
        ap_return_3 => grp_mmcpy_inputpixel_m2b_fu_348_ap_return_3,
        ap_return_4 => grp_mmcpy_inputpixel_m2b_fu_348_ap_return_4,
        ap_return_5 => grp_mmcpy_inputpixel_m2b_fu_348_ap_return_5);

    grp_copy_input2buf_row_fu_391 : component copy_input2buf_row
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_copy_input2buf_row_fu_391_ap_start,
        ap_done => grp_copy_input2buf_row_fu_391_ap_done,
        ap_idle => grp_copy_input2buf_row_fu_391_ap_idle,
        ap_ready => grp_copy_input2buf_row_fu_391_ap_ready,
        input_buffer_0_address0 => grp_copy_input2buf_row_fu_391_input_buffer_0_address0,
        input_buffer_0_ce0 => grp_copy_input2buf_row_fu_391_input_buffer_0_ce0,
        input_buffer_0_we0 => grp_copy_input2buf_row_fu_391_input_buffer_0_we0,
        input_buffer_0_d0 => grp_copy_input2buf_row_fu_391_input_buffer_0_d0,
        input_buffer_1_address0 => grp_copy_input2buf_row_fu_391_input_buffer_1_address0,
        input_buffer_1_ce0 => grp_copy_input2buf_row_fu_391_input_buffer_1_ce0,
        input_buffer_1_we0 => grp_copy_input2buf_row_fu_391_input_buffer_1_we0,
        input_buffer_1_d0 => grp_copy_input2buf_row_fu_391_input_buffer_1_d0,
        input_buffer_2_address0 => grp_copy_input2buf_row_fu_391_input_buffer_2_address0,
        input_buffer_2_ce0 => grp_copy_input2buf_row_fu_391_input_buffer_2_ce0,
        input_buffer_2_we0 => grp_copy_input2buf_row_fu_391_input_buffer_2_we0,
        input_buffer_2_d0 => grp_copy_input2buf_row_fu_391_input_buffer_2_d0,
        input_buffer_3_address0 => grp_copy_input2buf_row_fu_391_input_buffer_3_address0,
        input_buffer_3_ce0 => grp_copy_input2buf_row_fu_391_input_buffer_3_ce0,
        input_buffer_3_we0 => grp_copy_input2buf_row_fu_391_input_buffer_3_we0,
        input_buffer_3_d0 => grp_copy_input2buf_row_fu_391_input_buffer_3_d0,
        row_len_V => row_len_V_reg_1131,
        col_len_V => col_len_V_reg_1189,
        RowSub_V => RowSub_V_reg_1142,
        ColSub_V => ColSub_V_reg_1214,
        input_memcpy_buffer_address0 => grp_copy_input2buf_row_fu_391_input_memcpy_buffer_address0,
        input_memcpy_buffer_ce0 => grp_copy_input2buf_row_fu_391_input_memcpy_buffer_ce0,
        input_memcpy_buffer_q0 => grp_copy_input2buf_row_fu_391_input_memcpy_buffer_q0,
        input_memcpy_buffer1_address0 => grp_copy_input2buf_row_fu_391_input_memcpy_buffer1_address0,
        input_memcpy_buffer1_ce0 => grp_copy_input2buf_row_fu_391_input_memcpy_buffer1_ce0,
        input_memcpy_buffer1_q0 => grp_copy_input2buf_row_fu_391_input_memcpy_buffer1_q0,
        input_memcpy_buffer2_address0 => grp_copy_input2buf_row_fu_391_input_memcpy_buffer2_address0,
        input_memcpy_buffer2_ce0 => grp_copy_input2buf_row_fu_391_input_memcpy_buffer2_ce0,
        input_memcpy_buffer2_q0 => grp_copy_input2buf_row_fu_391_input_memcpy_buffer2_q0,
        input_memcpy_buffer3_address0 => grp_copy_input2buf_row_fu_391_input_memcpy_buffer3_address0,
        input_memcpy_buffer3_ce0 => grp_copy_input2buf_row_fu_391_input_memcpy_buffer3_ce0,
        input_memcpy_buffer3_q0 => grp_copy_input2buf_row_fu_391_input_memcpy_buffer3_q0,
        RowBeginByte_0_V_re => grp_copy_input2buf_row_fu_391_RowBeginByte_0_V_re,
        RowBeginByte_1_V_re => grp_copy_input2buf_row_fu_391_RowBeginByte_1_V_re,
        RowBeginByte_2_V_re => grp_copy_input2buf_row_fu_391_RowBeginByte_2_V_re,
        RowBeginByte_3_V_re => grp_copy_input2buf_row_fu_391_RowBeginByte_3_V_re,
        TCol => TCol,
        LayerType => LayerType,
        next_t2_0_V_read => grp_copy_input2buf_row_fu_391_next_t2_0_V_read,
        p_read15 => grp_copy_input2buf_row_fu_391_p_read15,
        enable => grp_copy_input2buf_row_fu_391_enable,
        T2Rate_V => p_4_reg_1209);

    YOLO2_FPGA_mac_mujbC_U76 : component YOLO2_FPGA_mac_mujbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 9,
        din2_WIDTH => 1,
        dout_WIDTH => 12)
    port map (
        din0 => grp_fu_956_p0,
        din1 => grp_fu_956_p1,
        din2 => grp_fu_956_p2,
        dout => grp_fu_956_p3);

    YOLO2_FPGA_mac_mujbC_U77 : component YOLO2_FPGA_mac_mujbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 9,
        din2_WIDTH => 1,
        dout_WIDTH => 12)
    port map (
        din0 => grp_fu_967_p0,
        din1 => grp_fu_967_p1,
        din2 => grp_fu_967_p2,
        dout => grp_fu_967_p3);

    YOLO2_FPGA_mul_mukbM_U78 : component YOLO2_FPGA_mul_mukbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 18,
        dout_WIDTH => 29)
    port map (
        din0 => r_V_15_fu_978_p0,
        din1 => r_V_15_fu_978_p1,
        dout => r_V_15_fu_978_p2);

    YOLO2_FPGA_mac_mulbW_U79 : component YOLO2_FPGA_mac_mulbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 10,
        din2_WIDTH => 29,
        dout_WIDTH => 30)
    port map (
        din0 => grp_fu_984_p0,
        din1 => grp_fu_984_p1,
        din2 => grp_fu_984_p2,
        dout => grp_fu_984_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_copy_input2buf_row_fu_391_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_copy_input2buf_row_fu_391_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_copy_input2buf_row_fu_391_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_copy_input2buf_row_fu_391_ap_ready = ap_const_logic_1)) then 
                    grp_copy_input2buf_row_fu_391_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mmcpy_inputpixel_m2b_fu_348_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_mmcpy_inputpixel_m2b_fu_348_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_mmcpy_inputpixel_m2b_fu_348_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mmcpy_inputpixel_m2b_fu_348_ap_ready = ap_const_logic_1)) then 
                    grp_mmcpy_inputpixel_m2b_fu_348_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    p_5_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state6_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                p_5_reg_300 <= TMP_t2_V_reg_1242;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                p_5_reg_300 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    p_6_reg_311_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state6_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                p_6_reg_311 <= t2_V_fu_943_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                p_6_reg_311 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    pingpong_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state6_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                pingpong_reg_323 <= ap_phi_mux_pingpong_1_phi_fu_339_p4;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                pingpong_reg_323 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                ColSub_V_reg_1214 <= ColSub_V_fu_795_p2;
                TN_MIN_3b_V_reg_1184 <= TN_MIN_3b_V_fu_682_p1;
                col_len_V_reg_1189 <= col_len_V_fu_716_p2;
                p_2_reg_1199 <= p_2_fu_759_p3;
                p_3_reg_1204 <= p_3_fu_767_p3;
                p_4_reg_1209 <= p_4_fu_783_p3;
                r_V_18_reg_1194 <= r_V_18_fu_736_p2;
                r_V_19_reg_1219 <= r_V_19_fu_804_p2;
                r_V_1_reg_1234 <= r_V_1_fu_823_p2;
                    tmp_51_reg_1229(2 downto 0) <= tmp_51_fu_813_p1(2 downto 0);
                    tmp_81_cast_reg_1224(0) <= tmp_81_cast_fu_810_p1(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                IHxIW_18b_V_reg_1101 <= IHxIW_18b_V_fu_546_p1;
                RowSub_V_reg_1142 <= RowSub_V_fu_670_p2;
                TCol_left_V_reg_1111 <= TCol_left_V_fu_559_p1;
                TRow_top_V_1_reg_1126 <= TRow_top_V_1_fu_595_p3;
                r_V_12_reg_1116 <= r_V_12_fu_571_p2;
                r_V_15_reg_1137 <= r_V_15_fu_978_p2;
                row_len_V_reg_1131 <= row_len_V_fu_652_p2;
                tmp_46_reg_1121 <= tmp_46_fu_584_p2;
                tmp_88_reg_1149 <= tmp_88_fu_675_p1;
                tmp_reg_1106 <= tmp_fu_554_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_52_fu_833_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                IsRowPixel_reg_1247 <= IsRowPixel_fu_864_p2;
                tmp_54_reg_1252 <= tmp_54_fu_870_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((pingpong_reg_323 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                RowBeginByte2_0_V_1_fu_182 <= grp_mmcpy_inputpixel_m2b_fu_348_ap_return_2;
                RowBeginByte2_1_V_1_fu_186 <= grp_mmcpy_inputpixel_m2b_fu_348_ap_return_3;
                RowBeginByte2_2_V_1_fu_190 <= grp_mmcpy_inputpixel_m2b_fu_348_ap_return_4;
                RowBeginByte2_3_V_1_fu_194 <= grp_mmcpy_inputpixel_m2b_fu_348_ap_return_5;
                next_IsRowPixel2_0_1_fu_162 <= grp_mmcpy_inputpixel_m2b_fu_348_ap_return_1;
                next_t22_0_V_1_fu_158 <= grp_mmcpy_inputpixel_m2b_fu_348_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state6_on_subcall_done) and (pingpong_reg_323 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                RowBeginByte_0_V_1_fu_166 <= grp_mmcpy_inputpixel_m2b_fu_348_ap_return_2;
                RowBeginByte_1_V_1_fu_170 <= grp_mmcpy_inputpixel_m2b_fu_348_ap_return_3;
                RowBeginByte_2_V_1_fu_174 <= grp_mmcpy_inputpixel_m2b_fu_348_ap_return_4;
                RowBeginByte_3_V_1_fu_178 <= grp_mmcpy_inputpixel_m2b_fu_348_ap_return_5;
                next_IsRowPixel_0_1_fu_154 <= grp_mmcpy_inputpixel_m2b_fu_348_ap_return_1;
                next_t2_0_V_1_fu_150 <= grp_mmcpy_inputpixel_m2b_fu_348_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                TMP_t2_V_reg_1242 <= TMP_t2_V_fu_838_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                TRow_top_V_reg_1081 <= TRow_top_V_fu_525_p1;
                r_V_21_reg_1075 <= grp_fu_956_p3;
                    rhs_V_2_reg_1070(0) <= rhs_V_2_fu_517_p1(0);
                    rhs_V_reg_1065(1 downto 0) <= rhs_V_fu_513_p1(1 downto 0);
                tmp_81_reg_1086 <= tmp_81_fu_528_p1;
                tmp_86_reg_1091 <= tmp_86_fu_531_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_pingpong_phi_fu_327_p4 = ap_const_lv1_1) and (tmp_52_fu_833_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_56_reg_1262 <= grp_fu_431_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_pingpong_phi_fu_327_p4 = ap_const_lv1_0) and (tmp_52_fu_833_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_58_reg_1257 <= grp_fu_431_p2;
            end if;
        end if;
    end process;
    rhs_V_reg_1065(10 downto 2) <= "000000000";
    rhs_V_2_reg_1070(11 downto 1) <= "00000000000";
    tmp_81_cast_reg_1224(5 downto 1) <= "00000";
    tmp_51_reg_1229(5 downto 3) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, tmp_52_fu_833_p2, ap_phi_mux_pingpong_phi_fu_327_p4, ap_CS_fsm_state6, ap_block_state6_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((tmp_52_fu_833_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_phi_mux_pingpong_phi_fu_327_p4 = ap_const_lv1_1) and (tmp_52_fu_833_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_boolean_0 = ap_block_state6_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ColSub_V_fu_795_p2 <= (tmp_88_reg_1149 xor tmp_87_fu_791_p1);
    IHxIW_18b_V_fu_546_p1 <= IHxIW(18 - 1 downto 0);
    Input_h_10b_V_fu_542_p1 <= Input_h(10 - 1 downto 0);
    Input_w_9b_V_fu_678_p1 <= Input_w(9 - 1 downto 0);
    IsRowPixel_fu_864_p2 <= (tmp_53_fu_848_p2 and rev_fu_858_p2);
    Kernel_stride_2b_V_fu_505_p1 <= Kernel_stride(2 - 1 downto 0);
    Padding_1b_V_fu_509_p1 <= Padding(1 - 1 downto 0);
    RowSub_V_fu_670_p2 <= (tmp_86_reg_1091 xor tmp_85_fu_666_p1);
    TCol_left_V_1_fu_686_p3 <= 
        TCol_left_V_reg_1111 when (tmp_reg_1106(0) = '1') else 
        ap_const_lv10_0;
    TCol_left_V_fu_559_p1 <= grp_fu_967_p3(10 - 1 downto 0);
    TMP_t2_V_fu_838_p2 <= std_logic_vector(unsigned(p_5_reg_300) + unsigned(ap_const_lv6_1));
    TN_MIN_3b_V_fu_682_p1 <= TN_MIN(3 - 1 downto 0);
    TRow_top_V_1_fu_595_p3 <= 
        TRow_top_V_reg_1081 when (tmp_48_fu_590_p2(0) = '1') else 
        ap_const_lv10_0;
    TRow_top_V_fu_525_p1 <= grp_fu_956_p3(10 - 1 downto 0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_block_state6_on_subcall_done_assign_proc : process(grp_mmcpy_inputpixel_m2b_fu_348_ap_done, pingpong_reg_323, grp_copy_input2buf_row_fu_391_ap_done)
    begin
                ap_block_state6_on_subcall_done <= (((pingpong_reg_323 = ap_const_lv1_1) and (grp_copy_input2buf_row_fu_391_ap_done = ap_const_logic_0)) or ((pingpong_reg_323 = ap_const_lv1_0) and (grp_copy_input2buf_row_fu_391_ap_done = ap_const_logic_0)) or ((pingpong_reg_323 = ap_const_lv1_1) and (grp_mmcpy_inputpixel_m2b_fu_348_ap_done = ap_const_logic_0)) or ((pingpong_reg_323 = ap_const_lv1_0) and (grp_mmcpy_inputpixel_m2b_fu_348_ap_done = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, tmp_52_fu_833_p2)
    begin
        if ((((tmp_52_fu_833_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_pingpong_1_phi_fu_339_p4_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((pingpong_reg_323 = ap_const_lv1_0)) then 
                ap_phi_mux_pingpong_1_phi_fu_339_p4 <= ap_const_lv1_1;
            elsif ((pingpong_reg_323 = ap_const_lv1_1)) then 
                ap_phi_mux_pingpong_1_phi_fu_339_p4 <= ap_const_lv1_0;
            else 
                ap_phi_mux_pingpong_1_phi_fu_339_p4 <= "X";
            end if;
        else 
            ap_phi_mux_pingpong_1_phi_fu_339_p4 <= "X";
        end if; 
    end process;

    ap_phi_mux_pingpong_phi_fu_327_p4 <= pingpong_reg_323;

    ap_ready_assign_proc : process(ap_CS_fsm_state4, tmp_52_fu_833_p2)
    begin
        if (((tmp_52_fu_833_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_9b_V_fu_534_p1 <= c(9 - 1 downto 0);
    col_len_V_fu_716_p2 <= std_logic_vector(unsigned(tmp_18_fu_705_p3) - unsigned(tmp_79_fu_712_p1));

    grp_copy_input2buf_row_fu_391_RowBeginByte_0_V_re_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, RowBeginByte_0_V_1_fu_166, RowBeginByte2_0_V_1_fu_182)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((pingpong_reg_323 = ap_const_lv1_1)) then 
                grp_copy_input2buf_row_fu_391_RowBeginByte_0_V_re <= RowBeginByte2_0_V_1_fu_182;
            elsif ((pingpong_reg_323 = ap_const_lv1_0)) then 
                grp_copy_input2buf_row_fu_391_RowBeginByte_0_V_re <= RowBeginByte_0_V_1_fu_166;
            else 
                grp_copy_input2buf_row_fu_391_RowBeginByte_0_V_re <= "X";
            end if;
        else 
            grp_copy_input2buf_row_fu_391_RowBeginByte_0_V_re <= "X";
        end if; 
    end process;


    grp_copy_input2buf_row_fu_391_RowBeginByte_1_V_re_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, RowBeginByte_1_V_1_fu_170, RowBeginByte2_1_V_1_fu_186)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((pingpong_reg_323 = ap_const_lv1_1)) then 
                grp_copy_input2buf_row_fu_391_RowBeginByte_1_V_re <= RowBeginByte2_1_V_1_fu_186;
            elsif ((pingpong_reg_323 = ap_const_lv1_0)) then 
                grp_copy_input2buf_row_fu_391_RowBeginByte_1_V_re <= RowBeginByte_1_V_1_fu_170;
            else 
                grp_copy_input2buf_row_fu_391_RowBeginByte_1_V_re <= "X";
            end if;
        else 
            grp_copy_input2buf_row_fu_391_RowBeginByte_1_V_re <= "X";
        end if; 
    end process;


    grp_copy_input2buf_row_fu_391_RowBeginByte_2_V_re_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, RowBeginByte_2_V_1_fu_174, RowBeginByte2_2_V_1_fu_190)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((pingpong_reg_323 = ap_const_lv1_1)) then 
                grp_copy_input2buf_row_fu_391_RowBeginByte_2_V_re <= RowBeginByte2_2_V_1_fu_190;
            elsif ((pingpong_reg_323 = ap_const_lv1_0)) then 
                grp_copy_input2buf_row_fu_391_RowBeginByte_2_V_re <= RowBeginByte_2_V_1_fu_174;
            else 
                grp_copy_input2buf_row_fu_391_RowBeginByte_2_V_re <= "X";
            end if;
        else 
            grp_copy_input2buf_row_fu_391_RowBeginByte_2_V_re <= "X";
        end if; 
    end process;


    grp_copy_input2buf_row_fu_391_RowBeginByte_3_V_re_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, RowBeginByte_3_V_1_fu_178, RowBeginByte2_3_V_1_fu_194)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((pingpong_reg_323 = ap_const_lv1_1)) then 
                grp_copy_input2buf_row_fu_391_RowBeginByte_3_V_re <= RowBeginByte2_3_V_1_fu_194;
            elsif ((pingpong_reg_323 = ap_const_lv1_0)) then 
                grp_copy_input2buf_row_fu_391_RowBeginByte_3_V_re <= RowBeginByte_3_V_1_fu_178;
            else 
                grp_copy_input2buf_row_fu_391_RowBeginByte_3_V_re <= "X";
            end if;
        else 
            grp_copy_input2buf_row_fu_391_RowBeginByte_3_V_re <= "X";
        end if; 
    end process;

    grp_copy_input2buf_row_fu_391_ap_start <= grp_copy_input2buf_row_fu_391_ap_start_reg;

    grp_copy_input2buf_row_fu_391_enable_assign_proc : process(tmp_58_reg_1257, tmp_56_reg_1262, ap_CS_fsm_state6, pingpong_reg_323)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((pingpong_reg_323 = ap_const_lv1_1)) then 
                grp_copy_input2buf_row_fu_391_enable <= tmp_56_reg_1262(0);
            elsif ((pingpong_reg_323 = ap_const_lv1_0)) then 
                grp_copy_input2buf_row_fu_391_enable <= tmp_58_reg_1257(0);
            else 
                grp_copy_input2buf_row_fu_391_enable <= 'X';
            end if;
        else 
            grp_copy_input2buf_row_fu_391_enable <= 'X';
        end if; 
    end process;


    grp_copy_input2buf_row_fu_391_input_memcpy_buffer1_q0_assign_proc : process(input_memcpy_buffer1_q0, input_memcpy_buffer1_1_q0, ap_CS_fsm_state6, pingpong_reg_323)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((pingpong_reg_323 = ap_const_lv1_1)) then 
                grp_copy_input2buf_row_fu_391_input_memcpy_buffer1_q0 <= input_memcpy_buffer1_1_q0;
            elsif ((pingpong_reg_323 = ap_const_lv1_0)) then 
                grp_copy_input2buf_row_fu_391_input_memcpy_buffer1_q0 <= input_memcpy_buffer1_q0;
            else 
                grp_copy_input2buf_row_fu_391_input_memcpy_buffer1_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_copy_input2buf_row_fu_391_input_memcpy_buffer1_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_copy_input2buf_row_fu_391_input_memcpy_buffer2_q0_assign_proc : process(input_memcpy_buffer2_q0, input_memcpy_buffer2_1_q0, ap_CS_fsm_state6, pingpong_reg_323)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((pingpong_reg_323 = ap_const_lv1_1)) then 
                grp_copy_input2buf_row_fu_391_input_memcpy_buffer2_q0 <= input_memcpy_buffer2_1_q0;
            elsif ((pingpong_reg_323 = ap_const_lv1_0)) then 
                grp_copy_input2buf_row_fu_391_input_memcpy_buffer2_q0 <= input_memcpy_buffer2_q0;
            else 
                grp_copy_input2buf_row_fu_391_input_memcpy_buffer2_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_copy_input2buf_row_fu_391_input_memcpy_buffer2_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_copy_input2buf_row_fu_391_input_memcpy_buffer3_q0_assign_proc : process(input_memcpy_buffer3_q0, input_memcpy_buffer3_1_q0, ap_CS_fsm_state6, pingpong_reg_323)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((pingpong_reg_323 = ap_const_lv1_1)) then 
                grp_copy_input2buf_row_fu_391_input_memcpy_buffer3_q0 <= input_memcpy_buffer3_1_q0;
            elsif ((pingpong_reg_323 = ap_const_lv1_0)) then 
                grp_copy_input2buf_row_fu_391_input_memcpy_buffer3_q0 <= input_memcpy_buffer3_q0;
            else 
                grp_copy_input2buf_row_fu_391_input_memcpy_buffer3_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_copy_input2buf_row_fu_391_input_memcpy_buffer3_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_copy_input2buf_row_fu_391_input_memcpy_buffer_q0_assign_proc : process(input_memcpy_buffer0_q0, input_memcpy_buffer0_1_q0, ap_CS_fsm_state6, pingpong_reg_323)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((pingpong_reg_323 = ap_const_lv1_1)) then 
                grp_copy_input2buf_row_fu_391_input_memcpy_buffer_q0 <= input_memcpy_buffer0_1_q0;
            elsif ((pingpong_reg_323 = ap_const_lv1_0)) then 
                grp_copy_input2buf_row_fu_391_input_memcpy_buffer_q0 <= input_memcpy_buffer0_q0;
            else 
                grp_copy_input2buf_row_fu_391_input_memcpy_buffer_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_copy_input2buf_row_fu_391_input_memcpy_buffer_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_copy_input2buf_row_fu_391_next_t2_0_V_read_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, next_t2_0_V_1_fu_150, next_t22_0_V_1_fu_158)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((pingpong_reg_323 = ap_const_lv1_1)) then 
                grp_copy_input2buf_row_fu_391_next_t2_0_V_read <= next_t22_0_V_1_fu_158;
            elsif ((pingpong_reg_323 = ap_const_lv1_0)) then 
                grp_copy_input2buf_row_fu_391_next_t2_0_V_read <= next_t2_0_V_1_fu_150;
            else 
                grp_copy_input2buf_row_fu_391_next_t2_0_V_read <= "XXXXXX";
            end if;
        else 
            grp_copy_input2buf_row_fu_391_next_t2_0_V_read <= "XXXXXX";
        end if; 
    end process;


    grp_copy_input2buf_row_fu_391_p_read15_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, next_IsRowPixel_0_1_fu_154, next_IsRowPixel2_0_1_fu_162)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((pingpong_reg_323 = ap_const_lv1_1)) then 
                grp_copy_input2buf_row_fu_391_p_read15 <= next_IsRowPixel2_0_1_fu_162(0);
            elsif ((pingpong_reg_323 = ap_const_lv1_0)) then 
                grp_copy_input2buf_row_fu_391_p_read15 <= next_IsRowPixel_0_1_fu_154(0);
            else 
                grp_copy_input2buf_row_fu_391_p_read15 <= 'X';
            end if;
        else 
            grp_copy_input2buf_row_fu_391_p_read15 <= 'X';
        end if; 
    end process;

    grp_fu_431_p2 <= "0" when (p_5_reg_300 = ap_const_lv6_0) else "1";
    grp_fu_956_p0 <= grp_fu_956_p00(2 - 1 downto 0);
    grp_fu_956_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Kernel_stride_2b_V_fu_505_p1),11));
    grp_fu_956_p1 <= grp_fu_956_p10(9 - 1 downto 0);
    grp_fu_956_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_9b_V_fu_501_p1),11));
    grp_fu_956_p2 <= grp_fu_956_p20(1 - 1 downto 0);
    grp_fu_956_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Padding_1b_V_fu_509_p1),12));
    grp_fu_967_p0 <= rhs_V_reg_1065(2 - 1 downto 0);
    grp_fu_967_p1 <= grp_fu_967_p10(9 - 1 downto 0);
    grp_fu_967_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_9b_V_fu_534_p1),11));
    grp_fu_967_p2 <= rhs_V_2_reg_1070(1 - 1 downto 0);
    grp_fu_984_p0 <= grp_fu_984_p00(9 - 1 downto 0);
    grp_fu_984_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Input_w_9b_V_fu_678_p1),19));
    grp_fu_984_p1 <= grp_fu_984_p10(10 - 1 downto 0);
    grp_fu_984_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(TRow_top_V_1_reg_1126),19));
    grp_fu_984_p2 <= grp_fu_984_p20(29 - 1 downto 0);
    grp_fu_984_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_15_reg_1137),30));
    grp_mmcpy_inputpixel_m2b_fu_348_IsRowPixel <= IsRowPixel_reg_1247(0);

    grp_mmcpy_inputpixel_m2b_fu_348_RowBeginByte_0_V_read_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, RowBeginByte_0_V_1_fu_166, RowBeginByte2_0_V_1_fu_182)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((pingpong_reg_323 = ap_const_lv1_1)) then 
                grp_mmcpy_inputpixel_m2b_fu_348_RowBeginByte_0_V_read <= RowBeginByte_0_V_1_fu_166;
            elsif ((pingpong_reg_323 = ap_const_lv1_0)) then 
                grp_mmcpy_inputpixel_m2b_fu_348_RowBeginByte_0_V_read <= RowBeginByte2_0_V_1_fu_182;
            else 
                grp_mmcpy_inputpixel_m2b_fu_348_RowBeginByte_0_V_read <= "X";
            end if;
        else 
            grp_mmcpy_inputpixel_m2b_fu_348_RowBeginByte_0_V_read <= "X";
        end if; 
    end process;


    grp_mmcpy_inputpixel_m2b_fu_348_RowBeginByte_1_V_read_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, RowBeginByte_1_V_1_fu_170, RowBeginByte2_1_V_1_fu_186)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((pingpong_reg_323 = ap_const_lv1_1)) then 
                grp_mmcpy_inputpixel_m2b_fu_348_RowBeginByte_1_V_read <= RowBeginByte_1_V_1_fu_170;
            elsif ((pingpong_reg_323 = ap_const_lv1_0)) then 
                grp_mmcpy_inputpixel_m2b_fu_348_RowBeginByte_1_V_read <= RowBeginByte2_1_V_1_fu_186;
            else 
                grp_mmcpy_inputpixel_m2b_fu_348_RowBeginByte_1_V_read <= "X";
            end if;
        else 
            grp_mmcpy_inputpixel_m2b_fu_348_RowBeginByte_1_V_read <= "X";
        end if; 
    end process;


    grp_mmcpy_inputpixel_m2b_fu_348_RowBeginByte_2_V_read_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, RowBeginByte_2_V_1_fu_174, RowBeginByte2_2_V_1_fu_190)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((pingpong_reg_323 = ap_const_lv1_1)) then 
                grp_mmcpy_inputpixel_m2b_fu_348_RowBeginByte_2_V_read <= RowBeginByte_2_V_1_fu_174;
            elsif ((pingpong_reg_323 = ap_const_lv1_0)) then 
                grp_mmcpy_inputpixel_m2b_fu_348_RowBeginByte_2_V_read <= RowBeginByte2_2_V_1_fu_190;
            else 
                grp_mmcpy_inputpixel_m2b_fu_348_RowBeginByte_2_V_read <= "X";
            end if;
        else 
            grp_mmcpy_inputpixel_m2b_fu_348_RowBeginByte_2_V_read <= "X";
        end if; 
    end process;


    grp_mmcpy_inputpixel_m2b_fu_348_RowBeginByte_3_V_read_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, RowBeginByte_3_V_1_fu_178, RowBeginByte2_3_V_1_fu_194)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((pingpong_reg_323 = ap_const_lv1_1)) then 
                grp_mmcpy_inputpixel_m2b_fu_348_RowBeginByte_3_V_read <= RowBeginByte_3_V_1_fu_178;
            elsif ((pingpong_reg_323 = ap_const_lv1_0)) then 
                grp_mmcpy_inputpixel_m2b_fu_348_RowBeginByte_3_V_read <= RowBeginByte2_3_V_1_fu_194;
            else 
                grp_mmcpy_inputpixel_m2b_fu_348_RowBeginByte_3_V_read <= "X";
            end if;
        else 
            grp_mmcpy_inputpixel_m2b_fu_348_RowBeginByte_3_V_read <= "X";
        end if; 
    end process;

    grp_mmcpy_inputpixel_m2b_fu_348_ap_start <= grp_mmcpy_inputpixel_m2b_fu_348_ap_start_reg;
    grp_mmcpy_inputpixel_m2b_fu_348_enable <= tmp_54_reg_1252(0);
    input_buffer_0_address0 <= grp_copy_input2buf_row_fu_391_input_buffer_0_address0;

    input_buffer_0_ce0_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, grp_copy_input2buf_row_fu_391_input_buffer_0_ce0)
    begin
        if ((((pingpong_reg_323 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((pingpong_reg_323 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            input_buffer_0_ce0 <= grp_copy_input2buf_row_fu_391_input_buffer_0_ce0;
        else 
            input_buffer_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_buffer_0_d0 <= grp_copy_input2buf_row_fu_391_input_buffer_0_d0;

    input_buffer_0_we0_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, grp_copy_input2buf_row_fu_391_input_buffer_0_we0)
    begin
        if ((((pingpong_reg_323 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((pingpong_reg_323 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            input_buffer_0_we0 <= grp_copy_input2buf_row_fu_391_input_buffer_0_we0;
        else 
            input_buffer_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_buffer_1_address0 <= grp_copy_input2buf_row_fu_391_input_buffer_1_address0;

    input_buffer_1_ce0_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, grp_copy_input2buf_row_fu_391_input_buffer_1_ce0)
    begin
        if ((((pingpong_reg_323 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((pingpong_reg_323 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            input_buffer_1_ce0 <= grp_copy_input2buf_row_fu_391_input_buffer_1_ce0;
        else 
            input_buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_buffer_1_d0 <= grp_copy_input2buf_row_fu_391_input_buffer_1_d0;

    input_buffer_1_we0_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, grp_copy_input2buf_row_fu_391_input_buffer_1_we0)
    begin
        if ((((pingpong_reg_323 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((pingpong_reg_323 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            input_buffer_1_we0 <= grp_copy_input2buf_row_fu_391_input_buffer_1_we0;
        else 
            input_buffer_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_buffer_2_address0 <= grp_copy_input2buf_row_fu_391_input_buffer_2_address0;

    input_buffer_2_ce0_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, grp_copy_input2buf_row_fu_391_input_buffer_2_ce0)
    begin
        if ((((pingpong_reg_323 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((pingpong_reg_323 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            input_buffer_2_ce0 <= grp_copy_input2buf_row_fu_391_input_buffer_2_ce0;
        else 
            input_buffer_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_buffer_2_d0 <= grp_copy_input2buf_row_fu_391_input_buffer_2_d0;

    input_buffer_2_we0_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, grp_copy_input2buf_row_fu_391_input_buffer_2_we0)
    begin
        if ((((pingpong_reg_323 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((pingpong_reg_323 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            input_buffer_2_we0 <= grp_copy_input2buf_row_fu_391_input_buffer_2_we0;
        else 
            input_buffer_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_buffer_3_address0 <= grp_copy_input2buf_row_fu_391_input_buffer_3_address0;

    input_buffer_3_ce0_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, grp_copy_input2buf_row_fu_391_input_buffer_3_ce0)
    begin
        if ((((pingpong_reg_323 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((pingpong_reg_323 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            input_buffer_3_ce0 <= grp_copy_input2buf_row_fu_391_input_buffer_3_ce0;
        else 
            input_buffer_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_buffer_3_d0 <= grp_copy_input2buf_row_fu_391_input_buffer_3_d0;

    input_buffer_3_we0_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, grp_copy_input2buf_row_fu_391_input_buffer_3_we0)
    begin
        if ((((pingpong_reg_323 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((pingpong_reg_323 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            input_buffer_3_we0 <= grp_copy_input2buf_row_fu_391_input_buffer_3_we0;
        else 
            input_buffer_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    input_memcpy_buffer0_1_address0_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer_address0, grp_copy_input2buf_row_fu_391_input_memcpy_buffer_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((pingpong_reg_323 = ap_const_lv1_1)) then 
                input_memcpy_buffer0_1_address0 <= grp_copy_input2buf_row_fu_391_input_memcpy_buffer_address0;
            elsif ((pingpong_reg_323 = ap_const_lv1_0)) then 
                input_memcpy_buffer0_1_address0 <= grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer_address0;
            else 
                input_memcpy_buffer0_1_address0 <= "XXXXX";
            end if;
        else 
            input_memcpy_buffer0_1_address0 <= "XXXXX";
        end if; 
    end process;


    input_memcpy_buffer0_1_ce0_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer_ce0, grp_copy_input2buf_row_fu_391_input_memcpy_buffer_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((pingpong_reg_323 = ap_const_lv1_1)) then 
                input_memcpy_buffer0_1_ce0 <= grp_copy_input2buf_row_fu_391_input_memcpy_buffer_ce0;
            elsif ((pingpong_reg_323 = ap_const_lv1_0)) then 
                input_memcpy_buffer0_1_ce0 <= grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer_ce0;
            else 
                input_memcpy_buffer0_1_ce0 <= ap_const_logic_0;
            end if;
        else 
            input_memcpy_buffer0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_memcpy_buffer0_1_we0_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer_we0)
    begin
        if (((pingpong_reg_323 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            input_memcpy_buffer0_1_we0 <= grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer_we0;
        else 
            input_memcpy_buffer0_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    input_memcpy_buffer0_address0_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer_address0, grp_copy_input2buf_row_fu_391_input_memcpy_buffer_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((pingpong_reg_323 = ap_const_lv1_0)) then 
                input_memcpy_buffer0_address0 <= grp_copy_input2buf_row_fu_391_input_memcpy_buffer_address0;
            elsif ((pingpong_reg_323 = ap_const_lv1_1)) then 
                input_memcpy_buffer0_address0 <= grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer_address0;
            else 
                input_memcpy_buffer0_address0 <= "XXXXX";
            end if;
        else 
            input_memcpy_buffer0_address0 <= "XXXXX";
        end if; 
    end process;


    input_memcpy_buffer0_ce0_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer_ce0, grp_copy_input2buf_row_fu_391_input_memcpy_buffer_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((pingpong_reg_323 = ap_const_lv1_0)) then 
                input_memcpy_buffer0_ce0 <= grp_copy_input2buf_row_fu_391_input_memcpy_buffer_ce0;
            elsif ((pingpong_reg_323 = ap_const_lv1_1)) then 
                input_memcpy_buffer0_ce0 <= grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer_ce0;
            else 
                input_memcpy_buffer0_ce0 <= ap_const_logic_0;
            end if;
        else 
            input_memcpy_buffer0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_memcpy_buffer0_we0_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer_we0)
    begin
        if (((pingpong_reg_323 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            input_memcpy_buffer0_we0 <= grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer_we0;
        else 
            input_memcpy_buffer0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    input_memcpy_buffer1_1_address0_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer1_address0, grp_copy_input2buf_row_fu_391_input_memcpy_buffer1_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((pingpong_reg_323 = ap_const_lv1_1)) then 
                input_memcpy_buffer1_1_address0 <= grp_copy_input2buf_row_fu_391_input_memcpy_buffer1_address0;
            elsif ((pingpong_reg_323 = ap_const_lv1_0)) then 
                input_memcpy_buffer1_1_address0 <= grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer1_address0;
            else 
                input_memcpy_buffer1_1_address0 <= "XXXXX";
            end if;
        else 
            input_memcpy_buffer1_1_address0 <= "XXXXX";
        end if; 
    end process;


    input_memcpy_buffer1_1_ce0_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer1_ce0, grp_copy_input2buf_row_fu_391_input_memcpy_buffer1_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((pingpong_reg_323 = ap_const_lv1_1)) then 
                input_memcpy_buffer1_1_ce0 <= grp_copy_input2buf_row_fu_391_input_memcpy_buffer1_ce0;
            elsif ((pingpong_reg_323 = ap_const_lv1_0)) then 
                input_memcpy_buffer1_1_ce0 <= grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer1_ce0;
            else 
                input_memcpy_buffer1_1_ce0 <= ap_const_logic_0;
            end if;
        else 
            input_memcpy_buffer1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_memcpy_buffer1_1_we0_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer1_we0)
    begin
        if (((pingpong_reg_323 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            input_memcpy_buffer1_1_we0 <= grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer1_we0;
        else 
            input_memcpy_buffer1_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    input_memcpy_buffer1_address0_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer1_address0, grp_copy_input2buf_row_fu_391_input_memcpy_buffer1_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((pingpong_reg_323 = ap_const_lv1_0)) then 
                input_memcpy_buffer1_address0 <= grp_copy_input2buf_row_fu_391_input_memcpy_buffer1_address0;
            elsif ((pingpong_reg_323 = ap_const_lv1_1)) then 
                input_memcpy_buffer1_address0 <= grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer1_address0;
            else 
                input_memcpy_buffer1_address0 <= "XXXXX";
            end if;
        else 
            input_memcpy_buffer1_address0 <= "XXXXX";
        end if; 
    end process;


    input_memcpy_buffer1_ce0_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer1_ce0, grp_copy_input2buf_row_fu_391_input_memcpy_buffer1_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((pingpong_reg_323 = ap_const_lv1_0)) then 
                input_memcpy_buffer1_ce0 <= grp_copy_input2buf_row_fu_391_input_memcpy_buffer1_ce0;
            elsif ((pingpong_reg_323 = ap_const_lv1_1)) then 
                input_memcpy_buffer1_ce0 <= grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer1_ce0;
            else 
                input_memcpy_buffer1_ce0 <= ap_const_logic_0;
            end if;
        else 
            input_memcpy_buffer1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_memcpy_buffer1_we0_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer1_we0)
    begin
        if (((pingpong_reg_323 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            input_memcpy_buffer1_we0 <= grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer1_we0;
        else 
            input_memcpy_buffer1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    input_memcpy_buffer2_1_address0_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer2_address0, grp_copy_input2buf_row_fu_391_input_memcpy_buffer2_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((pingpong_reg_323 = ap_const_lv1_1)) then 
                input_memcpy_buffer2_1_address0 <= grp_copy_input2buf_row_fu_391_input_memcpy_buffer2_address0;
            elsif ((pingpong_reg_323 = ap_const_lv1_0)) then 
                input_memcpy_buffer2_1_address0 <= grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer2_address0;
            else 
                input_memcpy_buffer2_1_address0 <= "XXXXX";
            end if;
        else 
            input_memcpy_buffer2_1_address0 <= "XXXXX";
        end if; 
    end process;


    input_memcpy_buffer2_1_ce0_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer2_ce0, grp_copy_input2buf_row_fu_391_input_memcpy_buffer2_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((pingpong_reg_323 = ap_const_lv1_1)) then 
                input_memcpy_buffer2_1_ce0 <= grp_copy_input2buf_row_fu_391_input_memcpy_buffer2_ce0;
            elsif ((pingpong_reg_323 = ap_const_lv1_0)) then 
                input_memcpy_buffer2_1_ce0 <= grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer2_ce0;
            else 
                input_memcpy_buffer2_1_ce0 <= ap_const_logic_0;
            end if;
        else 
            input_memcpy_buffer2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_memcpy_buffer2_1_we0_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer2_we0)
    begin
        if (((pingpong_reg_323 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            input_memcpy_buffer2_1_we0 <= grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer2_we0;
        else 
            input_memcpy_buffer2_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    input_memcpy_buffer2_address0_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer2_address0, grp_copy_input2buf_row_fu_391_input_memcpy_buffer2_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((pingpong_reg_323 = ap_const_lv1_0)) then 
                input_memcpy_buffer2_address0 <= grp_copy_input2buf_row_fu_391_input_memcpy_buffer2_address0;
            elsif ((pingpong_reg_323 = ap_const_lv1_1)) then 
                input_memcpy_buffer2_address0 <= grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer2_address0;
            else 
                input_memcpy_buffer2_address0 <= "XXXXX";
            end if;
        else 
            input_memcpy_buffer2_address0 <= "XXXXX";
        end if; 
    end process;


    input_memcpy_buffer2_ce0_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer2_ce0, grp_copy_input2buf_row_fu_391_input_memcpy_buffer2_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((pingpong_reg_323 = ap_const_lv1_0)) then 
                input_memcpy_buffer2_ce0 <= grp_copy_input2buf_row_fu_391_input_memcpy_buffer2_ce0;
            elsif ((pingpong_reg_323 = ap_const_lv1_1)) then 
                input_memcpy_buffer2_ce0 <= grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer2_ce0;
            else 
                input_memcpy_buffer2_ce0 <= ap_const_logic_0;
            end if;
        else 
            input_memcpy_buffer2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_memcpy_buffer2_we0_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer2_we0)
    begin
        if (((pingpong_reg_323 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            input_memcpy_buffer2_we0 <= grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer2_we0;
        else 
            input_memcpy_buffer2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    input_memcpy_buffer3_1_address0_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer3_address0, grp_copy_input2buf_row_fu_391_input_memcpy_buffer3_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((pingpong_reg_323 = ap_const_lv1_1)) then 
                input_memcpy_buffer3_1_address0 <= grp_copy_input2buf_row_fu_391_input_memcpy_buffer3_address0;
            elsif ((pingpong_reg_323 = ap_const_lv1_0)) then 
                input_memcpy_buffer3_1_address0 <= grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer3_address0;
            else 
                input_memcpy_buffer3_1_address0 <= "XXXXX";
            end if;
        else 
            input_memcpy_buffer3_1_address0 <= "XXXXX";
        end if; 
    end process;


    input_memcpy_buffer3_1_ce0_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer3_ce0, grp_copy_input2buf_row_fu_391_input_memcpy_buffer3_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((pingpong_reg_323 = ap_const_lv1_1)) then 
                input_memcpy_buffer3_1_ce0 <= grp_copy_input2buf_row_fu_391_input_memcpy_buffer3_ce0;
            elsif ((pingpong_reg_323 = ap_const_lv1_0)) then 
                input_memcpy_buffer3_1_ce0 <= grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer3_ce0;
            else 
                input_memcpy_buffer3_1_ce0 <= ap_const_logic_0;
            end if;
        else 
            input_memcpy_buffer3_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_memcpy_buffer3_1_we0_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer3_we0)
    begin
        if (((pingpong_reg_323 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            input_memcpy_buffer3_1_we0 <= grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer3_we0;
        else 
            input_memcpy_buffer3_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    input_memcpy_buffer3_address0_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer3_address0, grp_copy_input2buf_row_fu_391_input_memcpy_buffer3_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((pingpong_reg_323 = ap_const_lv1_0)) then 
                input_memcpy_buffer3_address0 <= grp_copy_input2buf_row_fu_391_input_memcpy_buffer3_address0;
            elsif ((pingpong_reg_323 = ap_const_lv1_1)) then 
                input_memcpy_buffer3_address0 <= grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer3_address0;
            else 
                input_memcpy_buffer3_address0 <= "XXXXX";
            end if;
        else 
            input_memcpy_buffer3_address0 <= "XXXXX";
        end if; 
    end process;


    input_memcpy_buffer3_ce0_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer3_ce0, grp_copy_input2buf_row_fu_391_input_memcpy_buffer3_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((pingpong_reg_323 = ap_const_lv1_0)) then 
                input_memcpy_buffer3_ce0 <= grp_copy_input2buf_row_fu_391_input_memcpy_buffer3_ce0;
            elsif ((pingpong_reg_323 = ap_const_lv1_1)) then 
                input_memcpy_buffer3_ce0 <= grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer3_ce0;
            else 
                input_memcpy_buffer3_ce0 <= ap_const_logic_0;
            end if;
        else 
            input_memcpy_buffer3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_memcpy_buffer3_we0_assign_proc : process(ap_CS_fsm_state6, pingpong_reg_323, grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer3_we0)
    begin
        if (((pingpong_reg_323 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            input_memcpy_buffer3_we0 <= grp_mmcpy_inputpixel_m2b_fu_348_input_memcpy_buffer3_we0;
        else 
            input_memcpy_buffer3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    lhs_V_1_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_len_V_reg_1131),7));
    lhs_V_20_cast_fu_800_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trow_loops_V),7));
    m_axi_input1_ARADDR <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_ARADDR;
    m_axi_input1_ARBURST <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_ARBURST;
    m_axi_input1_ARCACHE <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_ARCACHE;
    m_axi_input1_ARID <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_ARID;
    m_axi_input1_ARLEN <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_ARLEN;
    m_axi_input1_ARLOCK <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_ARLOCK;
    m_axi_input1_ARPROT <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_ARPROT;
    m_axi_input1_ARQOS <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_ARQOS;
    m_axi_input1_ARREGION <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_ARREGION;
    m_axi_input1_ARSIZE <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_ARSIZE;
    m_axi_input1_ARUSER <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_ARUSER;

    m_axi_input1_ARVALID_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, pingpong_reg_323, ap_CS_fsm_state7, grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_ARVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((pingpong_reg_323 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((pingpong_reg_323 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            m_axi_input1_ARVALID <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_ARVALID;
        else 
            m_axi_input1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_input1_AWADDR <= ap_const_lv32_0;
    m_axi_input1_AWBURST <= ap_const_lv2_0;
    m_axi_input1_AWCACHE <= ap_const_lv4_0;
    m_axi_input1_AWID <= ap_const_lv1_0;
    m_axi_input1_AWLEN <= ap_const_lv32_0;
    m_axi_input1_AWLOCK <= ap_const_lv2_0;
    m_axi_input1_AWPROT <= ap_const_lv3_0;
    m_axi_input1_AWQOS <= ap_const_lv4_0;
    m_axi_input1_AWREGION <= ap_const_lv4_0;
    m_axi_input1_AWSIZE <= ap_const_lv3_0;
    m_axi_input1_AWUSER <= ap_const_lv1_0;
    m_axi_input1_AWVALID <= ap_const_logic_0;
    m_axi_input1_BREADY <= ap_const_logic_0;

    m_axi_input1_RREADY_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, pingpong_reg_323, ap_CS_fsm_state7, grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_RREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((pingpong_reg_323 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((pingpong_reg_323 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            m_axi_input1_RREADY <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input1_RREADY;
        else 
            m_axi_input1_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_input1_WDATA <= ap_const_lv32_0;
    m_axi_input1_WID <= ap_const_lv1_0;
    m_axi_input1_WLAST <= ap_const_logic_0;
    m_axi_input1_WSTRB <= ap_const_lv4_0;
    m_axi_input1_WUSER <= ap_const_lv1_0;
    m_axi_input1_WVALID <= ap_const_logic_0;
    m_axi_input2_ARADDR <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_ARADDR;
    m_axi_input2_ARBURST <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_ARBURST;
    m_axi_input2_ARCACHE <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_ARCACHE;
    m_axi_input2_ARID <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_ARID;
    m_axi_input2_ARLEN <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_ARLEN;
    m_axi_input2_ARLOCK <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_ARLOCK;
    m_axi_input2_ARPROT <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_ARPROT;
    m_axi_input2_ARQOS <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_ARQOS;
    m_axi_input2_ARREGION <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_ARREGION;
    m_axi_input2_ARSIZE <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_ARSIZE;
    m_axi_input2_ARUSER <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_ARUSER;

    m_axi_input2_ARVALID_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, pingpong_reg_323, ap_CS_fsm_state7, grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_ARVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((pingpong_reg_323 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((pingpong_reg_323 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            m_axi_input2_ARVALID <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_ARVALID;
        else 
            m_axi_input2_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_input2_AWADDR <= ap_const_lv32_0;
    m_axi_input2_AWBURST <= ap_const_lv2_0;
    m_axi_input2_AWCACHE <= ap_const_lv4_0;
    m_axi_input2_AWID <= ap_const_lv1_0;
    m_axi_input2_AWLEN <= ap_const_lv32_0;
    m_axi_input2_AWLOCK <= ap_const_lv2_0;
    m_axi_input2_AWPROT <= ap_const_lv3_0;
    m_axi_input2_AWQOS <= ap_const_lv4_0;
    m_axi_input2_AWREGION <= ap_const_lv4_0;
    m_axi_input2_AWSIZE <= ap_const_lv3_0;
    m_axi_input2_AWUSER <= ap_const_lv1_0;
    m_axi_input2_AWVALID <= ap_const_logic_0;
    m_axi_input2_BREADY <= ap_const_logic_0;

    m_axi_input2_RREADY_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, pingpong_reg_323, ap_CS_fsm_state7, grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_RREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((pingpong_reg_323 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((pingpong_reg_323 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            m_axi_input2_RREADY <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input2_RREADY;
        else 
            m_axi_input2_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_input2_WDATA <= ap_const_lv32_0;
    m_axi_input2_WID <= ap_const_lv1_0;
    m_axi_input2_WLAST <= ap_const_logic_0;
    m_axi_input2_WSTRB <= ap_const_lv4_0;
    m_axi_input2_WUSER <= ap_const_lv1_0;
    m_axi_input2_WVALID <= ap_const_logic_0;
    m_axi_input3_ARADDR <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_ARADDR;
    m_axi_input3_ARBURST <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_ARBURST;
    m_axi_input3_ARCACHE <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_ARCACHE;
    m_axi_input3_ARID <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_ARID;
    m_axi_input3_ARLEN <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_ARLEN;
    m_axi_input3_ARLOCK <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_ARLOCK;
    m_axi_input3_ARPROT <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_ARPROT;
    m_axi_input3_ARQOS <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_ARQOS;
    m_axi_input3_ARREGION <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_ARREGION;
    m_axi_input3_ARSIZE <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_ARSIZE;
    m_axi_input3_ARUSER <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_ARUSER;

    m_axi_input3_ARVALID_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, pingpong_reg_323, ap_CS_fsm_state7, grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_ARVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((pingpong_reg_323 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((pingpong_reg_323 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            m_axi_input3_ARVALID <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_ARVALID;
        else 
            m_axi_input3_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_input3_AWADDR <= ap_const_lv32_0;
    m_axi_input3_AWBURST <= ap_const_lv2_0;
    m_axi_input3_AWCACHE <= ap_const_lv4_0;
    m_axi_input3_AWID <= ap_const_lv1_0;
    m_axi_input3_AWLEN <= ap_const_lv32_0;
    m_axi_input3_AWLOCK <= ap_const_lv2_0;
    m_axi_input3_AWPROT <= ap_const_lv3_0;
    m_axi_input3_AWQOS <= ap_const_lv4_0;
    m_axi_input3_AWREGION <= ap_const_lv4_0;
    m_axi_input3_AWSIZE <= ap_const_lv3_0;
    m_axi_input3_AWUSER <= ap_const_lv1_0;
    m_axi_input3_AWVALID <= ap_const_logic_0;
    m_axi_input3_BREADY <= ap_const_logic_0;

    m_axi_input3_RREADY_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, pingpong_reg_323, ap_CS_fsm_state7, grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_RREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((pingpong_reg_323 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((pingpong_reg_323 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            m_axi_input3_RREADY <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input3_RREADY;
        else 
            m_axi_input3_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_input3_WDATA <= ap_const_lv32_0;
    m_axi_input3_WID <= ap_const_lv1_0;
    m_axi_input3_WLAST <= ap_const_logic_0;
    m_axi_input3_WSTRB <= ap_const_lv4_0;
    m_axi_input3_WUSER <= ap_const_lv1_0;
    m_axi_input3_WVALID <= ap_const_logic_0;
    m_axi_input_r_ARADDR <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_ARADDR;
    m_axi_input_r_ARBURST <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_ARBURST;
    m_axi_input_r_ARCACHE <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_ARCACHE;
    m_axi_input_r_ARID <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_ARID;
    m_axi_input_r_ARLEN <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_ARLEN;
    m_axi_input_r_ARLOCK <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_ARLOCK;
    m_axi_input_r_ARPROT <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_ARPROT;
    m_axi_input_r_ARQOS <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_ARQOS;
    m_axi_input_r_ARREGION <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_ARREGION;
    m_axi_input_r_ARSIZE <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_ARSIZE;
    m_axi_input_r_ARUSER <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_ARUSER;

    m_axi_input_r_ARVALID_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, pingpong_reg_323, ap_CS_fsm_state7, grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_ARVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((pingpong_reg_323 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((pingpong_reg_323 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            m_axi_input_r_ARVALID <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_ARVALID;
        else 
            m_axi_input_r_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_input_r_AWADDR <= ap_const_lv32_0;
    m_axi_input_r_AWBURST <= ap_const_lv2_0;
    m_axi_input_r_AWCACHE <= ap_const_lv4_0;
    m_axi_input_r_AWID <= ap_const_lv1_0;
    m_axi_input_r_AWLEN <= ap_const_lv32_0;
    m_axi_input_r_AWLOCK <= ap_const_lv2_0;
    m_axi_input_r_AWPROT <= ap_const_lv3_0;
    m_axi_input_r_AWQOS <= ap_const_lv4_0;
    m_axi_input_r_AWREGION <= ap_const_lv4_0;
    m_axi_input_r_AWSIZE <= ap_const_lv3_0;
    m_axi_input_r_AWUSER <= ap_const_lv1_0;
    m_axi_input_r_AWVALID <= ap_const_logic_0;
    m_axi_input_r_BREADY <= ap_const_logic_0;

    m_axi_input_r_RREADY_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, pingpong_reg_323, ap_CS_fsm_state7, grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_RREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((pingpong_reg_323 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((pingpong_reg_323 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            m_axi_input_r_RREADY <= grp_mmcpy_inputpixel_m2b_fu_348_m_axi_input_r_RREADY;
        else 
            m_axi_input_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_input_r_WDATA <= ap_const_lv32_0;
    m_axi_input_r_WID <= ap_const_lv1_0;
    m_axi_input_r_WLAST <= ap_const_logic_0;
    m_axi_input_r_WSTRB <= ap_const_lv4_0;
    m_axi_input_r_WUSER <= ap_const_lv1_0;
    m_axi_input_r_WVALID <= ap_const_logic_0;
    n_11b_V_fu_538_p1 <= n(11 - 1 downto 0);
    p_2_fu_759_p3 <= 
        ap_const_lv9_34 when (tmp_21_fu_753_p2(0) = '1') else 
        Input_w_9b_V_fu_678_p1;
    p_3_fu_767_p3 <= 
        ap_const_lv6_34 when (tmp_21_fu_753_p2(0) = '1') else 
        col_len_V_fu_716_p2;
    p_4_fu_783_p3 <= 
        sel_tmp9_fu_775_p3 when (tmp_21_fu_753_p2(0) = '1') else 
        ap_const_lv3_1;
    r_9b_V_fu_501_p1 <= r(9 - 1 downto 0);
    r_V_11_fu_566_p2 <= std_logic_vector(unsigned(rhs_V_8_cast_fu_562_p1) + unsigned(grp_fu_967_p3));
    r_V_12_fu_571_p2 <= std_logic_vector(signed(ap_const_lv12_FFF) + signed(r_V_11_fu_566_p2));
    r_V_13_fu_606_p2 <= std_logic_vector(unsigned(rhs_V_9_cast_fu_602_p1) + unsigned(r_V_21_reg_1075));
    r_V_14_fu_611_p2 <= std_logic_vector(signed(ap_const_lv12_FFF) + signed(r_V_13_fu_606_p2));
    r_V_15_fu_978_p0 <= r_V_15_fu_978_p00(11 - 1 downto 0);
    r_V_15_fu_978_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_11b_V_fu_538_p1),29));
    r_V_15_fu_978_p1 <= r_V_15_fu_978_p10(18 - 1 downto 0);
    r_V_15_fu_978_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(IHxIW_18b_V_fu_546_p1),29));
    r_V_18_fu_736_p2 <= std_logic_vector(unsigned(rhs_V_13_cast_fu_732_p1) + unsigned(grp_fu_984_p3));
    r_V_19_fu_804_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(lhs_V_20_cast_fu_800_p1));
    r_V_1_fu_823_p2 <= std_logic_vector(unsigned(rhs_V_6_fu_820_p1) + unsigned(lhs_V_1_fu_817_p1));
    rev_fu_858_p2 <= (ult_fu_853_p2 xor ap_const_lv1_1);
    rhs_V_13_cast_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(TCol_left_V_1_fu_686_p3),30));
    rhs_V_2_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Padding_1b_V_fu_509_p1),12));
    rhs_V_6_fu_820_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(RowSub_V_reg_1142),7));
    rhs_V_8_cast_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(TCol),12));
    rhs_V_9_cast_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(TRow),12));
    rhs_V_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Kernel_stride_2b_V_fu_505_p1),11));
    row_len_V_fu_652_p2 <= std_logic_vector(unsigned(tmp_20_fu_640_p3) - unsigned(tmp_84_fu_648_p1));
    sel_tmp2_fu_747_p2 <= "1" when (Input_w_9b_V_fu_678_p1 = ap_const_lv9_1A) else "0";
    sel_tmp9_fu_775_p3 <= 
        ap_const_lv3_2 when (sel_tmp2_fu_747_p2(0) = '1') else 
        ap_const_lv3_4;
    sel_tmp_fu_741_p2 <= "1" when (Input_w_9b_V_fu_678_p1 = ap_const_lv9_D) else "0";
    t2_V_fu_943_p2 <= std_logic_vector(unsigned(tmp_51_reg_1229) + unsigned(p_6_reg_311));
    tmp_18_fu_705_p3 <= 
        tmp_46_reg_1121 when (tmp_s_fu_696_p2(0) = '1') else 
        tmp_78_fu_701_p1;
    tmp_20_fu_640_p3 <= 
        tmp_50_fu_631_p2 when (tmp_49_fu_621_p2(0) = '1') else 
        tmp_83_fu_636_p1;
    tmp_21_fu_753_p2 <= (sel_tmp_fu_741_p2 or sel_tmp2_fu_747_p2);
    tmp_46_fu_584_p2 <= std_logic_vector(unsigned(tmp_77_fu_580_p1) + unsigned(tmp_76_fu_577_p1));
    tmp_48_fu_590_p2 <= "1" when (signed(r_V_21_reg_1075) > signed(ap_const_lv12_0)) else "0";
    tmp_49_fu_621_p2 <= "1" when (signed(r_V_14_fu_611_p2) < signed(tmp_71_cast_fu_617_p1)) else "0";
    tmp_50_fu_631_p2 <= std_logic_vector(unsigned(tmp_82_fu_627_p1) + unsigned(tmp_81_reg_1086));
    tmp_51_fu_813_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_4_fu_783_p3),6));
    tmp_52_fu_833_p2 <= "1" when (unsigned(tmp_84_cast_fu_829_p1) < unsigned(r_V_19_reg_1219)) else "0";
    tmp_53_fu_848_p2 <= "1" when (unsigned(tmp_86_cast_fu_844_p1) < unsigned(r_V_1_reg_1234)) else "0";
    tmp_54_fu_870_p2 <= "0" when (p_5_reg_300 = trow_loops_V) else "1";
    tmp_71_cast_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Input_h_10b_V_fu_542_p1),12));
    tmp_76_fu_577_p1 <= grp_fu_967_p3(6 - 1 downto 0);
    tmp_77_fu_580_p1 <= TCol(6 - 1 downto 0);
    tmp_78_fu_701_p1 <= Input_w(6 - 1 downto 0);
    tmp_79_fu_712_p1 <= TCol_left_V_1_fu_686_p3(6 - 1 downto 0);
    tmp_81_cast_fu_810_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(RowSub_V_reg_1142),6));
    tmp_81_fu_528_p1 <= grp_fu_956_p3(6 - 1 downto 0);
    tmp_82_fu_627_p1 <= TRow(6 - 1 downto 0);
    tmp_83_fu_636_p1 <= Input_h(6 - 1 downto 0);
    tmp_84_cast_fu_829_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_5_reg_300),7));
    tmp_84_fu_648_p1 <= TRow_top_V_1_fu_595_p3(6 - 1 downto 0);
    tmp_85_fu_666_p1 <= TRow_top_V_1_fu_595_p3(1 - 1 downto 0);
    tmp_86_cast_fu_844_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_6_reg_311),7));
    tmp_86_fu_531_p1 <= grp_fu_956_p3(1 - 1 downto 0);
    tmp_87_fu_791_p1 <= TCol_left_V_1_fu_686_p3(1 - 1 downto 0);
    tmp_88_fu_675_p1 <= grp_fu_967_p3(1 - 1 downto 0);
    tmp_cast_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Input_w_9b_V_fu_678_p1),12));
    tmp_fu_554_p2 <= "1" when (signed(grp_fu_967_p3) > signed(ap_const_lv12_0)) else "0";
    tmp_s_fu_696_p2 <= "1" when (signed(r_V_12_reg_1116) < signed(tmp_cast_fu_692_p1)) else "0";
    ult_fu_853_p2 <= "1" when (unsigned(p_6_reg_311) < unsigned(tmp_81_cast_reg_1224)) else "0";
end behav;
