// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module load_weight2buf_ever (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weight_memcpy_buffer_address0,
        weight_memcpy_buffer_ce0,
        weight_memcpy_buffer_q0,
        weight_buffer_0_0_address0,
        weight_buffer_0_0_ce0,
        weight_buffer_0_0_we0,
        weight_buffer_0_0_d0,
        weight_buffer_0_1_address0,
        weight_buffer_0_1_ce0,
        weight_buffer_0_1_we0,
        weight_buffer_0_1_d0,
        weight_buffer_0_2_address0,
        weight_buffer_0_2_ce0,
        weight_buffer_0_2_we0,
        weight_buffer_0_2_d0,
        weight_buffer_0_3_address0,
        weight_buffer_0_3_ce0,
        weight_buffer_0_3_we0,
        weight_buffer_0_3_d0,
        weight_buffer_1_0_address0,
        weight_buffer_1_0_ce0,
        weight_buffer_1_0_we0,
        weight_buffer_1_0_d0,
        weight_buffer_1_1_address0,
        weight_buffer_1_1_ce0,
        weight_buffer_1_1_we0,
        weight_buffer_1_1_d0,
        weight_buffer_1_2_address0,
        weight_buffer_1_2_ce0,
        weight_buffer_1_2_we0,
        weight_buffer_1_2_d0,
        weight_buffer_1_3_address0,
        weight_buffer_1_3_ce0,
        weight_buffer_1_3_we0,
        weight_buffer_1_3_d0,
        weight_buffer_2_0_address0,
        weight_buffer_2_0_ce0,
        weight_buffer_2_0_we0,
        weight_buffer_2_0_d0,
        weight_buffer_2_1_address0,
        weight_buffer_2_1_ce0,
        weight_buffer_2_1_we0,
        weight_buffer_2_1_d0,
        weight_buffer_2_2_address0,
        weight_buffer_2_2_ce0,
        weight_buffer_2_2_we0,
        weight_buffer_2_2_d0,
        weight_buffer_2_3_address0,
        weight_buffer_2_3_ce0,
        weight_buffer_2_3_we0,
        weight_buffer_2_3_d0,
        weight_buffer_3_0_address0,
        weight_buffer_3_0_ce0,
        weight_buffer_3_0_we0,
        weight_buffer_3_0_d0,
        weight_buffer_3_1_address0,
        weight_buffer_3_1_ce0,
        weight_buffer_3_1_we0,
        weight_buffer_3_1_d0,
        weight_buffer_3_2_address0,
        weight_buffer_3_2_ce0,
        weight_buffer_3_2_we0,
        weight_buffer_3_2_d0,
        weight_buffer_3_3_address0,
        weight_buffer_3_3_ce0,
        weight_buffer_3_3_we0,
        weight_buffer_3_3_d0,
        weight_buffer_4_0_address0,
        weight_buffer_4_0_ce0,
        weight_buffer_4_0_we0,
        weight_buffer_4_0_d0,
        weight_buffer_4_1_address0,
        weight_buffer_4_1_ce0,
        weight_buffer_4_1_we0,
        weight_buffer_4_1_d0,
        weight_buffer_4_2_address0,
        weight_buffer_4_2_ce0,
        weight_buffer_4_2_we0,
        weight_buffer_4_2_d0,
        weight_buffer_4_3_address0,
        weight_buffer_4_3_ce0,
        weight_buffer_4_3_we0,
        weight_buffer_4_3_d0,
        weight_buffer_5_0_address0,
        weight_buffer_5_0_ce0,
        weight_buffer_5_0_we0,
        weight_buffer_5_0_d0,
        weight_buffer_5_1_address0,
        weight_buffer_5_1_ce0,
        weight_buffer_5_1_we0,
        weight_buffer_5_1_d0,
        weight_buffer_5_2_address0,
        weight_buffer_5_2_ce0,
        weight_buffer_5_2_we0,
        weight_buffer_5_2_d0,
        weight_buffer_5_3_address0,
        weight_buffer_5_3_ce0,
        weight_buffer_5_3_we0,
        weight_buffer_5_3_d0,
        weight_buffer_6_0_address0,
        weight_buffer_6_0_ce0,
        weight_buffer_6_0_we0,
        weight_buffer_6_0_d0,
        weight_buffer_6_1_address0,
        weight_buffer_6_1_ce0,
        weight_buffer_6_1_we0,
        weight_buffer_6_1_d0,
        weight_buffer_6_2_address0,
        weight_buffer_6_2_ce0,
        weight_buffer_6_2_we0,
        weight_buffer_6_2_d0,
        weight_buffer_6_3_address0,
        weight_buffer_6_3_ce0,
        weight_buffer_6_3_we0,
        weight_buffer_6_3_d0,
        weight_buffer_7_0_address0,
        weight_buffer_7_0_ce0,
        weight_buffer_7_0_we0,
        weight_buffer_7_0_d0,
        weight_buffer_7_1_address0,
        weight_buffer_7_1_ce0,
        weight_buffer_7_1_we0,
        weight_buffer_7_1_d0,
        weight_buffer_7_2_address0,
        weight_buffer_7_2_ce0,
        weight_buffer_7_2_we0,
        weight_buffer_7_2_d0,
        weight_buffer_7_3_address0,
        weight_buffer_7_3_ce0,
        weight_buffer_7_3_we0,
        weight_buffer_7_3_d0,
        weight_buffer_8_0_address0,
        weight_buffer_8_0_ce0,
        weight_buffer_8_0_we0,
        weight_buffer_8_0_d0,
        weight_buffer_8_1_address0,
        weight_buffer_8_1_ce0,
        weight_buffer_8_1_we0,
        weight_buffer_8_1_d0,
        weight_buffer_8_2_address0,
        weight_buffer_8_2_ce0,
        weight_buffer_8_2_we0,
        weight_buffer_8_2_d0,
        weight_buffer_8_3_address0,
        weight_buffer_8_3_ce0,
        weight_buffer_8_3_we0,
        weight_buffer_8_3_d0,
        weight_buffer_9_0_address0,
        weight_buffer_9_0_ce0,
        weight_buffer_9_0_we0,
        weight_buffer_9_0_d0,
        weight_buffer_9_1_address0,
        weight_buffer_9_1_ce0,
        weight_buffer_9_1_we0,
        weight_buffer_9_1_d0,
        weight_buffer_9_2_address0,
        weight_buffer_9_2_ce0,
        weight_buffer_9_2_we0,
        weight_buffer_9_2_d0,
        weight_buffer_9_3_address0,
        weight_buffer_9_3_ce0,
        weight_buffer_9_3_we0,
        weight_buffer_9_3_d0,
        weight_buffer_10_0_address0,
        weight_buffer_10_0_ce0,
        weight_buffer_10_0_we0,
        weight_buffer_10_0_d0,
        weight_buffer_10_1_address0,
        weight_buffer_10_1_ce0,
        weight_buffer_10_1_we0,
        weight_buffer_10_1_d0,
        weight_buffer_10_2_address0,
        weight_buffer_10_2_ce0,
        weight_buffer_10_2_we0,
        weight_buffer_10_2_d0,
        weight_buffer_10_3_address0,
        weight_buffer_10_3_ce0,
        weight_buffer_10_3_we0,
        weight_buffer_10_3_d0,
        weight_buffer_11_0_address0,
        weight_buffer_11_0_ce0,
        weight_buffer_11_0_we0,
        weight_buffer_11_0_d0,
        weight_buffer_11_1_address0,
        weight_buffer_11_1_ce0,
        weight_buffer_11_1_we0,
        weight_buffer_11_1_d0,
        weight_buffer_11_2_address0,
        weight_buffer_11_2_ce0,
        weight_buffer_11_2_we0,
        weight_buffer_11_2_d0,
        weight_buffer_11_3_address0,
        weight_buffer_11_3_ce0,
        weight_buffer_11_3_we0,
        weight_buffer_11_3_d0,
        weight_buffer_12_0_address0,
        weight_buffer_12_0_ce0,
        weight_buffer_12_0_we0,
        weight_buffer_12_0_d0,
        weight_buffer_12_1_address0,
        weight_buffer_12_1_ce0,
        weight_buffer_12_1_we0,
        weight_buffer_12_1_d0,
        weight_buffer_12_2_address0,
        weight_buffer_12_2_ce0,
        weight_buffer_12_2_we0,
        weight_buffer_12_2_d0,
        weight_buffer_12_3_address0,
        weight_buffer_12_3_ce0,
        weight_buffer_12_3_we0,
        weight_buffer_12_3_d0,
        weight_buffer_13_0_address0,
        weight_buffer_13_0_ce0,
        weight_buffer_13_0_we0,
        weight_buffer_13_0_d0,
        weight_buffer_13_1_address0,
        weight_buffer_13_1_ce0,
        weight_buffer_13_1_we0,
        weight_buffer_13_1_d0,
        weight_buffer_13_2_address0,
        weight_buffer_13_2_ce0,
        weight_buffer_13_2_we0,
        weight_buffer_13_2_d0,
        weight_buffer_13_3_address0,
        weight_buffer_13_3_ce0,
        weight_buffer_13_3_we0,
        weight_buffer_13_3_d0,
        weight_buffer_14_0_address0,
        weight_buffer_14_0_ce0,
        weight_buffer_14_0_we0,
        weight_buffer_14_0_d0,
        weight_buffer_14_1_address0,
        weight_buffer_14_1_ce0,
        weight_buffer_14_1_we0,
        weight_buffer_14_1_d0,
        weight_buffer_14_2_address0,
        weight_buffer_14_2_ce0,
        weight_buffer_14_2_we0,
        weight_buffer_14_2_d0,
        weight_buffer_14_3_address0,
        weight_buffer_14_3_ce0,
        weight_buffer_14_3_we0,
        weight_buffer_14_3_d0,
        weight_buffer_15_0_address0,
        weight_buffer_15_0_ce0,
        weight_buffer_15_0_we0,
        weight_buffer_15_0_d0,
        weight_buffer_15_1_address0,
        weight_buffer_15_1_ce0,
        weight_buffer_15_1_we0,
        weight_buffer_15_1_d0,
        weight_buffer_15_2_address0,
        weight_buffer_15_2_ce0,
        weight_buffer_15_2_we0,
        weight_buffer_15_2_d0,
        weight_buffer_15_3_address0,
        weight_buffer_15_3_ce0,
        weight_buffer_15_3_we0,
        weight_buffer_15_3_d0,
        weight_buffer_16_0_address0,
        weight_buffer_16_0_ce0,
        weight_buffer_16_0_we0,
        weight_buffer_16_0_d0,
        weight_buffer_16_1_address0,
        weight_buffer_16_1_ce0,
        weight_buffer_16_1_we0,
        weight_buffer_16_1_d0,
        weight_buffer_16_2_address0,
        weight_buffer_16_2_ce0,
        weight_buffer_16_2_we0,
        weight_buffer_16_2_d0,
        weight_buffer_16_3_address0,
        weight_buffer_16_3_ce0,
        weight_buffer_16_3_we0,
        weight_buffer_16_3_d0,
        weight_buffer_17_0_address0,
        weight_buffer_17_0_ce0,
        weight_buffer_17_0_we0,
        weight_buffer_17_0_d0,
        weight_buffer_17_1_address0,
        weight_buffer_17_1_ce0,
        weight_buffer_17_1_we0,
        weight_buffer_17_1_d0,
        weight_buffer_17_2_address0,
        weight_buffer_17_2_ce0,
        weight_buffer_17_2_we0,
        weight_buffer_17_2_d0,
        weight_buffer_17_3_address0,
        weight_buffer_17_3_ce0,
        weight_buffer_17_3_we0,
        weight_buffer_17_3_d0,
        weight_buffer_18_0_address0,
        weight_buffer_18_0_ce0,
        weight_buffer_18_0_we0,
        weight_buffer_18_0_d0,
        weight_buffer_18_1_address0,
        weight_buffer_18_1_ce0,
        weight_buffer_18_1_we0,
        weight_buffer_18_1_d0,
        weight_buffer_18_2_address0,
        weight_buffer_18_2_ce0,
        weight_buffer_18_2_we0,
        weight_buffer_18_2_d0,
        weight_buffer_18_3_address0,
        weight_buffer_18_3_ce0,
        weight_buffer_18_3_we0,
        weight_buffer_18_3_d0,
        weight_buffer_19_0_address0,
        weight_buffer_19_0_ce0,
        weight_buffer_19_0_we0,
        weight_buffer_19_0_d0,
        weight_buffer_19_1_address0,
        weight_buffer_19_1_ce0,
        weight_buffer_19_1_we0,
        weight_buffer_19_1_d0,
        weight_buffer_19_2_address0,
        weight_buffer_19_2_ce0,
        weight_buffer_19_2_we0,
        weight_buffer_19_2_d0,
        weight_buffer_19_3_address0,
        weight_buffer_19_3_ce0,
        weight_buffer_19_3_we0,
        weight_buffer_19_3_d0,
        weight_buffer_20_0_address0,
        weight_buffer_20_0_ce0,
        weight_buffer_20_0_we0,
        weight_buffer_20_0_d0,
        weight_buffer_20_1_address0,
        weight_buffer_20_1_ce0,
        weight_buffer_20_1_we0,
        weight_buffer_20_1_d0,
        weight_buffer_20_2_address0,
        weight_buffer_20_2_ce0,
        weight_buffer_20_2_we0,
        weight_buffer_20_2_d0,
        weight_buffer_20_3_address0,
        weight_buffer_20_3_ce0,
        weight_buffer_20_3_we0,
        weight_buffer_20_3_d0,
        weight_buffer_21_0_address0,
        weight_buffer_21_0_ce0,
        weight_buffer_21_0_we0,
        weight_buffer_21_0_d0,
        weight_buffer_21_1_address0,
        weight_buffer_21_1_ce0,
        weight_buffer_21_1_we0,
        weight_buffer_21_1_d0,
        weight_buffer_21_2_address0,
        weight_buffer_21_2_ce0,
        weight_buffer_21_2_we0,
        weight_buffer_21_2_d0,
        weight_buffer_21_3_address0,
        weight_buffer_21_3_ce0,
        weight_buffer_21_3_we0,
        weight_buffer_21_3_d0,
        weight_buffer_22_0_address0,
        weight_buffer_22_0_ce0,
        weight_buffer_22_0_we0,
        weight_buffer_22_0_d0,
        weight_buffer_22_1_address0,
        weight_buffer_22_1_ce0,
        weight_buffer_22_1_we0,
        weight_buffer_22_1_d0,
        weight_buffer_22_2_address0,
        weight_buffer_22_2_ce0,
        weight_buffer_22_2_we0,
        weight_buffer_22_2_d0,
        weight_buffer_22_3_address0,
        weight_buffer_22_3_ce0,
        weight_buffer_22_3_we0,
        weight_buffer_22_3_d0,
        weight_buffer_23_0_address0,
        weight_buffer_23_0_ce0,
        weight_buffer_23_0_we0,
        weight_buffer_23_0_d0,
        weight_buffer_23_1_address0,
        weight_buffer_23_1_ce0,
        weight_buffer_23_1_we0,
        weight_buffer_23_1_d0,
        weight_buffer_23_2_address0,
        weight_buffer_23_2_ce0,
        weight_buffer_23_2_we0,
        weight_buffer_23_2_d0,
        weight_buffer_23_3_address0,
        weight_buffer_23_3_ce0,
        weight_buffer_23_3_we0,
        weight_buffer_23_3_d0,
        weight_buffer_24_0_address0,
        weight_buffer_24_0_ce0,
        weight_buffer_24_0_we0,
        weight_buffer_24_0_d0,
        weight_buffer_24_1_address0,
        weight_buffer_24_1_ce0,
        weight_buffer_24_1_we0,
        weight_buffer_24_1_d0,
        weight_buffer_24_2_address0,
        weight_buffer_24_2_ce0,
        weight_buffer_24_2_we0,
        weight_buffer_24_2_d0,
        weight_buffer_24_3_address0,
        weight_buffer_24_3_ce0,
        weight_buffer_24_3_we0,
        weight_buffer_24_3_d0,
        weight_buffer_25_0_address0,
        weight_buffer_25_0_ce0,
        weight_buffer_25_0_we0,
        weight_buffer_25_0_d0,
        weight_buffer_25_1_address0,
        weight_buffer_25_1_ce0,
        weight_buffer_25_1_we0,
        weight_buffer_25_1_d0,
        weight_buffer_25_2_address0,
        weight_buffer_25_2_ce0,
        weight_buffer_25_2_we0,
        weight_buffer_25_2_d0,
        weight_buffer_25_3_address0,
        weight_buffer_25_3_ce0,
        weight_buffer_25_3_we0,
        weight_buffer_25_3_d0,
        weight_buffer_26_0_address0,
        weight_buffer_26_0_ce0,
        weight_buffer_26_0_we0,
        weight_buffer_26_0_d0,
        weight_buffer_26_1_address0,
        weight_buffer_26_1_ce0,
        weight_buffer_26_1_we0,
        weight_buffer_26_1_d0,
        weight_buffer_26_2_address0,
        weight_buffer_26_2_ce0,
        weight_buffer_26_2_we0,
        weight_buffer_26_2_d0,
        weight_buffer_26_3_address0,
        weight_buffer_26_3_ce0,
        weight_buffer_26_3_we0,
        weight_buffer_26_3_d0,
        weight_buffer_27_0_address0,
        weight_buffer_27_0_ce0,
        weight_buffer_27_0_we0,
        weight_buffer_27_0_d0,
        weight_buffer_27_1_address0,
        weight_buffer_27_1_ce0,
        weight_buffer_27_1_we0,
        weight_buffer_27_1_d0,
        weight_buffer_27_2_address0,
        weight_buffer_27_2_ce0,
        weight_buffer_27_2_we0,
        weight_buffer_27_2_d0,
        weight_buffer_27_3_address0,
        weight_buffer_27_3_ce0,
        weight_buffer_27_3_we0,
        weight_buffer_27_3_d0,
        weight_buffer_28_0_address0,
        weight_buffer_28_0_ce0,
        weight_buffer_28_0_we0,
        weight_buffer_28_0_d0,
        weight_buffer_28_1_address0,
        weight_buffer_28_1_ce0,
        weight_buffer_28_1_we0,
        weight_buffer_28_1_d0,
        weight_buffer_28_2_address0,
        weight_buffer_28_2_ce0,
        weight_buffer_28_2_we0,
        weight_buffer_28_2_d0,
        weight_buffer_28_3_address0,
        weight_buffer_28_3_ce0,
        weight_buffer_28_3_we0,
        weight_buffer_28_3_d0,
        weight_buffer_29_0_address0,
        weight_buffer_29_0_ce0,
        weight_buffer_29_0_we0,
        weight_buffer_29_0_d0,
        weight_buffer_29_1_address0,
        weight_buffer_29_1_ce0,
        weight_buffer_29_1_we0,
        weight_buffer_29_1_d0,
        weight_buffer_29_2_address0,
        weight_buffer_29_2_ce0,
        weight_buffer_29_2_we0,
        weight_buffer_29_2_d0,
        weight_buffer_29_3_address0,
        weight_buffer_29_3_ce0,
        weight_buffer_29_3_we0,
        weight_buffer_29_3_d0,
        weight_buffer_30_0_address0,
        weight_buffer_30_0_ce0,
        weight_buffer_30_0_we0,
        weight_buffer_30_0_d0,
        weight_buffer_30_1_address0,
        weight_buffer_30_1_ce0,
        weight_buffer_30_1_we0,
        weight_buffer_30_1_d0,
        weight_buffer_30_2_address0,
        weight_buffer_30_2_ce0,
        weight_buffer_30_2_we0,
        weight_buffer_30_2_d0,
        weight_buffer_30_3_address0,
        weight_buffer_30_3_ce0,
        weight_buffer_30_3_we0,
        weight_buffer_30_3_d0,
        weight_buffer_31_0_address0,
        weight_buffer_31_0_ce0,
        weight_buffer_31_0_we0,
        weight_buffer_31_0_d0,
        weight_buffer_31_1_address0,
        weight_buffer_31_1_ce0,
        weight_buffer_31_1_we0,
        weight_buffer_31_1_d0,
        weight_buffer_31_2_address0,
        weight_buffer_31_2_ce0,
        weight_buffer_31_2_we0,
        weight_buffer_31_2_d0,
        weight_buffer_31_3_address0,
        weight_buffer_31_3_ce0,
        weight_buffer_31_3_we0,
        weight_buffer_31_3_d0,
        t3_V,
        t4_V,
        TM_MIN_V,
        TN_MIN_V,
        enable
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] weight_memcpy_buffer_address0;
output   weight_memcpy_buffer_ce0;
input  [31:0] weight_memcpy_buffer_q0;
output  [3:0] weight_buffer_0_0_address0;
output   weight_buffer_0_0_ce0;
output   weight_buffer_0_0_we0;
output  [15:0] weight_buffer_0_0_d0;
output  [3:0] weight_buffer_0_1_address0;
output   weight_buffer_0_1_ce0;
output   weight_buffer_0_1_we0;
output  [15:0] weight_buffer_0_1_d0;
output  [3:0] weight_buffer_0_2_address0;
output   weight_buffer_0_2_ce0;
output   weight_buffer_0_2_we0;
output  [15:0] weight_buffer_0_2_d0;
output  [3:0] weight_buffer_0_3_address0;
output   weight_buffer_0_3_ce0;
output   weight_buffer_0_3_we0;
output  [15:0] weight_buffer_0_3_d0;
output  [3:0] weight_buffer_1_0_address0;
output   weight_buffer_1_0_ce0;
output   weight_buffer_1_0_we0;
output  [15:0] weight_buffer_1_0_d0;
output  [3:0] weight_buffer_1_1_address0;
output   weight_buffer_1_1_ce0;
output   weight_buffer_1_1_we0;
output  [15:0] weight_buffer_1_1_d0;
output  [3:0] weight_buffer_1_2_address0;
output   weight_buffer_1_2_ce0;
output   weight_buffer_1_2_we0;
output  [15:0] weight_buffer_1_2_d0;
output  [3:0] weight_buffer_1_3_address0;
output   weight_buffer_1_3_ce0;
output   weight_buffer_1_3_we0;
output  [15:0] weight_buffer_1_3_d0;
output  [3:0] weight_buffer_2_0_address0;
output   weight_buffer_2_0_ce0;
output   weight_buffer_2_0_we0;
output  [15:0] weight_buffer_2_0_d0;
output  [3:0] weight_buffer_2_1_address0;
output   weight_buffer_2_1_ce0;
output   weight_buffer_2_1_we0;
output  [15:0] weight_buffer_2_1_d0;
output  [3:0] weight_buffer_2_2_address0;
output   weight_buffer_2_2_ce0;
output   weight_buffer_2_2_we0;
output  [15:0] weight_buffer_2_2_d0;
output  [3:0] weight_buffer_2_3_address0;
output   weight_buffer_2_3_ce0;
output   weight_buffer_2_3_we0;
output  [15:0] weight_buffer_2_3_d0;
output  [3:0] weight_buffer_3_0_address0;
output   weight_buffer_3_0_ce0;
output   weight_buffer_3_0_we0;
output  [15:0] weight_buffer_3_0_d0;
output  [3:0] weight_buffer_3_1_address0;
output   weight_buffer_3_1_ce0;
output   weight_buffer_3_1_we0;
output  [15:0] weight_buffer_3_1_d0;
output  [3:0] weight_buffer_3_2_address0;
output   weight_buffer_3_2_ce0;
output   weight_buffer_3_2_we0;
output  [15:0] weight_buffer_3_2_d0;
output  [3:0] weight_buffer_3_3_address0;
output   weight_buffer_3_3_ce0;
output   weight_buffer_3_3_we0;
output  [15:0] weight_buffer_3_3_d0;
output  [3:0] weight_buffer_4_0_address0;
output   weight_buffer_4_0_ce0;
output   weight_buffer_4_0_we0;
output  [15:0] weight_buffer_4_0_d0;
output  [3:0] weight_buffer_4_1_address0;
output   weight_buffer_4_1_ce0;
output   weight_buffer_4_1_we0;
output  [15:0] weight_buffer_4_1_d0;
output  [3:0] weight_buffer_4_2_address0;
output   weight_buffer_4_2_ce0;
output   weight_buffer_4_2_we0;
output  [15:0] weight_buffer_4_2_d0;
output  [3:0] weight_buffer_4_3_address0;
output   weight_buffer_4_3_ce0;
output   weight_buffer_4_3_we0;
output  [15:0] weight_buffer_4_3_d0;
output  [3:0] weight_buffer_5_0_address0;
output   weight_buffer_5_0_ce0;
output   weight_buffer_5_0_we0;
output  [15:0] weight_buffer_5_0_d0;
output  [3:0] weight_buffer_5_1_address0;
output   weight_buffer_5_1_ce0;
output   weight_buffer_5_1_we0;
output  [15:0] weight_buffer_5_1_d0;
output  [3:0] weight_buffer_5_2_address0;
output   weight_buffer_5_2_ce0;
output   weight_buffer_5_2_we0;
output  [15:0] weight_buffer_5_2_d0;
output  [3:0] weight_buffer_5_3_address0;
output   weight_buffer_5_3_ce0;
output   weight_buffer_5_3_we0;
output  [15:0] weight_buffer_5_3_d0;
output  [3:0] weight_buffer_6_0_address0;
output   weight_buffer_6_0_ce0;
output   weight_buffer_6_0_we0;
output  [15:0] weight_buffer_6_0_d0;
output  [3:0] weight_buffer_6_1_address0;
output   weight_buffer_6_1_ce0;
output   weight_buffer_6_1_we0;
output  [15:0] weight_buffer_6_1_d0;
output  [3:0] weight_buffer_6_2_address0;
output   weight_buffer_6_2_ce0;
output   weight_buffer_6_2_we0;
output  [15:0] weight_buffer_6_2_d0;
output  [3:0] weight_buffer_6_3_address0;
output   weight_buffer_6_3_ce0;
output   weight_buffer_6_3_we0;
output  [15:0] weight_buffer_6_3_d0;
output  [3:0] weight_buffer_7_0_address0;
output   weight_buffer_7_0_ce0;
output   weight_buffer_7_0_we0;
output  [15:0] weight_buffer_7_0_d0;
output  [3:0] weight_buffer_7_1_address0;
output   weight_buffer_7_1_ce0;
output   weight_buffer_7_1_we0;
output  [15:0] weight_buffer_7_1_d0;
output  [3:0] weight_buffer_7_2_address0;
output   weight_buffer_7_2_ce0;
output   weight_buffer_7_2_we0;
output  [15:0] weight_buffer_7_2_d0;
output  [3:0] weight_buffer_7_3_address0;
output   weight_buffer_7_3_ce0;
output   weight_buffer_7_3_we0;
output  [15:0] weight_buffer_7_3_d0;
output  [3:0] weight_buffer_8_0_address0;
output   weight_buffer_8_0_ce0;
output   weight_buffer_8_0_we0;
output  [15:0] weight_buffer_8_0_d0;
output  [3:0] weight_buffer_8_1_address0;
output   weight_buffer_8_1_ce0;
output   weight_buffer_8_1_we0;
output  [15:0] weight_buffer_8_1_d0;
output  [3:0] weight_buffer_8_2_address0;
output   weight_buffer_8_2_ce0;
output   weight_buffer_8_2_we0;
output  [15:0] weight_buffer_8_2_d0;
output  [3:0] weight_buffer_8_3_address0;
output   weight_buffer_8_3_ce0;
output   weight_buffer_8_3_we0;
output  [15:0] weight_buffer_8_3_d0;
output  [3:0] weight_buffer_9_0_address0;
output   weight_buffer_9_0_ce0;
output   weight_buffer_9_0_we0;
output  [15:0] weight_buffer_9_0_d0;
output  [3:0] weight_buffer_9_1_address0;
output   weight_buffer_9_1_ce0;
output   weight_buffer_9_1_we0;
output  [15:0] weight_buffer_9_1_d0;
output  [3:0] weight_buffer_9_2_address0;
output   weight_buffer_9_2_ce0;
output   weight_buffer_9_2_we0;
output  [15:0] weight_buffer_9_2_d0;
output  [3:0] weight_buffer_9_3_address0;
output   weight_buffer_9_3_ce0;
output   weight_buffer_9_3_we0;
output  [15:0] weight_buffer_9_3_d0;
output  [3:0] weight_buffer_10_0_address0;
output   weight_buffer_10_0_ce0;
output   weight_buffer_10_0_we0;
output  [15:0] weight_buffer_10_0_d0;
output  [3:0] weight_buffer_10_1_address0;
output   weight_buffer_10_1_ce0;
output   weight_buffer_10_1_we0;
output  [15:0] weight_buffer_10_1_d0;
output  [3:0] weight_buffer_10_2_address0;
output   weight_buffer_10_2_ce0;
output   weight_buffer_10_2_we0;
output  [15:0] weight_buffer_10_2_d0;
output  [3:0] weight_buffer_10_3_address0;
output   weight_buffer_10_3_ce0;
output   weight_buffer_10_3_we0;
output  [15:0] weight_buffer_10_3_d0;
output  [3:0] weight_buffer_11_0_address0;
output   weight_buffer_11_0_ce0;
output   weight_buffer_11_0_we0;
output  [15:0] weight_buffer_11_0_d0;
output  [3:0] weight_buffer_11_1_address0;
output   weight_buffer_11_1_ce0;
output   weight_buffer_11_1_we0;
output  [15:0] weight_buffer_11_1_d0;
output  [3:0] weight_buffer_11_2_address0;
output   weight_buffer_11_2_ce0;
output   weight_buffer_11_2_we0;
output  [15:0] weight_buffer_11_2_d0;
output  [3:0] weight_buffer_11_3_address0;
output   weight_buffer_11_3_ce0;
output   weight_buffer_11_3_we0;
output  [15:0] weight_buffer_11_3_d0;
output  [3:0] weight_buffer_12_0_address0;
output   weight_buffer_12_0_ce0;
output   weight_buffer_12_0_we0;
output  [15:0] weight_buffer_12_0_d0;
output  [3:0] weight_buffer_12_1_address0;
output   weight_buffer_12_1_ce0;
output   weight_buffer_12_1_we0;
output  [15:0] weight_buffer_12_1_d0;
output  [3:0] weight_buffer_12_2_address0;
output   weight_buffer_12_2_ce0;
output   weight_buffer_12_2_we0;
output  [15:0] weight_buffer_12_2_d0;
output  [3:0] weight_buffer_12_3_address0;
output   weight_buffer_12_3_ce0;
output   weight_buffer_12_3_we0;
output  [15:0] weight_buffer_12_3_d0;
output  [3:0] weight_buffer_13_0_address0;
output   weight_buffer_13_0_ce0;
output   weight_buffer_13_0_we0;
output  [15:0] weight_buffer_13_0_d0;
output  [3:0] weight_buffer_13_1_address0;
output   weight_buffer_13_1_ce0;
output   weight_buffer_13_1_we0;
output  [15:0] weight_buffer_13_1_d0;
output  [3:0] weight_buffer_13_2_address0;
output   weight_buffer_13_2_ce0;
output   weight_buffer_13_2_we0;
output  [15:0] weight_buffer_13_2_d0;
output  [3:0] weight_buffer_13_3_address0;
output   weight_buffer_13_3_ce0;
output   weight_buffer_13_3_we0;
output  [15:0] weight_buffer_13_3_d0;
output  [3:0] weight_buffer_14_0_address0;
output   weight_buffer_14_0_ce0;
output   weight_buffer_14_0_we0;
output  [15:0] weight_buffer_14_0_d0;
output  [3:0] weight_buffer_14_1_address0;
output   weight_buffer_14_1_ce0;
output   weight_buffer_14_1_we0;
output  [15:0] weight_buffer_14_1_d0;
output  [3:0] weight_buffer_14_2_address0;
output   weight_buffer_14_2_ce0;
output   weight_buffer_14_2_we0;
output  [15:0] weight_buffer_14_2_d0;
output  [3:0] weight_buffer_14_3_address0;
output   weight_buffer_14_3_ce0;
output   weight_buffer_14_3_we0;
output  [15:0] weight_buffer_14_3_d0;
output  [3:0] weight_buffer_15_0_address0;
output   weight_buffer_15_0_ce0;
output   weight_buffer_15_0_we0;
output  [15:0] weight_buffer_15_0_d0;
output  [3:0] weight_buffer_15_1_address0;
output   weight_buffer_15_1_ce0;
output   weight_buffer_15_1_we0;
output  [15:0] weight_buffer_15_1_d0;
output  [3:0] weight_buffer_15_2_address0;
output   weight_buffer_15_2_ce0;
output   weight_buffer_15_2_we0;
output  [15:0] weight_buffer_15_2_d0;
output  [3:0] weight_buffer_15_3_address0;
output   weight_buffer_15_3_ce0;
output   weight_buffer_15_3_we0;
output  [15:0] weight_buffer_15_3_d0;
output  [3:0] weight_buffer_16_0_address0;
output   weight_buffer_16_0_ce0;
output   weight_buffer_16_0_we0;
output  [15:0] weight_buffer_16_0_d0;
output  [3:0] weight_buffer_16_1_address0;
output   weight_buffer_16_1_ce0;
output   weight_buffer_16_1_we0;
output  [15:0] weight_buffer_16_1_d0;
output  [3:0] weight_buffer_16_2_address0;
output   weight_buffer_16_2_ce0;
output   weight_buffer_16_2_we0;
output  [15:0] weight_buffer_16_2_d0;
output  [3:0] weight_buffer_16_3_address0;
output   weight_buffer_16_3_ce0;
output   weight_buffer_16_3_we0;
output  [15:0] weight_buffer_16_3_d0;
output  [3:0] weight_buffer_17_0_address0;
output   weight_buffer_17_0_ce0;
output   weight_buffer_17_0_we0;
output  [15:0] weight_buffer_17_0_d0;
output  [3:0] weight_buffer_17_1_address0;
output   weight_buffer_17_1_ce0;
output   weight_buffer_17_1_we0;
output  [15:0] weight_buffer_17_1_d0;
output  [3:0] weight_buffer_17_2_address0;
output   weight_buffer_17_2_ce0;
output   weight_buffer_17_2_we0;
output  [15:0] weight_buffer_17_2_d0;
output  [3:0] weight_buffer_17_3_address0;
output   weight_buffer_17_3_ce0;
output   weight_buffer_17_3_we0;
output  [15:0] weight_buffer_17_3_d0;
output  [3:0] weight_buffer_18_0_address0;
output   weight_buffer_18_0_ce0;
output   weight_buffer_18_0_we0;
output  [15:0] weight_buffer_18_0_d0;
output  [3:0] weight_buffer_18_1_address0;
output   weight_buffer_18_1_ce0;
output   weight_buffer_18_1_we0;
output  [15:0] weight_buffer_18_1_d0;
output  [3:0] weight_buffer_18_2_address0;
output   weight_buffer_18_2_ce0;
output   weight_buffer_18_2_we0;
output  [15:0] weight_buffer_18_2_d0;
output  [3:0] weight_buffer_18_3_address0;
output   weight_buffer_18_3_ce0;
output   weight_buffer_18_3_we0;
output  [15:0] weight_buffer_18_3_d0;
output  [3:0] weight_buffer_19_0_address0;
output   weight_buffer_19_0_ce0;
output   weight_buffer_19_0_we0;
output  [15:0] weight_buffer_19_0_d0;
output  [3:0] weight_buffer_19_1_address0;
output   weight_buffer_19_1_ce0;
output   weight_buffer_19_1_we0;
output  [15:0] weight_buffer_19_1_d0;
output  [3:0] weight_buffer_19_2_address0;
output   weight_buffer_19_2_ce0;
output   weight_buffer_19_2_we0;
output  [15:0] weight_buffer_19_2_d0;
output  [3:0] weight_buffer_19_3_address0;
output   weight_buffer_19_3_ce0;
output   weight_buffer_19_3_we0;
output  [15:0] weight_buffer_19_3_d0;
output  [3:0] weight_buffer_20_0_address0;
output   weight_buffer_20_0_ce0;
output   weight_buffer_20_0_we0;
output  [15:0] weight_buffer_20_0_d0;
output  [3:0] weight_buffer_20_1_address0;
output   weight_buffer_20_1_ce0;
output   weight_buffer_20_1_we0;
output  [15:0] weight_buffer_20_1_d0;
output  [3:0] weight_buffer_20_2_address0;
output   weight_buffer_20_2_ce0;
output   weight_buffer_20_2_we0;
output  [15:0] weight_buffer_20_2_d0;
output  [3:0] weight_buffer_20_3_address0;
output   weight_buffer_20_3_ce0;
output   weight_buffer_20_3_we0;
output  [15:0] weight_buffer_20_3_d0;
output  [3:0] weight_buffer_21_0_address0;
output   weight_buffer_21_0_ce0;
output   weight_buffer_21_0_we0;
output  [15:0] weight_buffer_21_0_d0;
output  [3:0] weight_buffer_21_1_address0;
output   weight_buffer_21_1_ce0;
output   weight_buffer_21_1_we0;
output  [15:0] weight_buffer_21_1_d0;
output  [3:0] weight_buffer_21_2_address0;
output   weight_buffer_21_2_ce0;
output   weight_buffer_21_2_we0;
output  [15:0] weight_buffer_21_2_d0;
output  [3:0] weight_buffer_21_3_address0;
output   weight_buffer_21_3_ce0;
output   weight_buffer_21_3_we0;
output  [15:0] weight_buffer_21_3_d0;
output  [3:0] weight_buffer_22_0_address0;
output   weight_buffer_22_0_ce0;
output   weight_buffer_22_0_we0;
output  [15:0] weight_buffer_22_0_d0;
output  [3:0] weight_buffer_22_1_address0;
output   weight_buffer_22_1_ce0;
output   weight_buffer_22_1_we0;
output  [15:0] weight_buffer_22_1_d0;
output  [3:0] weight_buffer_22_2_address0;
output   weight_buffer_22_2_ce0;
output   weight_buffer_22_2_we0;
output  [15:0] weight_buffer_22_2_d0;
output  [3:0] weight_buffer_22_3_address0;
output   weight_buffer_22_3_ce0;
output   weight_buffer_22_3_we0;
output  [15:0] weight_buffer_22_3_d0;
output  [3:0] weight_buffer_23_0_address0;
output   weight_buffer_23_0_ce0;
output   weight_buffer_23_0_we0;
output  [15:0] weight_buffer_23_0_d0;
output  [3:0] weight_buffer_23_1_address0;
output   weight_buffer_23_1_ce0;
output   weight_buffer_23_1_we0;
output  [15:0] weight_buffer_23_1_d0;
output  [3:0] weight_buffer_23_2_address0;
output   weight_buffer_23_2_ce0;
output   weight_buffer_23_2_we0;
output  [15:0] weight_buffer_23_2_d0;
output  [3:0] weight_buffer_23_3_address0;
output   weight_buffer_23_3_ce0;
output   weight_buffer_23_3_we0;
output  [15:0] weight_buffer_23_3_d0;
output  [3:0] weight_buffer_24_0_address0;
output   weight_buffer_24_0_ce0;
output   weight_buffer_24_0_we0;
output  [15:0] weight_buffer_24_0_d0;
output  [3:0] weight_buffer_24_1_address0;
output   weight_buffer_24_1_ce0;
output   weight_buffer_24_1_we0;
output  [15:0] weight_buffer_24_1_d0;
output  [3:0] weight_buffer_24_2_address0;
output   weight_buffer_24_2_ce0;
output   weight_buffer_24_2_we0;
output  [15:0] weight_buffer_24_2_d0;
output  [3:0] weight_buffer_24_3_address0;
output   weight_buffer_24_3_ce0;
output   weight_buffer_24_3_we0;
output  [15:0] weight_buffer_24_3_d0;
output  [3:0] weight_buffer_25_0_address0;
output   weight_buffer_25_0_ce0;
output   weight_buffer_25_0_we0;
output  [15:0] weight_buffer_25_0_d0;
output  [3:0] weight_buffer_25_1_address0;
output   weight_buffer_25_1_ce0;
output   weight_buffer_25_1_we0;
output  [15:0] weight_buffer_25_1_d0;
output  [3:0] weight_buffer_25_2_address0;
output   weight_buffer_25_2_ce0;
output   weight_buffer_25_2_we0;
output  [15:0] weight_buffer_25_2_d0;
output  [3:0] weight_buffer_25_3_address0;
output   weight_buffer_25_3_ce0;
output   weight_buffer_25_3_we0;
output  [15:0] weight_buffer_25_3_d0;
output  [3:0] weight_buffer_26_0_address0;
output   weight_buffer_26_0_ce0;
output   weight_buffer_26_0_we0;
output  [15:0] weight_buffer_26_0_d0;
output  [3:0] weight_buffer_26_1_address0;
output   weight_buffer_26_1_ce0;
output   weight_buffer_26_1_we0;
output  [15:0] weight_buffer_26_1_d0;
output  [3:0] weight_buffer_26_2_address0;
output   weight_buffer_26_2_ce0;
output   weight_buffer_26_2_we0;
output  [15:0] weight_buffer_26_2_d0;
output  [3:0] weight_buffer_26_3_address0;
output   weight_buffer_26_3_ce0;
output   weight_buffer_26_3_we0;
output  [15:0] weight_buffer_26_3_d0;
output  [3:0] weight_buffer_27_0_address0;
output   weight_buffer_27_0_ce0;
output   weight_buffer_27_0_we0;
output  [15:0] weight_buffer_27_0_d0;
output  [3:0] weight_buffer_27_1_address0;
output   weight_buffer_27_1_ce0;
output   weight_buffer_27_1_we0;
output  [15:0] weight_buffer_27_1_d0;
output  [3:0] weight_buffer_27_2_address0;
output   weight_buffer_27_2_ce0;
output   weight_buffer_27_2_we0;
output  [15:0] weight_buffer_27_2_d0;
output  [3:0] weight_buffer_27_3_address0;
output   weight_buffer_27_3_ce0;
output   weight_buffer_27_3_we0;
output  [15:0] weight_buffer_27_3_d0;
output  [3:0] weight_buffer_28_0_address0;
output   weight_buffer_28_0_ce0;
output   weight_buffer_28_0_we0;
output  [15:0] weight_buffer_28_0_d0;
output  [3:0] weight_buffer_28_1_address0;
output   weight_buffer_28_1_ce0;
output   weight_buffer_28_1_we0;
output  [15:0] weight_buffer_28_1_d0;
output  [3:0] weight_buffer_28_2_address0;
output   weight_buffer_28_2_ce0;
output   weight_buffer_28_2_we0;
output  [15:0] weight_buffer_28_2_d0;
output  [3:0] weight_buffer_28_3_address0;
output   weight_buffer_28_3_ce0;
output   weight_buffer_28_3_we0;
output  [15:0] weight_buffer_28_3_d0;
output  [3:0] weight_buffer_29_0_address0;
output   weight_buffer_29_0_ce0;
output   weight_buffer_29_0_we0;
output  [15:0] weight_buffer_29_0_d0;
output  [3:0] weight_buffer_29_1_address0;
output   weight_buffer_29_1_ce0;
output   weight_buffer_29_1_we0;
output  [15:0] weight_buffer_29_1_d0;
output  [3:0] weight_buffer_29_2_address0;
output   weight_buffer_29_2_ce0;
output   weight_buffer_29_2_we0;
output  [15:0] weight_buffer_29_2_d0;
output  [3:0] weight_buffer_29_3_address0;
output   weight_buffer_29_3_ce0;
output   weight_buffer_29_3_we0;
output  [15:0] weight_buffer_29_3_d0;
output  [3:0] weight_buffer_30_0_address0;
output   weight_buffer_30_0_ce0;
output   weight_buffer_30_0_we0;
output  [15:0] weight_buffer_30_0_d0;
output  [3:0] weight_buffer_30_1_address0;
output   weight_buffer_30_1_ce0;
output   weight_buffer_30_1_we0;
output  [15:0] weight_buffer_30_1_d0;
output  [3:0] weight_buffer_30_2_address0;
output   weight_buffer_30_2_ce0;
output   weight_buffer_30_2_we0;
output  [15:0] weight_buffer_30_2_d0;
output  [3:0] weight_buffer_30_3_address0;
output   weight_buffer_30_3_ce0;
output   weight_buffer_30_3_we0;
output  [15:0] weight_buffer_30_3_d0;
output  [3:0] weight_buffer_31_0_address0;
output   weight_buffer_31_0_ce0;
output   weight_buffer_31_0_we0;
output  [15:0] weight_buffer_31_0_d0;
output  [3:0] weight_buffer_31_1_address0;
output   weight_buffer_31_1_ce0;
output   weight_buffer_31_1_we0;
output  [15:0] weight_buffer_31_1_d0;
output  [3:0] weight_buffer_31_2_address0;
output   weight_buffer_31_2_ce0;
output   weight_buffer_31_2_we0;
output  [15:0] weight_buffer_31_2_d0;
output  [3:0] weight_buffer_31_3_address0;
output   weight_buffer_31_3_ce0;
output   weight_buffer_31_3_we0;
output  [15:0] weight_buffer_31_3_d0;
input  [2:0] t3_V;
input  [2:0] t4_V;
input  [5:0] TM_MIN_V;
input  [2:0] TN_MIN_V;
input   enable;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weight_memcpy_buffer_ce0;
reg weight_buffer_0_0_ce0;
reg weight_buffer_0_0_we0;
reg weight_buffer_0_1_ce0;
reg weight_buffer_0_1_we0;
reg weight_buffer_0_2_ce0;
reg weight_buffer_0_2_we0;
reg weight_buffer_0_3_ce0;
reg weight_buffer_0_3_we0;
reg weight_buffer_1_0_ce0;
reg weight_buffer_1_0_we0;
reg weight_buffer_1_1_ce0;
reg weight_buffer_1_1_we0;
reg weight_buffer_1_2_ce0;
reg weight_buffer_1_2_we0;
reg weight_buffer_1_3_ce0;
reg weight_buffer_1_3_we0;
reg weight_buffer_2_0_ce0;
reg weight_buffer_2_0_we0;
reg weight_buffer_2_1_ce0;
reg weight_buffer_2_1_we0;
reg weight_buffer_2_2_ce0;
reg weight_buffer_2_2_we0;
reg weight_buffer_2_3_ce0;
reg weight_buffer_2_3_we0;
reg weight_buffer_3_0_ce0;
reg weight_buffer_3_0_we0;
reg weight_buffer_3_1_ce0;
reg weight_buffer_3_1_we0;
reg weight_buffer_3_2_ce0;
reg weight_buffer_3_2_we0;
reg weight_buffer_3_3_ce0;
reg weight_buffer_3_3_we0;
reg weight_buffer_4_0_ce0;
reg weight_buffer_4_0_we0;
reg weight_buffer_4_1_ce0;
reg weight_buffer_4_1_we0;
reg weight_buffer_4_2_ce0;
reg weight_buffer_4_2_we0;
reg weight_buffer_4_3_ce0;
reg weight_buffer_4_3_we0;
reg weight_buffer_5_0_ce0;
reg weight_buffer_5_0_we0;
reg weight_buffer_5_1_ce0;
reg weight_buffer_5_1_we0;
reg weight_buffer_5_2_ce0;
reg weight_buffer_5_2_we0;
reg weight_buffer_5_3_ce0;
reg weight_buffer_5_3_we0;
reg weight_buffer_6_0_ce0;
reg weight_buffer_6_0_we0;
reg weight_buffer_6_1_ce0;
reg weight_buffer_6_1_we0;
reg weight_buffer_6_2_ce0;
reg weight_buffer_6_2_we0;
reg weight_buffer_6_3_ce0;
reg weight_buffer_6_3_we0;
reg weight_buffer_7_0_ce0;
reg weight_buffer_7_0_we0;
reg weight_buffer_7_1_ce0;
reg weight_buffer_7_1_we0;
reg weight_buffer_7_2_ce0;
reg weight_buffer_7_2_we0;
reg weight_buffer_7_3_ce0;
reg weight_buffer_7_3_we0;
reg weight_buffer_8_0_ce0;
reg weight_buffer_8_0_we0;
reg weight_buffer_8_1_ce0;
reg weight_buffer_8_1_we0;
reg weight_buffer_8_2_ce0;
reg weight_buffer_8_2_we0;
reg weight_buffer_8_3_ce0;
reg weight_buffer_8_3_we0;
reg weight_buffer_9_0_ce0;
reg weight_buffer_9_0_we0;
reg weight_buffer_9_1_ce0;
reg weight_buffer_9_1_we0;
reg weight_buffer_9_2_ce0;
reg weight_buffer_9_2_we0;
reg weight_buffer_9_3_ce0;
reg weight_buffer_9_3_we0;
reg weight_buffer_10_0_ce0;
reg weight_buffer_10_0_we0;
reg weight_buffer_10_1_ce0;
reg weight_buffer_10_1_we0;
reg weight_buffer_10_2_ce0;
reg weight_buffer_10_2_we0;
reg weight_buffer_10_3_ce0;
reg weight_buffer_10_3_we0;
reg weight_buffer_11_0_ce0;
reg weight_buffer_11_0_we0;
reg weight_buffer_11_1_ce0;
reg weight_buffer_11_1_we0;
reg weight_buffer_11_2_ce0;
reg weight_buffer_11_2_we0;
reg weight_buffer_11_3_ce0;
reg weight_buffer_11_3_we0;
reg weight_buffer_12_0_ce0;
reg weight_buffer_12_0_we0;
reg weight_buffer_12_1_ce0;
reg weight_buffer_12_1_we0;
reg weight_buffer_12_2_ce0;
reg weight_buffer_12_2_we0;
reg weight_buffer_12_3_ce0;
reg weight_buffer_12_3_we0;
reg weight_buffer_13_0_ce0;
reg weight_buffer_13_0_we0;
reg weight_buffer_13_1_ce0;
reg weight_buffer_13_1_we0;
reg weight_buffer_13_2_ce0;
reg weight_buffer_13_2_we0;
reg weight_buffer_13_3_ce0;
reg weight_buffer_13_3_we0;
reg weight_buffer_14_0_ce0;
reg weight_buffer_14_0_we0;
reg weight_buffer_14_1_ce0;
reg weight_buffer_14_1_we0;
reg weight_buffer_14_2_ce0;
reg weight_buffer_14_2_we0;
reg weight_buffer_14_3_ce0;
reg weight_buffer_14_3_we0;
reg weight_buffer_15_0_ce0;
reg weight_buffer_15_0_we0;
reg weight_buffer_15_1_ce0;
reg weight_buffer_15_1_we0;
reg weight_buffer_15_2_ce0;
reg weight_buffer_15_2_we0;
reg weight_buffer_15_3_ce0;
reg weight_buffer_15_3_we0;
reg weight_buffer_16_0_ce0;
reg weight_buffer_16_0_we0;
reg weight_buffer_16_1_ce0;
reg weight_buffer_16_1_we0;
reg weight_buffer_16_2_ce0;
reg weight_buffer_16_2_we0;
reg weight_buffer_16_3_ce0;
reg weight_buffer_16_3_we0;
reg weight_buffer_17_0_ce0;
reg weight_buffer_17_0_we0;
reg weight_buffer_17_1_ce0;
reg weight_buffer_17_1_we0;
reg weight_buffer_17_2_ce0;
reg weight_buffer_17_2_we0;
reg weight_buffer_17_3_ce0;
reg weight_buffer_17_3_we0;
reg weight_buffer_18_0_ce0;
reg weight_buffer_18_0_we0;
reg weight_buffer_18_1_ce0;
reg weight_buffer_18_1_we0;
reg weight_buffer_18_2_ce0;
reg weight_buffer_18_2_we0;
reg weight_buffer_18_3_ce0;
reg weight_buffer_18_3_we0;
reg weight_buffer_19_0_ce0;
reg weight_buffer_19_0_we0;
reg weight_buffer_19_1_ce0;
reg weight_buffer_19_1_we0;
reg weight_buffer_19_2_ce0;
reg weight_buffer_19_2_we0;
reg weight_buffer_19_3_ce0;
reg weight_buffer_19_3_we0;
reg weight_buffer_20_0_ce0;
reg weight_buffer_20_0_we0;
reg weight_buffer_20_1_ce0;
reg weight_buffer_20_1_we0;
reg weight_buffer_20_2_ce0;
reg weight_buffer_20_2_we0;
reg weight_buffer_20_3_ce0;
reg weight_buffer_20_3_we0;
reg weight_buffer_21_0_ce0;
reg weight_buffer_21_0_we0;
reg weight_buffer_21_1_ce0;
reg weight_buffer_21_1_we0;
reg weight_buffer_21_2_ce0;
reg weight_buffer_21_2_we0;
reg weight_buffer_21_3_ce0;
reg weight_buffer_21_3_we0;
reg weight_buffer_22_0_ce0;
reg weight_buffer_22_0_we0;
reg weight_buffer_22_1_ce0;
reg weight_buffer_22_1_we0;
reg weight_buffer_22_2_ce0;
reg weight_buffer_22_2_we0;
reg weight_buffer_22_3_ce0;
reg weight_buffer_22_3_we0;
reg weight_buffer_23_0_ce0;
reg weight_buffer_23_0_we0;
reg weight_buffer_23_1_ce0;
reg weight_buffer_23_1_we0;
reg weight_buffer_23_2_ce0;
reg weight_buffer_23_2_we0;
reg weight_buffer_23_3_ce0;
reg weight_buffer_23_3_we0;
reg weight_buffer_24_0_ce0;
reg weight_buffer_24_0_we0;
reg weight_buffer_24_1_ce0;
reg weight_buffer_24_1_we0;
reg weight_buffer_24_2_ce0;
reg weight_buffer_24_2_we0;
reg weight_buffer_24_3_ce0;
reg weight_buffer_24_3_we0;
reg weight_buffer_25_0_ce0;
reg weight_buffer_25_0_we0;
reg weight_buffer_25_1_ce0;
reg weight_buffer_25_1_we0;
reg weight_buffer_25_2_ce0;
reg weight_buffer_25_2_we0;
reg weight_buffer_25_3_ce0;
reg weight_buffer_25_3_we0;
reg weight_buffer_26_0_ce0;
reg weight_buffer_26_0_we0;
reg weight_buffer_26_1_ce0;
reg weight_buffer_26_1_we0;
reg weight_buffer_26_2_ce0;
reg weight_buffer_26_2_we0;
reg weight_buffer_26_3_ce0;
reg weight_buffer_26_3_we0;
reg weight_buffer_27_0_ce0;
reg weight_buffer_27_0_we0;
reg weight_buffer_27_1_ce0;
reg weight_buffer_27_1_we0;
reg weight_buffer_27_2_ce0;
reg weight_buffer_27_2_we0;
reg weight_buffer_27_3_ce0;
reg weight_buffer_27_3_we0;
reg weight_buffer_28_0_ce0;
reg weight_buffer_28_0_we0;
reg weight_buffer_28_1_ce0;
reg weight_buffer_28_1_we0;
reg weight_buffer_28_2_ce0;
reg weight_buffer_28_2_we0;
reg weight_buffer_28_3_ce0;
reg weight_buffer_28_3_we0;
reg weight_buffer_29_0_ce0;
reg weight_buffer_29_0_we0;
reg weight_buffer_29_1_ce0;
reg weight_buffer_29_1_we0;
reg weight_buffer_29_2_ce0;
reg weight_buffer_29_2_we0;
reg weight_buffer_29_3_ce0;
reg weight_buffer_29_3_we0;
reg weight_buffer_30_0_ce0;
reg weight_buffer_30_0_we0;
reg weight_buffer_30_1_ce0;
reg weight_buffer_30_1_we0;
reg weight_buffer_30_2_ce0;
reg weight_buffer_30_2_we0;
reg weight_buffer_30_3_ce0;
reg weight_buffer_30_3_we0;
reg weight_buffer_31_0_ce0;
reg weight_buffer_31_0_we0;
reg weight_buffer_31_1_ce0;
reg weight_buffer_31_1_we0;
reg weight_buffer_31_2_ce0;
reg weight_buffer_31_2_we0;
reg weight_buffer_31_3_ce0;
reg weight_buffer_31_3_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] indvar_flatten_reg_1977;
reg   [5:0] p_6_reg_1988;
reg   [2:0] p_9_reg_1999;
reg   [7:0] t_V_reg_2010;
reg   [1:0] p_084_1_reg_2021;
wire   [0:0] enable_read_read_fu_398_p2;
reg   [3:0] weight_buffer_0_0_s_reg_2569;
reg   [3:0] weight_buffer_0_1_s_reg_2574;
reg   [3:0] weight_buffer_0_2_s_reg_2579;
reg   [3:0] weight_buffer_0_3_s_reg_2584;
reg   [3:0] weight_buffer_1_0_s_reg_2589;
reg   [3:0] weight_buffer_1_1_s_reg_2594;
reg   [3:0] weight_buffer_1_2_s_reg_2599;
reg   [3:0] weight_buffer_1_3_s_reg_2604;
reg   [3:0] weight_buffer_2_0_s_reg_2609;
reg   [3:0] weight_buffer_2_1_s_reg_2614;
reg   [3:0] weight_buffer_2_2_s_reg_2619;
reg   [3:0] weight_buffer_2_3_s_reg_2624;
reg   [3:0] weight_buffer_3_0_s_reg_2629;
reg   [3:0] weight_buffer_3_1_s_reg_2634;
reg   [3:0] weight_buffer_3_2_s_reg_2639;
reg   [3:0] weight_buffer_3_3_s_reg_2644;
reg   [3:0] weight_buffer_4_0_s_reg_2649;
reg   [3:0] weight_buffer_4_1_s_reg_2654;
reg   [3:0] weight_buffer_4_2_s_reg_2659;
reg   [3:0] weight_buffer_4_3_s_reg_2664;
reg   [3:0] weight_buffer_5_0_s_reg_2669;
reg   [3:0] weight_buffer_5_1_s_reg_2674;
reg   [3:0] weight_buffer_5_2_s_reg_2679;
reg   [3:0] weight_buffer_5_3_s_reg_2684;
reg   [3:0] weight_buffer_6_0_s_reg_2689;
reg   [3:0] weight_buffer_6_1_s_reg_2694;
reg   [3:0] weight_buffer_6_2_s_reg_2699;
reg   [3:0] weight_buffer_6_3_s_reg_2704;
reg   [3:0] weight_buffer_7_0_s_reg_2709;
reg   [3:0] weight_buffer_7_1_s_reg_2714;
reg   [3:0] weight_buffer_7_2_s_reg_2719;
reg   [3:0] weight_buffer_7_3_s_reg_2724;
reg   [3:0] weight_buffer_8_0_s_reg_2729;
reg   [3:0] weight_buffer_8_1_s_reg_2734;
reg   [3:0] weight_buffer_8_2_s_reg_2739;
reg   [3:0] weight_buffer_8_3_s_reg_2744;
reg   [3:0] weight_buffer_9_0_s_reg_2749;
reg   [3:0] weight_buffer_9_1_s_reg_2754;
reg   [3:0] weight_buffer_9_2_s_reg_2759;
reg   [3:0] weight_buffer_9_3_s_reg_2764;
reg   [3:0] weight_buffer_10_0_1_reg_2769;
reg   [3:0] weight_buffer_10_1_1_reg_2774;
reg   [3:0] weight_buffer_10_2_1_reg_2779;
reg   [3:0] weight_buffer_10_3_1_reg_2784;
reg   [3:0] weight_buffer_11_0_1_reg_2789;
reg   [3:0] weight_buffer_11_1_1_reg_2794;
reg   [3:0] weight_buffer_11_2_1_reg_2799;
reg   [3:0] weight_buffer_11_3_1_reg_2804;
reg   [3:0] weight_buffer_12_0_1_reg_2809;
reg   [3:0] weight_buffer_12_1_1_reg_2814;
reg   [3:0] weight_buffer_12_2_1_reg_2819;
reg   [3:0] weight_buffer_12_3_1_reg_2824;
reg   [3:0] weight_buffer_13_0_1_reg_2829;
reg   [3:0] weight_buffer_13_1_1_reg_2834;
reg   [3:0] weight_buffer_13_2_1_reg_2839;
reg   [3:0] weight_buffer_13_3_1_reg_2844;
reg   [3:0] weight_buffer_14_0_1_reg_2849;
reg   [3:0] weight_buffer_14_1_1_reg_2854;
reg   [3:0] weight_buffer_14_2_1_reg_2859;
reg   [3:0] weight_buffer_14_3_1_reg_2864;
reg   [3:0] weight_buffer_15_0_1_reg_2869;
reg   [3:0] weight_buffer_15_1_1_reg_2874;
reg   [3:0] weight_buffer_15_2_1_reg_2879;
reg   [3:0] weight_buffer_15_3_1_reg_2884;
reg   [3:0] weight_buffer_16_0_1_reg_2889;
reg   [3:0] weight_buffer_16_1_1_reg_2894;
reg   [3:0] weight_buffer_16_2_1_reg_2899;
reg   [3:0] weight_buffer_16_3_1_reg_2904;
reg   [3:0] weight_buffer_17_0_1_reg_2909;
reg   [3:0] weight_buffer_17_1_1_reg_2914;
reg   [3:0] weight_buffer_17_2_1_reg_2919;
reg   [3:0] weight_buffer_17_3_1_reg_2924;
reg   [3:0] weight_buffer_18_0_1_reg_2929;
reg   [3:0] weight_buffer_18_1_1_reg_2934;
reg   [3:0] weight_buffer_18_2_1_reg_2939;
reg   [3:0] weight_buffer_18_3_1_reg_2944;
reg   [3:0] weight_buffer_19_0_1_reg_2949;
reg   [3:0] weight_buffer_19_1_1_reg_2954;
reg   [3:0] weight_buffer_19_2_1_reg_2959;
reg   [3:0] weight_buffer_19_3_1_reg_2964;
reg   [3:0] weight_buffer_20_0_1_reg_2969;
reg   [3:0] weight_buffer_20_1_1_reg_2974;
reg   [3:0] weight_buffer_20_2_1_reg_2979;
reg   [3:0] weight_buffer_20_3_1_reg_2984;
reg   [3:0] weight_buffer_21_0_1_reg_2989;
reg   [3:0] weight_buffer_21_1_1_reg_2994;
reg   [3:0] weight_buffer_21_2_1_reg_2999;
reg   [3:0] weight_buffer_21_3_1_reg_3004;
reg   [3:0] weight_buffer_22_0_1_reg_3009;
reg   [3:0] weight_buffer_22_1_1_reg_3014;
reg   [3:0] weight_buffer_22_2_1_reg_3019;
reg   [3:0] weight_buffer_22_3_1_reg_3024;
reg   [3:0] weight_buffer_23_0_1_reg_3029;
reg   [3:0] weight_buffer_23_1_1_reg_3034;
reg   [3:0] weight_buffer_23_2_1_reg_3039;
reg   [3:0] weight_buffer_23_3_1_reg_3044;
reg   [3:0] weight_buffer_24_0_1_reg_3049;
reg   [3:0] weight_buffer_24_1_1_reg_3054;
reg   [3:0] weight_buffer_24_2_1_reg_3059;
reg   [3:0] weight_buffer_24_3_1_reg_3064;
reg   [3:0] weight_buffer_25_0_1_reg_3069;
reg   [3:0] weight_buffer_25_1_1_reg_3074;
reg   [3:0] weight_buffer_25_2_1_reg_3079;
reg   [3:0] weight_buffer_25_3_1_reg_3084;
reg   [3:0] weight_buffer_26_0_1_reg_3089;
reg   [3:0] weight_buffer_26_1_1_reg_3094;
reg   [3:0] weight_buffer_26_2_1_reg_3099;
reg   [3:0] weight_buffer_26_3_1_reg_3104;
reg   [3:0] weight_buffer_27_0_1_reg_3109;
reg   [3:0] weight_buffer_27_1_1_reg_3114;
reg   [3:0] weight_buffer_27_2_1_reg_3119;
reg   [3:0] weight_buffer_27_3_1_reg_3124;
reg   [3:0] weight_buffer_28_0_1_reg_3129;
reg   [3:0] weight_buffer_28_1_1_reg_3134;
reg   [3:0] weight_buffer_28_2_1_reg_3139;
reg   [3:0] weight_buffer_28_3_1_reg_3144;
reg   [3:0] weight_buffer_29_0_1_reg_3149;
reg   [3:0] weight_buffer_29_1_1_reg_3154;
reg   [3:0] weight_buffer_29_2_1_reg_3159;
reg   [3:0] weight_buffer_29_3_1_reg_3164;
reg   [3:0] weight_buffer_30_0_1_reg_3169;
reg   [3:0] weight_buffer_30_1_1_reg_3174;
reg   [3:0] weight_buffer_30_2_1_reg_3179;
reg   [3:0] weight_buffer_30_3_1_reg_3184;
reg   [3:0] weight_buffer_31_0_1_reg_3189;
reg   [3:0] weight_buffer_31_1_1_reg_3194;
reg   [3:0] weight_buffer_31_2_1_reg_3199;
reg   [3:0] weight_buffer_31_3_1_reg_3204;
wire   [0:0] exitcond_flatten_fu_2193_p2;
reg   [0:0] exitcond_flatten_reg_3209;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [7:0] indvar_flatten_next_fu_2199_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [5:0] p_14_t_mid2_v_fu_2243_p3;
reg   [5:0] p_14_t_mid2_v_reg_3218;
wire   [4:0] tmp_fu_2251_p1;
reg   [4:0] tmp_reg_3223;
wire   [0:0] or_cond_fu_2260_p2;
reg   [0:0] or_cond_reg_3227;
wire   [0:0] tmp_36_fu_2266_p2;
reg   [0:0] tmp_36_reg_3234;
wire   [7:0] weight_memcpy_offset_2_fu_2311_p3;
wire   [1:0] p_084_3_fu_2319_p3;
reg   [1:0] p_084_3_reg_3250;
wire   [1:0] tmp_65_fu_2327_p1;
reg   [1:0] tmp_65_reg_3255;
wire   [2:0] t2_V_fu_2331_p2;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg   [5:0] ap_phi_mux_p_6_phi_fu_1992_p4;
wire    ap_block_pp0_stage0;
reg   [1:0] ap_phi_mux_p_084_1_phi_fu_2025_p4;
wire  signed [63:0] tmp_53_cast_fu_2061_p1;
wire   [63:0] tmp_37_fu_2272_p1;
reg   [15:0] input_array_0_fu_390;
wire   [15:0] input_array_0_2_fu_2390_p3;
reg   [15:0] input_array_1_3_fu_394;
wire   [15:0] input_array_1_2_fu_2383_p3;
wire   [15:0] input_value1_fu_2397_p3;
wire   [4:0] tmp_s_fu_2041_p3;
wire   [4:0] tmp_cast_26_fu_2037_p1;
wire   [4:0] tmp_33_fu_2049_p2;
wire   [4:0] tmp_cast_fu_2033_p1;
wire   [4:0] tmp_34_fu_2055_p2;
wire   [0:0] exitcond_fu_2211_p2;
wire   [5:0] t1_V_fu_2205_p2;
wire   [0:0] tmp_47_mid1_fu_2225_p2;
wire   [0:0] tmp_35_fu_2230_p2;
wire   [2:0] p_9_mid2_fu_2217_p3;
wire   [0:0] tmp_47_mid2_fu_2235_p3;
wire   [0:0] Enable_fu_2255_p2;
wire   [7:0] weight_memcpy_offset_fu_2277_p2;
wire   [1:0] cnt_V_fu_2291_p2;
wire   [0:0] tmp_38_fu_2297_p2;
wire   [7:0] weight_memcpy_offset_1_fu_2283_p3;
wire   [1:0] p_s_fu_2303_p3;
wire   [15:0] input_array_1_fu_2347_p4;
wire   [15:0] input_array_0_3_fu_2343_p1;
wire   [0:0] tmp_64_fu_2371_p1;
wire   [15:0] input_array_1_1_fu_2357_p3;
wire   [15:0] input_array_0_1_fu_2364_p3;
wire   [15:0] input_value_fu_2375_p3;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((enable_read_read_fu_398_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((enable_read_read_fu_398_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_2193_p2 == 1'd0))) begin
        indvar_flatten_reg_1977 <= indvar_flatten_next_fu_2199_p2;
    end else if (((enable_read_read_fu_398_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_1977 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_3209 == 1'd0))) begin
        p_084_1_reg_2021 <= p_084_3_reg_3250;
    end else if (((enable_read_read_fu_398_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_084_1_reg_2021 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_3209 == 1'd0))) begin
        p_6_reg_1988 <= p_14_t_mid2_v_reg_3218;
    end else if (((enable_read_read_fu_398_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_6_reg_1988 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_2193_p2 == 1'd0))) begin
        p_9_reg_1999 <= t2_V_fu_2331_p2;
    end else if (((enable_read_read_fu_398_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_9_reg_1999 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_2193_p2 == 1'd0))) begin
        t_V_reg_2010 <= weight_memcpy_offset_2_fu_2311_p3;
    end else if (((enable_read_read_fu_398_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_2010 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten_reg_3209 <= exitcond_flatten_fu_2193_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_3209 == 1'd0))) begin
        input_array_0_fu_390 <= input_array_0_2_fu_2390_p3;
        input_array_1_3_fu_394 <= input_array_1_2_fu_2383_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_2193_p2 == 1'd0))) begin
        or_cond_reg_3227 <= or_cond_fu_2260_p2;
        tmp_36_reg_3234 <= tmp_36_fu_2266_p2;
        tmp_65_reg_3255 <= tmp_65_fu_2327_p1;
        tmp_reg_3223 <= tmp_fu_2251_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_2193_p2 == 1'd0))) begin
        p_084_3_reg_3250 <= p_084_3_fu_2319_p3;
        p_14_t_mid2_v_reg_3218 <= p_14_t_mid2_v_fu_2243_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((enable_read_read_fu_398_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        weight_buffer_0_0_s_reg_2569 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_0_1_s_reg_2574 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_0_2_s_reg_2579 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_0_3_s_reg_2584 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_10_0_1_reg_2769 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_10_1_1_reg_2774 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_10_2_1_reg_2779 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_10_3_1_reg_2784 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_11_0_1_reg_2789 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_11_1_1_reg_2794 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_11_2_1_reg_2799 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_11_3_1_reg_2804 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_12_0_1_reg_2809 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_12_1_1_reg_2814 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_12_2_1_reg_2819 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_12_3_1_reg_2824 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_13_0_1_reg_2829 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_13_1_1_reg_2834 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_13_2_1_reg_2839 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_13_3_1_reg_2844 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_14_0_1_reg_2849 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_14_1_1_reg_2854 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_14_2_1_reg_2859 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_14_3_1_reg_2864 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_15_0_1_reg_2869 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_15_1_1_reg_2874 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_15_2_1_reg_2879 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_15_3_1_reg_2884 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_16_0_1_reg_2889 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_16_1_1_reg_2894 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_16_2_1_reg_2899 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_16_3_1_reg_2904 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_17_0_1_reg_2909 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_17_1_1_reg_2914 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_17_2_1_reg_2919 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_17_3_1_reg_2924 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_18_0_1_reg_2929 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_18_1_1_reg_2934 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_18_2_1_reg_2939 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_18_3_1_reg_2944 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_19_0_1_reg_2949 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_19_1_1_reg_2954 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_19_2_1_reg_2959 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_19_3_1_reg_2964 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_1_0_s_reg_2589 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_1_1_s_reg_2594 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_1_2_s_reg_2599 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_1_3_s_reg_2604 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_20_0_1_reg_2969 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_20_1_1_reg_2974 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_20_2_1_reg_2979 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_20_3_1_reg_2984 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_21_0_1_reg_2989 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_21_1_1_reg_2994 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_21_2_1_reg_2999 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_21_3_1_reg_3004 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_22_0_1_reg_3009 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_22_1_1_reg_3014 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_22_2_1_reg_3019 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_22_3_1_reg_3024 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_23_0_1_reg_3029 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_23_1_1_reg_3034 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_23_2_1_reg_3039 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_23_3_1_reg_3044 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_24_0_1_reg_3049 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_24_1_1_reg_3054 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_24_2_1_reg_3059 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_24_3_1_reg_3064 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_25_0_1_reg_3069 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_25_1_1_reg_3074 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_25_2_1_reg_3079 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_25_3_1_reg_3084 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_26_0_1_reg_3089 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_26_1_1_reg_3094 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_26_2_1_reg_3099 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_26_3_1_reg_3104 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_27_0_1_reg_3109 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_27_1_1_reg_3114 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_27_2_1_reg_3119 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_27_3_1_reg_3124 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_28_0_1_reg_3129 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_28_1_1_reg_3134 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_28_2_1_reg_3139 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_28_3_1_reg_3144 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_29_0_1_reg_3149 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_29_1_1_reg_3154 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_29_2_1_reg_3159 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_29_3_1_reg_3164 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_2_0_s_reg_2609 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_2_1_s_reg_2614 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_2_2_s_reg_2619 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_2_3_s_reg_2624 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_30_0_1_reg_3169 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_30_1_1_reg_3174 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_30_2_1_reg_3179 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_30_3_1_reg_3184 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_31_0_1_reg_3189 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_31_1_1_reg_3194 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_31_2_1_reg_3199 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_31_3_1_reg_3204 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_3_0_s_reg_2629 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_3_1_s_reg_2634 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_3_2_s_reg_2639 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_3_3_s_reg_2644 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_4_0_s_reg_2649 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_4_1_s_reg_2654 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_4_2_s_reg_2659 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_4_3_s_reg_2664 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_5_0_s_reg_2669 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_5_1_s_reg_2674 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_5_2_s_reg_2679 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_5_3_s_reg_2684 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_6_0_s_reg_2689 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_6_1_s_reg_2694 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_6_2_s_reg_2699 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_6_3_s_reg_2704 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_7_0_s_reg_2709 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_7_1_s_reg_2714 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_7_2_s_reg_2719 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_7_3_s_reg_2724 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_8_0_s_reg_2729 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_8_1_s_reg_2734 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_8_2_s_reg_2739 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_8_3_s_reg_2744 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_9_0_s_reg_2749 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_9_1_s_reg_2754 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_9_2_s_reg_2759 <= tmp_53_cast_fu_2061_p1;
        weight_buffer_9_3_s_reg_2764 <= tmp_53_cast_fu_2061_p1;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_2193_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_reg_3209 == 1'd0))) begin
        ap_phi_mux_p_084_1_phi_fu_2025_p4 = p_084_3_reg_3250;
    end else begin
        ap_phi_mux_p_084_1_phi_fu_2025_p4 = p_084_1_reg_2021;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_reg_3209 == 1'd0))) begin
        ap_phi_mux_p_6_phi_fu_1992_p4 = p_14_t_mid2_v_reg_3218;
    end else begin
        ap_phi_mux_p_6_phi_fu_1992_p4 = p_6_reg_1988;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_0_0_ce0 = 1'b1;
    end else begin
        weight_buffer_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd0) & (tmp_reg_3223 == 5'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_0_0_we0 = 1'b1;
    end else begin
        weight_buffer_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_0_1_ce0 = 1'b1;
    end else begin
        weight_buffer_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd1) & (tmp_reg_3223 == 5'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_0_1_we0 = 1'b1;
    end else begin
        weight_buffer_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_0_2_ce0 = 1'b1;
    end else begin
        weight_buffer_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd2) & (tmp_reg_3223 == 5'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_0_2_we0 = 1'b1;
    end else begin
        weight_buffer_0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_0_3_ce0 = 1'b1;
    end else begin
        weight_buffer_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd3) & (tmp_reg_3223 == 5'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_0_3_we0 = 1'b1;
    end else begin
        weight_buffer_0_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_10_0_ce0 = 1'b1;
    end else begin
        weight_buffer_10_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd0) & (tmp_reg_3223 == 5'd10) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_10_0_we0 = 1'b1;
    end else begin
        weight_buffer_10_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_10_1_ce0 = 1'b1;
    end else begin
        weight_buffer_10_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd1) & (tmp_reg_3223 == 5'd10) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_10_1_we0 = 1'b1;
    end else begin
        weight_buffer_10_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_10_2_ce0 = 1'b1;
    end else begin
        weight_buffer_10_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd2) & (tmp_reg_3223 == 5'd10) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_10_2_we0 = 1'b1;
    end else begin
        weight_buffer_10_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_10_3_ce0 = 1'b1;
    end else begin
        weight_buffer_10_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd3) & (tmp_reg_3223 == 5'd10) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_10_3_we0 = 1'b1;
    end else begin
        weight_buffer_10_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_11_0_ce0 = 1'b1;
    end else begin
        weight_buffer_11_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd0) & (tmp_reg_3223 == 5'd11) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_11_0_we0 = 1'b1;
    end else begin
        weight_buffer_11_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_11_1_ce0 = 1'b1;
    end else begin
        weight_buffer_11_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd1) & (tmp_reg_3223 == 5'd11) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_11_1_we0 = 1'b1;
    end else begin
        weight_buffer_11_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_11_2_ce0 = 1'b1;
    end else begin
        weight_buffer_11_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd2) & (tmp_reg_3223 == 5'd11) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_11_2_we0 = 1'b1;
    end else begin
        weight_buffer_11_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_11_3_ce0 = 1'b1;
    end else begin
        weight_buffer_11_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd3) & (tmp_reg_3223 == 5'd11) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_11_3_we0 = 1'b1;
    end else begin
        weight_buffer_11_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_12_0_ce0 = 1'b1;
    end else begin
        weight_buffer_12_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd0) & (tmp_reg_3223 == 5'd12) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_12_0_we0 = 1'b1;
    end else begin
        weight_buffer_12_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_12_1_ce0 = 1'b1;
    end else begin
        weight_buffer_12_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd1) & (tmp_reg_3223 == 5'd12) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_12_1_we0 = 1'b1;
    end else begin
        weight_buffer_12_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_12_2_ce0 = 1'b1;
    end else begin
        weight_buffer_12_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd2) & (tmp_reg_3223 == 5'd12) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_12_2_we0 = 1'b1;
    end else begin
        weight_buffer_12_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_12_3_ce0 = 1'b1;
    end else begin
        weight_buffer_12_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd3) & (tmp_reg_3223 == 5'd12) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_12_3_we0 = 1'b1;
    end else begin
        weight_buffer_12_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_13_0_ce0 = 1'b1;
    end else begin
        weight_buffer_13_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd0) & (tmp_reg_3223 == 5'd13) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_13_0_we0 = 1'b1;
    end else begin
        weight_buffer_13_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_13_1_ce0 = 1'b1;
    end else begin
        weight_buffer_13_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd1) & (tmp_reg_3223 == 5'd13) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_13_1_we0 = 1'b1;
    end else begin
        weight_buffer_13_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_13_2_ce0 = 1'b1;
    end else begin
        weight_buffer_13_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd2) & (tmp_reg_3223 == 5'd13) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_13_2_we0 = 1'b1;
    end else begin
        weight_buffer_13_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_13_3_ce0 = 1'b1;
    end else begin
        weight_buffer_13_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd3) & (tmp_reg_3223 == 5'd13) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_13_3_we0 = 1'b1;
    end else begin
        weight_buffer_13_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_14_0_ce0 = 1'b1;
    end else begin
        weight_buffer_14_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd0) & (tmp_reg_3223 == 5'd14) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_14_0_we0 = 1'b1;
    end else begin
        weight_buffer_14_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_14_1_ce0 = 1'b1;
    end else begin
        weight_buffer_14_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd1) & (tmp_reg_3223 == 5'd14) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_14_1_we0 = 1'b1;
    end else begin
        weight_buffer_14_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_14_2_ce0 = 1'b1;
    end else begin
        weight_buffer_14_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd2) & (tmp_reg_3223 == 5'd14) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_14_2_we0 = 1'b1;
    end else begin
        weight_buffer_14_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_14_3_ce0 = 1'b1;
    end else begin
        weight_buffer_14_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd3) & (tmp_reg_3223 == 5'd14) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_14_3_we0 = 1'b1;
    end else begin
        weight_buffer_14_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_15_0_ce0 = 1'b1;
    end else begin
        weight_buffer_15_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd0) & (tmp_reg_3223 == 5'd15) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_15_0_we0 = 1'b1;
    end else begin
        weight_buffer_15_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_15_1_ce0 = 1'b1;
    end else begin
        weight_buffer_15_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd1) & (tmp_reg_3223 == 5'd15) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_15_1_we0 = 1'b1;
    end else begin
        weight_buffer_15_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_15_2_ce0 = 1'b1;
    end else begin
        weight_buffer_15_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd2) & (tmp_reg_3223 == 5'd15) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_15_2_we0 = 1'b1;
    end else begin
        weight_buffer_15_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_15_3_ce0 = 1'b1;
    end else begin
        weight_buffer_15_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd3) & (tmp_reg_3223 == 5'd15) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_15_3_we0 = 1'b1;
    end else begin
        weight_buffer_15_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_16_0_ce0 = 1'b1;
    end else begin
        weight_buffer_16_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd0) & (tmp_reg_3223 == 5'd16) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_16_0_we0 = 1'b1;
    end else begin
        weight_buffer_16_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_16_1_ce0 = 1'b1;
    end else begin
        weight_buffer_16_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd1) & (tmp_reg_3223 == 5'd16) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_16_1_we0 = 1'b1;
    end else begin
        weight_buffer_16_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_16_2_ce0 = 1'b1;
    end else begin
        weight_buffer_16_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd2) & (tmp_reg_3223 == 5'd16) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_16_2_we0 = 1'b1;
    end else begin
        weight_buffer_16_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_16_3_ce0 = 1'b1;
    end else begin
        weight_buffer_16_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd3) & (tmp_reg_3223 == 5'd16) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_16_3_we0 = 1'b1;
    end else begin
        weight_buffer_16_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_17_0_ce0 = 1'b1;
    end else begin
        weight_buffer_17_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd0) & (tmp_reg_3223 == 5'd17) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_17_0_we0 = 1'b1;
    end else begin
        weight_buffer_17_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_17_1_ce0 = 1'b1;
    end else begin
        weight_buffer_17_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd1) & (tmp_reg_3223 == 5'd17) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_17_1_we0 = 1'b1;
    end else begin
        weight_buffer_17_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_17_2_ce0 = 1'b1;
    end else begin
        weight_buffer_17_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd2) & (tmp_reg_3223 == 5'd17) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_17_2_we0 = 1'b1;
    end else begin
        weight_buffer_17_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_17_3_ce0 = 1'b1;
    end else begin
        weight_buffer_17_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd3) & (tmp_reg_3223 == 5'd17) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_17_3_we0 = 1'b1;
    end else begin
        weight_buffer_17_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_18_0_ce0 = 1'b1;
    end else begin
        weight_buffer_18_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd0) & (tmp_reg_3223 == 5'd18) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_18_0_we0 = 1'b1;
    end else begin
        weight_buffer_18_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_18_1_ce0 = 1'b1;
    end else begin
        weight_buffer_18_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd1) & (tmp_reg_3223 == 5'd18) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_18_1_we0 = 1'b1;
    end else begin
        weight_buffer_18_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_18_2_ce0 = 1'b1;
    end else begin
        weight_buffer_18_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd2) & (tmp_reg_3223 == 5'd18) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_18_2_we0 = 1'b1;
    end else begin
        weight_buffer_18_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_18_3_ce0 = 1'b1;
    end else begin
        weight_buffer_18_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd3) & (tmp_reg_3223 == 5'd18) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_18_3_we0 = 1'b1;
    end else begin
        weight_buffer_18_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_19_0_ce0 = 1'b1;
    end else begin
        weight_buffer_19_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd0) & (tmp_reg_3223 == 5'd19) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_19_0_we0 = 1'b1;
    end else begin
        weight_buffer_19_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_19_1_ce0 = 1'b1;
    end else begin
        weight_buffer_19_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd1) & (tmp_reg_3223 == 5'd19) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_19_1_we0 = 1'b1;
    end else begin
        weight_buffer_19_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_19_2_ce0 = 1'b1;
    end else begin
        weight_buffer_19_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd2) & (tmp_reg_3223 == 5'd19) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_19_2_we0 = 1'b1;
    end else begin
        weight_buffer_19_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_19_3_ce0 = 1'b1;
    end else begin
        weight_buffer_19_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd3) & (tmp_reg_3223 == 5'd19) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_19_3_we0 = 1'b1;
    end else begin
        weight_buffer_19_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_1_0_ce0 = 1'b1;
    end else begin
        weight_buffer_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd0) & (tmp_reg_3223 == 5'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_1_0_we0 = 1'b1;
    end else begin
        weight_buffer_1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_1_1_ce0 = 1'b1;
    end else begin
        weight_buffer_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd1) & (tmp_reg_3223 == 5'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_1_1_we0 = 1'b1;
    end else begin
        weight_buffer_1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_1_2_ce0 = 1'b1;
    end else begin
        weight_buffer_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd2) & (tmp_reg_3223 == 5'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_1_2_we0 = 1'b1;
    end else begin
        weight_buffer_1_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_1_3_ce0 = 1'b1;
    end else begin
        weight_buffer_1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd3) & (tmp_reg_3223 == 5'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_1_3_we0 = 1'b1;
    end else begin
        weight_buffer_1_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_20_0_ce0 = 1'b1;
    end else begin
        weight_buffer_20_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd0) & (tmp_reg_3223 == 5'd20) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_20_0_we0 = 1'b1;
    end else begin
        weight_buffer_20_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_20_1_ce0 = 1'b1;
    end else begin
        weight_buffer_20_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd1) & (tmp_reg_3223 == 5'd20) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_20_1_we0 = 1'b1;
    end else begin
        weight_buffer_20_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_20_2_ce0 = 1'b1;
    end else begin
        weight_buffer_20_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd2) & (tmp_reg_3223 == 5'd20) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_20_2_we0 = 1'b1;
    end else begin
        weight_buffer_20_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_20_3_ce0 = 1'b1;
    end else begin
        weight_buffer_20_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd3) & (tmp_reg_3223 == 5'd20) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_20_3_we0 = 1'b1;
    end else begin
        weight_buffer_20_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_21_0_ce0 = 1'b1;
    end else begin
        weight_buffer_21_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd0) & (tmp_reg_3223 == 5'd21) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_21_0_we0 = 1'b1;
    end else begin
        weight_buffer_21_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_21_1_ce0 = 1'b1;
    end else begin
        weight_buffer_21_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd1) & (tmp_reg_3223 == 5'd21) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_21_1_we0 = 1'b1;
    end else begin
        weight_buffer_21_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_21_2_ce0 = 1'b1;
    end else begin
        weight_buffer_21_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd2) & (tmp_reg_3223 == 5'd21) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_21_2_we0 = 1'b1;
    end else begin
        weight_buffer_21_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_21_3_ce0 = 1'b1;
    end else begin
        weight_buffer_21_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd3) & (tmp_reg_3223 == 5'd21) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_21_3_we0 = 1'b1;
    end else begin
        weight_buffer_21_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_22_0_ce0 = 1'b1;
    end else begin
        weight_buffer_22_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd0) & (tmp_reg_3223 == 5'd22) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_22_0_we0 = 1'b1;
    end else begin
        weight_buffer_22_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_22_1_ce0 = 1'b1;
    end else begin
        weight_buffer_22_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd1) & (tmp_reg_3223 == 5'd22) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_22_1_we0 = 1'b1;
    end else begin
        weight_buffer_22_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_22_2_ce0 = 1'b1;
    end else begin
        weight_buffer_22_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd2) & (tmp_reg_3223 == 5'd22) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_22_2_we0 = 1'b1;
    end else begin
        weight_buffer_22_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_22_3_ce0 = 1'b1;
    end else begin
        weight_buffer_22_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd3) & (tmp_reg_3223 == 5'd22) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_22_3_we0 = 1'b1;
    end else begin
        weight_buffer_22_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_23_0_ce0 = 1'b1;
    end else begin
        weight_buffer_23_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd0) & (tmp_reg_3223 == 5'd23) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_23_0_we0 = 1'b1;
    end else begin
        weight_buffer_23_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_23_1_ce0 = 1'b1;
    end else begin
        weight_buffer_23_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd1) & (tmp_reg_3223 == 5'd23) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_23_1_we0 = 1'b1;
    end else begin
        weight_buffer_23_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_23_2_ce0 = 1'b1;
    end else begin
        weight_buffer_23_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd2) & (tmp_reg_3223 == 5'd23) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_23_2_we0 = 1'b1;
    end else begin
        weight_buffer_23_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_23_3_ce0 = 1'b1;
    end else begin
        weight_buffer_23_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd3) & (tmp_reg_3223 == 5'd23) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_23_3_we0 = 1'b1;
    end else begin
        weight_buffer_23_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_24_0_ce0 = 1'b1;
    end else begin
        weight_buffer_24_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd0) & (tmp_reg_3223 == 5'd24) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_24_0_we0 = 1'b1;
    end else begin
        weight_buffer_24_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_24_1_ce0 = 1'b1;
    end else begin
        weight_buffer_24_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd1) & (tmp_reg_3223 == 5'd24) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_24_1_we0 = 1'b1;
    end else begin
        weight_buffer_24_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_24_2_ce0 = 1'b1;
    end else begin
        weight_buffer_24_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd2) & (tmp_reg_3223 == 5'd24) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_24_2_we0 = 1'b1;
    end else begin
        weight_buffer_24_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_24_3_ce0 = 1'b1;
    end else begin
        weight_buffer_24_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd3) & (tmp_reg_3223 == 5'd24) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_24_3_we0 = 1'b1;
    end else begin
        weight_buffer_24_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_25_0_ce0 = 1'b1;
    end else begin
        weight_buffer_25_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd0) & (tmp_reg_3223 == 5'd25) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_25_0_we0 = 1'b1;
    end else begin
        weight_buffer_25_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_25_1_ce0 = 1'b1;
    end else begin
        weight_buffer_25_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd1) & (tmp_reg_3223 == 5'd25) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_25_1_we0 = 1'b1;
    end else begin
        weight_buffer_25_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_25_2_ce0 = 1'b1;
    end else begin
        weight_buffer_25_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd2) & (tmp_reg_3223 == 5'd25) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_25_2_we0 = 1'b1;
    end else begin
        weight_buffer_25_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_25_3_ce0 = 1'b1;
    end else begin
        weight_buffer_25_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd3) & (tmp_reg_3223 == 5'd25) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_25_3_we0 = 1'b1;
    end else begin
        weight_buffer_25_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_26_0_ce0 = 1'b1;
    end else begin
        weight_buffer_26_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd0) & (tmp_reg_3223 == 5'd26) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_26_0_we0 = 1'b1;
    end else begin
        weight_buffer_26_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_26_1_ce0 = 1'b1;
    end else begin
        weight_buffer_26_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd1) & (tmp_reg_3223 == 5'd26) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_26_1_we0 = 1'b1;
    end else begin
        weight_buffer_26_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_26_2_ce0 = 1'b1;
    end else begin
        weight_buffer_26_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd2) & (tmp_reg_3223 == 5'd26) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_26_2_we0 = 1'b1;
    end else begin
        weight_buffer_26_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_26_3_ce0 = 1'b1;
    end else begin
        weight_buffer_26_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd3) & (tmp_reg_3223 == 5'd26) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_26_3_we0 = 1'b1;
    end else begin
        weight_buffer_26_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_27_0_ce0 = 1'b1;
    end else begin
        weight_buffer_27_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd0) & (tmp_reg_3223 == 5'd27) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_27_0_we0 = 1'b1;
    end else begin
        weight_buffer_27_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_27_1_ce0 = 1'b1;
    end else begin
        weight_buffer_27_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd1) & (tmp_reg_3223 == 5'd27) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_27_1_we0 = 1'b1;
    end else begin
        weight_buffer_27_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_27_2_ce0 = 1'b1;
    end else begin
        weight_buffer_27_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd2) & (tmp_reg_3223 == 5'd27) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_27_2_we0 = 1'b1;
    end else begin
        weight_buffer_27_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_27_3_ce0 = 1'b1;
    end else begin
        weight_buffer_27_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd3) & (tmp_reg_3223 == 5'd27) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_27_3_we0 = 1'b1;
    end else begin
        weight_buffer_27_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_28_0_ce0 = 1'b1;
    end else begin
        weight_buffer_28_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd0) & (tmp_reg_3223 == 5'd28) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_28_0_we0 = 1'b1;
    end else begin
        weight_buffer_28_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_28_1_ce0 = 1'b1;
    end else begin
        weight_buffer_28_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd1) & (tmp_reg_3223 == 5'd28) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_28_1_we0 = 1'b1;
    end else begin
        weight_buffer_28_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_28_2_ce0 = 1'b1;
    end else begin
        weight_buffer_28_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd2) & (tmp_reg_3223 == 5'd28) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_28_2_we0 = 1'b1;
    end else begin
        weight_buffer_28_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_28_3_ce0 = 1'b1;
    end else begin
        weight_buffer_28_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd3) & (tmp_reg_3223 == 5'd28) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_28_3_we0 = 1'b1;
    end else begin
        weight_buffer_28_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_29_0_ce0 = 1'b1;
    end else begin
        weight_buffer_29_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd0) & (tmp_reg_3223 == 5'd29) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_29_0_we0 = 1'b1;
    end else begin
        weight_buffer_29_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_29_1_ce0 = 1'b1;
    end else begin
        weight_buffer_29_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd1) & (tmp_reg_3223 == 5'd29) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_29_1_we0 = 1'b1;
    end else begin
        weight_buffer_29_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_29_2_ce0 = 1'b1;
    end else begin
        weight_buffer_29_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd2) & (tmp_reg_3223 == 5'd29) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_29_2_we0 = 1'b1;
    end else begin
        weight_buffer_29_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_29_3_ce0 = 1'b1;
    end else begin
        weight_buffer_29_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd3) & (tmp_reg_3223 == 5'd29) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_29_3_we0 = 1'b1;
    end else begin
        weight_buffer_29_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_2_0_ce0 = 1'b1;
    end else begin
        weight_buffer_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd0) & (tmp_reg_3223 == 5'd2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_2_0_we0 = 1'b1;
    end else begin
        weight_buffer_2_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_2_1_ce0 = 1'b1;
    end else begin
        weight_buffer_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd1) & (tmp_reg_3223 == 5'd2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_2_1_we0 = 1'b1;
    end else begin
        weight_buffer_2_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_2_2_ce0 = 1'b1;
    end else begin
        weight_buffer_2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd2) & (tmp_reg_3223 == 5'd2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_2_2_we0 = 1'b1;
    end else begin
        weight_buffer_2_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_2_3_ce0 = 1'b1;
    end else begin
        weight_buffer_2_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd3) & (tmp_reg_3223 == 5'd2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_2_3_we0 = 1'b1;
    end else begin
        weight_buffer_2_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_30_0_ce0 = 1'b1;
    end else begin
        weight_buffer_30_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd0) & (tmp_reg_3223 == 5'd30) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_30_0_we0 = 1'b1;
    end else begin
        weight_buffer_30_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_30_1_ce0 = 1'b1;
    end else begin
        weight_buffer_30_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd1) & (tmp_reg_3223 == 5'd30) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_30_1_we0 = 1'b1;
    end else begin
        weight_buffer_30_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_30_2_ce0 = 1'b1;
    end else begin
        weight_buffer_30_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd2) & (tmp_reg_3223 == 5'd30) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_30_2_we0 = 1'b1;
    end else begin
        weight_buffer_30_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_30_3_ce0 = 1'b1;
    end else begin
        weight_buffer_30_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd3) & (tmp_reg_3223 == 5'd30) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_30_3_we0 = 1'b1;
    end else begin
        weight_buffer_30_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_31_0_ce0 = 1'b1;
    end else begin
        weight_buffer_31_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd0) & (tmp_reg_3223 == 5'd31) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_31_0_we0 = 1'b1;
    end else begin
        weight_buffer_31_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_31_1_ce0 = 1'b1;
    end else begin
        weight_buffer_31_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd1) & (tmp_reg_3223 == 5'd31) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_31_1_we0 = 1'b1;
    end else begin
        weight_buffer_31_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_31_2_ce0 = 1'b1;
    end else begin
        weight_buffer_31_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd2) & (tmp_reg_3223 == 5'd31) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_31_2_we0 = 1'b1;
    end else begin
        weight_buffer_31_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_31_3_ce0 = 1'b1;
    end else begin
        weight_buffer_31_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd3) & (tmp_reg_3223 == 5'd31) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_31_3_we0 = 1'b1;
    end else begin
        weight_buffer_31_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_3_0_ce0 = 1'b1;
    end else begin
        weight_buffer_3_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd0) & (tmp_reg_3223 == 5'd3) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_3_0_we0 = 1'b1;
    end else begin
        weight_buffer_3_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_3_1_ce0 = 1'b1;
    end else begin
        weight_buffer_3_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd1) & (tmp_reg_3223 == 5'd3) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_3_1_we0 = 1'b1;
    end else begin
        weight_buffer_3_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_3_2_ce0 = 1'b1;
    end else begin
        weight_buffer_3_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd2) & (tmp_reg_3223 == 5'd3) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_3_2_we0 = 1'b1;
    end else begin
        weight_buffer_3_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_3_3_ce0 = 1'b1;
    end else begin
        weight_buffer_3_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd3) & (tmp_reg_3223 == 5'd3) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_3_3_we0 = 1'b1;
    end else begin
        weight_buffer_3_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_4_0_ce0 = 1'b1;
    end else begin
        weight_buffer_4_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd0) & (tmp_reg_3223 == 5'd4) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_4_0_we0 = 1'b1;
    end else begin
        weight_buffer_4_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_4_1_ce0 = 1'b1;
    end else begin
        weight_buffer_4_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd1) & (tmp_reg_3223 == 5'd4) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_4_1_we0 = 1'b1;
    end else begin
        weight_buffer_4_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_4_2_ce0 = 1'b1;
    end else begin
        weight_buffer_4_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd2) & (tmp_reg_3223 == 5'd4) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_4_2_we0 = 1'b1;
    end else begin
        weight_buffer_4_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_4_3_ce0 = 1'b1;
    end else begin
        weight_buffer_4_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd3) & (tmp_reg_3223 == 5'd4) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_4_3_we0 = 1'b1;
    end else begin
        weight_buffer_4_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_5_0_ce0 = 1'b1;
    end else begin
        weight_buffer_5_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd0) & (tmp_reg_3223 == 5'd5) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_5_0_we0 = 1'b1;
    end else begin
        weight_buffer_5_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_5_1_ce0 = 1'b1;
    end else begin
        weight_buffer_5_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd1) & (tmp_reg_3223 == 5'd5) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_5_1_we0 = 1'b1;
    end else begin
        weight_buffer_5_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_5_2_ce0 = 1'b1;
    end else begin
        weight_buffer_5_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd2) & (tmp_reg_3223 == 5'd5) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_5_2_we0 = 1'b1;
    end else begin
        weight_buffer_5_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_5_3_ce0 = 1'b1;
    end else begin
        weight_buffer_5_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd3) & (tmp_reg_3223 == 5'd5) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_5_3_we0 = 1'b1;
    end else begin
        weight_buffer_5_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_6_0_ce0 = 1'b1;
    end else begin
        weight_buffer_6_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd0) & (tmp_reg_3223 == 5'd6) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_6_0_we0 = 1'b1;
    end else begin
        weight_buffer_6_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_6_1_ce0 = 1'b1;
    end else begin
        weight_buffer_6_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd1) & (tmp_reg_3223 == 5'd6) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_6_1_we0 = 1'b1;
    end else begin
        weight_buffer_6_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_6_2_ce0 = 1'b1;
    end else begin
        weight_buffer_6_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd2) & (tmp_reg_3223 == 5'd6) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_6_2_we0 = 1'b1;
    end else begin
        weight_buffer_6_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_6_3_ce0 = 1'b1;
    end else begin
        weight_buffer_6_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd3) & (tmp_reg_3223 == 5'd6) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_6_3_we0 = 1'b1;
    end else begin
        weight_buffer_6_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_7_0_ce0 = 1'b1;
    end else begin
        weight_buffer_7_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd0) & (tmp_reg_3223 == 5'd7) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_7_0_we0 = 1'b1;
    end else begin
        weight_buffer_7_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_7_1_ce0 = 1'b1;
    end else begin
        weight_buffer_7_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd1) & (tmp_reg_3223 == 5'd7) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_7_1_we0 = 1'b1;
    end else begin
        weight_buffer_7_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_7_2_ce0 = 1'b1;
    end else begin
        weight_buffer_7_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd2) & (tmp_reg_3223 == 5'd7) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_7_2_we0 = 1'b1;
    end else begin
        weight_buffer_7_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_7_3_ce0 = 1'b1;
    end else begin
        weight_buffer_7_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd3) & (tmp_reg_3223 == 5'd7) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_7_3_we0 = 1'b1;
    end else begin
        weight_buffer_7_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_8_0_ce0 = 1'b1;
    end else begin
        weight_buffer_8_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd0) & (tmp_reg_3223 == 5'd8) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_8_0_we0 = 1'b1;
    end else begin
        weight_buffer_8_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_8_1_ce0 = 1'b1;
    end else begin
        weight_buffer_8_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd1) & (tmp_reg_3223 == 5'd8) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_8_1_we0 = 1'b1;
    end else begin
        weight_buffer_8_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_8_2_ce0 = 1'b1;
    end else begin
        weight_buffer_8_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd2) & (tmp_reg_3223 == 5'd8) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_8_2_we0 = 1'b1;
    end else begin
        weight_buffer_8_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_8_3_ce0 = 1'b1;
    end else begin
        weight_buffer_8_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd3) & (tmp_reg_3223 == 5'd8) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_8_3_we0 = 1'b1;
    end else begin
        weight_buffer_8_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_9_0_ce0 = 1'b1;
    end else begin
        weight_buffer_9_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd0) & (tmp_reg_3223 == 5'd9) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_9_0_we0 = 1'b1;
    end else begin
        weight_buffer_9_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_9_1_ce0 = 1'b1;
    end else begin
        weight_buffer_9_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd1) & (tmp_reg_3223 == 5'd9) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_9_1_we0 = 1'b1;
    end else begin
        weight_buffer_9_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_9_2_ce0 = 1'b1;
    end else begin
        weight_buffer_9_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd2) & (tmp_reg_3223 == 5'd9) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_9_2_we0 = 1'b1;
    end else begin
        weight_buffer_9_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_9_3_ce0 = 1'b1;
    end else begin
        weight_buffer_9_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_65_reg_3255 == 2'd3) & (tmp_reg_3223 == 5'd9) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_9_3_we0 = 1'b1;
    end else begin
        weight_buffer_9_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_memcpy_buffer_ce0 = 1'b1;
    end else begin
        weight_memcpy_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((enable_read_read_fu_398_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((enable_read_read_fu_398_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((exitcond_flatten_fu_2193_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((exitcond_flatten_fu_2193_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Enable_fu_2255_p2 = ((p_9_mid2_fu_2217_p3 < TN_MIN_V) ? 1'b1 : 1'b0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign cnt_V_fu_2291_p2 = (2'd1 + ap_phi_mux_p_084_1_phi_fu_2025_p4);

assign enable_read_read_fu_398_p2 = enable;

assign exitcond_flatten_fu_2193_p2 = ((indvar_flatten_reg_1977 == 8'd128) ? 1'b1 : 1'b0);

assign exitcond_fu_2211_p2 = ((p_9_reg_1999 == 3'd4) ? 1'b1 : 1'b0);

assign indvar_flatten_next_fu_2199_p2 = (indvar_flatten_reg_1977 + 8'd1);

assign input_array_0_1_fu_2364_p3 = ((tmp_36_reg_3234[0:0] === 1'b1) ? input_array_0_3_fu_2343_p1 : input_array_0_fu_390);

assign input_array_0_2_fu_2390_p3 = ((or_cond_reg_3227[0:0] === 1'b1) ? input_array_0_1_fu_2364_p3 : input_array_0_fu_390);

assign input_array_0_3_fu_2343_p1 = weight_memcpy_buffer_q0[15:0];

assign input_array_1_1_fu_2357_p3 = ((tmp_36_reg_3234[0:0] === 1'b1) ? input_array_1_fu_2347_p4 : input_array_1_3_fu_394);

assign input_array_1_2_fu_2383_p3 = ((or_cond_reg_3227[0:0] === 1'b1) ? input_array_1_1_fu_2357_p3 : input_array_1_3_fu_394);

assign input_array_1_fu_2347_p4 = {{weight_memcpy_buffer_q0[31:16]}};

assign input_value1_fu_2397_p3 = ((or_cond_reg_3227[0:0] === 1'b1) ? input_value_fu_2375_p3 : 16'd0);

assign input_value_fu_2375_p3 = ((tmp_64_fu_2371_p1[0:0] === 1'b1) ? input_array_1_1_fu_2357_p3 : input_array_0_1_fu_2364_p3);

assign or_cond_fu_2260_p2 = (tmp_47_mid2_fu_2235_p3 & Enable_fu_2255_p2);

assign p_084_3_fu_2319_p3 = ((or_cond_fu_2260_p2[0:0] === 1'b1) ? p_s_fu_2303_p3 : ap_phi_mux_p_084_1_phi_fu_2025_p4);

assign p_14_t_mid2_v_fu_2243_p3 = ((exitcond_fu_2211_p2[0:0] === 1'b1) ? t1_V_fu_2205_p2 : ap_phi_mux_p_6_phi_fu_1992_p4);

assign p_9_mid2_fu_2217_p3 = ((exitcond_fu_2211_p2[0:0] === 1'b1) ? 3'd0 : p_9_reg_1999);

assign p_s_fu_2303_p3 = ((tmp_38_fu_2297_p2[0:0] === 1'b1) ? 2'd0 : cnt_V_fu_2291_p2);

assign t1_V_fu_2205_p2 = (6'd1 + ap_phi_mux_p_6_phi_fu_1992_p4);

assign t2_V_fu_2331_p2 = (p_9_mid2_fu_2217_p3 + 3'd1);

assign tmp_33_fu_2049_p2 = (tmp_s_fu_2041_p3 - tmp_cast_26_fu_2037_p1);

assign tmp_34_fu_2055_p2 = (tmp_33_fu_2049_p2 + tmp_cast_fu_2033_p1);

assign tmp_35_fu_2230_p2 = ((ap_phi_mux_p_6_phi_fu_1992_p4 < TM_MIN_V) ? 1'b1 : 1'b0);

assign tmp_36_fu_2266_p2 = ((ap_phi_mux_p_084_1_phi_fu_2025_p4 == 2'd0) ? 1'b1 : 1'b0);

assign tmp_37_fu_2272_p1 = t_V_reg_2010;

assign tmp_38_fu_2297_p2 = ((cnt_V_fu_2291_p2 == 2'd2) ? 1'b1 : 1'b0);

assign tmp_47_mid1_fu_2225_p2 = ((t1_V_fu_2205_p2 < TM_MIN_V) ? 1'b1 : 1'b0);

assign tmp_47_mid2_fu_2235_p3 = ((exitcond_fu_2211_p2[0:0] === 1'b1) ? tmp_47_mid1_fu_2225_p2 : tmp_35_fu_2230_p2);

assign tmp_53_cast_fu_2061_p1 = $signed(tmp_34_fu_2055_p2);

assign tmp_64_fu_2371_p1 = p_084_1_reg_2021[0:0];

assign tmp_65_fu_2327_p1 = p_9_mid2_fu_2217_p3[1:0];

assign tmp_cast_26_fu_2037_p1 = t3_V;

assign tmp_cast_fu_2033_p1 = t4_V;

assign tmp_fu_2251_p1 = p_14_t_mid2_v_fu_2243_p3[4:0];

assign tmp_s_fu_2041_p3 = {{t3_V}, {2'd0}};

assign weight_buffer_0_0_address0 = weight_buffer_0_0_s_reg_2569;

assign weight_buffer_0_0_d0 = input_value1_fu_2397_p3;

assign weight_buffer_0_1_address0 = weight_buffer_0_1_s_reg_2574;

assign weight_buffer_0_1_d0 = input_value1_fu_2397_p3;

assign weight_buffer_0_2_address0 = weight_buffer_0_2_s_reg_2579;

assign weight_buffer_0_2_d0 = input_value1_fu_2397_p3;

assign weight_buffer_0_3_address0 = weight_buffer_0_3_s_reg_2584;

assign weight_buffer_0_3_d0 = input_value1_fu_2397_p3;

assign weight_buffer_10_0_address0 = weight_buffer_10_0_1_reg_2769;

assign weight_buffer_10_0_d0 = input_value1_fu_2397_p3;

assign weight_buffer_10_1_address0 = weight_buffer_10_1_1_reg_2774;

assign weight_buffer_10_1_d0 = input_value1_fu_2397_p3;

assign weight_buffer_10_2_address0 = weight_buffer_10_2_1_reg_2779;

assign weight_buffer_10_2_d0 = input_value1_fu_2397_p3;

assign weight_buffer_10_3_address0 = weight_buffer_10_3_1_reg_2784;

assign weight_buffer_10_3_d0 = input_value1_fu_2397_p3;

assign weight_buffer_11_0_address0 = weight_buffer_11_0_1_reg_2789;

assign weight_buffer_11_0_d0 = input_value1_fu_2397_p3;

assign weight_buffer_11_1_address0 = weight_buffer_11_1_1_reg_2794;

assign weight_buffer_11_1_d0 = input_value1_fu_2397_p3;

assign weight_buffer_11_2_address0 = weight_buffer_11_2_1_reg_2799;

assign weight_buffer_11_2_d0 = input_value1_fu_2397_p3;

assign weight_buffer_11_3_address0 = weight_buffer_11_3_1_reg_2804;

assign weight_buffer_11_3_d0 = input_value1_fu_2397_p3;

assign weight_buffer_12_0_address0 = weight_buffer_12_0_1_reg_2809;

assign weight_buffer_12_0_d0 = input_value1_fu_2397_p3;

assign weight_buffer_12_1_address0 = weight_buffer_12_1_1_reg_2814;

assign weight_buffer_12_1_d0 = input_value1_fu_2397_p3;

assign weight_buffer_12_2_address0 = weight_buffer_12_2_1_reg_2819;

assign weight_buffer_12_2_d0 = input_value1_fu_2397_p3;

assign weight_buffer_12_3_address0 = weight_buffer_12_3_1_reg_2824;

assign weight_buffer_12_3_d0 = input_value1_fu_2397_p3;

assign weight_buffer_13_0_address0 = weight_buffer_13_0_1_reg_2829;

assign weight_buffer_13_0_d0 = input_value1_fu_2397_p3;

assign weight_buffer_13_1_address0 = weight_buffer_13_1_1_reg_2834;

assign weight_buffer_13_1_d0 = input_value1_fu_2397_p3;

assign weight_buffer_13_2_address0 = weight_buffer_13_2_1_reg_2839;

assign weight_buffer_13_2_d0 = input_value1_fu_2397_p3;

assign weight_buffer_13_3_address0 = weight_buffer_13_3_1_reg_2844;

assign weight_buffer_13_3_d0 = input_value1_fu_2397_p3;

assign weight_buffer_14_0_address0 = weight_buffer_14_0_1_reg_2849;

assign weight_buffer_14_0_d0 = input_value1_fu_2397_p3;

assign weight_buffer_14_1_address0 = weight_buffer_14_1_1_reg_2854;

assign weight_buffer_14_1_d0 = input_value1_fu_2397_p3;

assign weight_buffer_14_2_address0 = weight_buffer_14_2_1_reg_2859;

assign weight_buffer_14_2_d0 = input_value1_fu_2397_p3;

assign weight_buffer_14_3_address0 = weight_buffer_14_3_1_reg_2864;

assign weight_buffer_14_3_d0 = input_value1_fu_2397_p3;

assign weight_buffer_15_0_address0 = weight_buffer_15_0_1_reg_2869;

assign weight_buffer_15_0_d0 = input_value1_fu_2397_p3;

assign weight_buffer_15_1_address0 = weight_buffer_15_1_1_reg_2874;

assign weight_buffer_15_1_d0 = input_value1_fu_2397_p3;

assign weight_buffer_15_2_address0 = weight_buffer_15_2_1_reg_2879;

assign weight_buffer_15_2_d0 = input_value1_fu_2397_p3;

assign weight_buffer_15_3_address0 = weight_buffer_15_3_1_reg_2884;

assign weight_buffer_15_3_d0 = input_value1_fu_2397_p3;

assign weight_buffer_16_0_address0 = weight_buffer_16_0_1_reg_2889;

assign weight_buffer_16_0_d0 = input_value1_fu_2397_p3;

assign weight_buffer_16_1_address0 = weight_buffer_16_1_1_reg_2894;

assign weight_buffer_16_1_d0 = input_value1_fu_2397_p3;

assign weight_buffer_16_2_address0 = weight_buffer_16_2_1_reg_2899;

assign weight_buffer_16_2_d0 = input_value1_fu_2397_p3;

assign weight_buffer_16_3_address0 = weight_buffer_16_3_1_reg_2904;

assign weight_buffer_16_3_d0 = input_value1_fu_2397_p3;

assign weight_buffer_17_0_address0 = weight_buffer_17_0_1_reg_2909;

assign weight_buffer_17_0_d0 = input_value1_fu_2397_p3;

assign weight_buffer_17_1_address0 = weight_buffer_17_1_1_reg_2914;

assign weight_buffer_17_1_d0 = input_value1_fu_2397_p3;

assign weight_buffer_17_2_address0 = weight_buffer_17_2_1_reg_2919;

assign weight_buffer_17_2_d0 = input_value1_fu_2397_p3;

assign weight_buffer_17_3_address0 = weight_buffer_17_3_1_reg_2924;

assign weight_buffer_17_3_d0 = input_value1_fu_2397_p3;

assign weight_buffer_18_0_address0 = weight_buffer_18_0_1_reg_2929;

assign weight_buffer_18_0_d0 = input_value1_fu_2397_p3;

assign weight_buffer_18_1_address0 = weight_buffer_18_1_1_reg_2934;

assign weight_buffer_18_1_d0 = input_value1_fu_2397_p3;

assign weight_buffer_18_2_address0 = weight_buffer_18_2_1_reg_2939;

assign weight_buffer_18_2_d0 = input_value1_fu_2397_p3;

assign weight_buffer_18_3_address0 = weight_buffer_18_3_1_reg_2944;

assign weight_buffer_18_3_d0 = input_value1_fu_2397_p3;

assign weight_buffer_19_0_address0 = weight_buffer_19_0_1_reg_2949;

assign weight_buffer_19_0_d0 = input_value1_fu_2397_p3;

assign weight_buffer_19_1_address0 = weight_buffer_19_1_1_reg_2954;

assign weight_buffer_19_1_d0 = input_value1_fu_2397_p3;

assign weight_buffer_19_2_address0 = weight_buffer_19_2_1_reg_2959;

assign weight_buffer_19_2_d0 = input_value1_fu_2397_p3;

assign weight_buffer_19_3_address0 = weight_buffer_19_3_1_reg_2964;

assign weight_buffer_19_3_d0 = input_value1_fu_2397_p3;

assign weight_buffer_1_0_address0 = weight_buffer_1_0_s_reg_2589;

assign weight_buffer_1_0_d0 = input_value1_fu_2397_p3;

assign weight_buffer_1_1_address0 = weight_buffer_1_1_s_reg_2594;

assign weight_buffer_1_1_d0 = input_value1_fu_2397_p3;

assign weight_buffer_1_2_address0 = weight_buffer_1_2_s_reg_2599;

assign weight_buffer_1_2_d0 = input_value1_fu_2397_p3;

assign weight_buffer_1_3_address0 = weight_buffer_1_3_s_reg_2604;

assign weight_buffer_1_3_d0 = input_value1_fu_2397_p3;

assign weight_buffer_20_0_address0 = weight_buffer_20_0_1_reg_2969;

assign weight_buffer_20_0_d0 = input_value1_fu_2397_p3;

assign weight_buffer_20_1_address0 = weight_buffer_20_1_1_reg_2974;

assign weight_buffer_20_1_d0 = input_value1_fu_2397_p3;

assign weight_buffer_20_2_address0 = weight_buffer_20_2_1_reg_2979;

assign weight_buffer_20_2_d0 = input_value1_fu_2397_p3;

assign weight_buffer_20_3_address0 = weight_buffer_20_3_1_reg_2984;

assign weight_buffer_20_3_d0 = input_value1_fu_2397_p3;

assign weight_buffer_21_0_address0 = weight_buffer_21_0_1_reg_2989;

assign weight_buffer_21_0_d0 = input_value1_fu_2397_p3;

assign weight_buffer_21_1_address0 = weight_buffer_21_1_1_reg_2994;

assign weight_buffer_21_1_d0 = input_value1_fu_2397_p3;

assign weight_buffer_21_2_address0 = weight_buffer_21_2_1_reg_2999;

assign weight_buffer_21_2_d0 = input_value1_fu_2397_p3;

assign weight_buffer_21_3_address0 = weight_buffer_21_3_1_reg_3004;

assign weight_buffer_21_3_d0 = input_value1_fu_2397_p3;

assign weight_buffer_22_0_address0 = weight_buffer_22_0_1_reg_3009;

assign weight_buffer_22_0_d0 = input_value1_fu_2397_p3;

assign weight_buffer_22_1_address0 = weight_buffer_22_1_1_reg_3014;

assign weight_buffer_22_1_d0 = input_value1_fu_2397_p3;

assign weight_buffer_22_2_address0 = weight_buffer_22_2_1_reg_3019;

assign weight_buffer_22_2_d0 = input_value1_fu_2397_p3;

assign weight_buffer_22_3_address0 = weight_buffer_22_3_1_reg_3024;

assign weight_buffer_22_3_d0 = input_value1_fu_2397_p3;

assign weight_buffer_23_0_address0 = weight_buffer_23_0_1_reg_3029;

assign weight_buffer_23_0_d0 = input_value1_fu_2397_p3;

assign weight_buffer_23_1_address0 = weight_buffer_23_1_1_reg_3034;

assign weight_buffer_23_1_d0 = input_value1_fu_2397_p3;

assign weight_buffer_23_2_address0 = weight_buffer_23_2_1_reg_3039;

assign weight_buffer_23_2_d0 = input_value1_fu_2397_p3;

assign weight_buffer_23_3_address0 = weight_buffer_23_3_1_reg_3044;

assign weight_buffer_23_3_d0 = input_value1_fu_2397_p3;

assign weight_buffer_24_0_address0 = weight_buffer_24_0_1_reg_3049;

assign weight_buffer_24_0_d0 = input_value1_fu_2397_p3;

assign weight_buffer_24_1_address0 = weight_buffer_24_1_1_reg_3054;

assign weight_buffer_24_1_d0 = input_value1_fu_2397_p3;

assign weight_buffer_24_2_address0 = weight_buffer_24_2_1_reg_3059;

assign weight_buffer_24_2_d0 = input_value1_fu_2397_p3;

assign weight_buffer_24_3_address0 = weight_buffer_24_3_1_reg_3064;

assign weight_buffer_24_3_d0 = input_value1_fu_2397_p3;

assign weight_buffer_25_0_address0 = weight_buffer_25_0_1_reg_3069;

assign weight_buffer_25_0_d0 = input_value1_fu_2397_p3;

assign weight_buffer_25_1_address0 = weight_buffer_25_1_1_reg_3074;

assign weight_buffer_25_1_d0 = input_value1_fu_2397_p3;

assign weight_buffer_25_2_address0 = weight_buffer_25_2_1_reg_3079;

assign weight_buffer_25_2_d0 = input_value1_fu_2397_p3;

assign weight_buffer_25_3_address0 = weight_buffer_25_3_1_reg_3084;

assign weight_buffer_25_3_d0 = input_value1_fu_2397_p3;

assign weight_buffer_26_0_address0 = weight_buffer_26_0_1_reg_3089;

assign weight_buffer_26_0_d0 = input_value1_fu_2397_p3;

assign weight_buffer_26_1_address0 = weight_buffer_26_1_1_reg_3094;

assign weight_buffer_26_1_d0 = input_value1_fu_2397_p3;

assign weight_buffer_26_2_address0 = weight_buffer_26_2_1_reg_3099;

assign weight_buffer_26_2_d0 = input_value1_fu_2397_p3;

assign weight_buffer_26_3_address0 = weight_buffer_26_3_1_reg_3104;

assign weight_buffer_26_3_d0 = input_value1_fu_2397_p3;

assign weight_buffer_27_0_address0 = weight_buffer_27_0_1_reg_3109;

assign weight_buffer_27_0_d0 = input_value1_fu_2397_p3;

assign weight_buffer_27_1_address0 = weight_buffer_27_1_1_reg_3114;

assign weight_buffer_27_1_d0 = input_value1_fu_2397_p3;

assign weight_buffer_27_2_address0 = weight_buffer_27_2_1_reg_3119;

assign weight_buffer_27_2_d0 = input_value1_fu_2397_p3;

assign weight_buffer_27_3_address0 = weight_buffer_27_3_1_reg_3124;

assign weight_buffer_27_3_d0 = input_value1_fu_2397_p3;

assign weight_buffer_28_0_address0 = weight_buffer_28_0_1_reg_3129;

assign weight_buffer_28_0_d0 = input_value1_fu_2397_p3;

assign weight_buffer_28_1_address0 = weight_buffer_28_1_1_reg_3134;

assign weight_buffer_28_1_d0 = input_value1_fu_2397_p3;

assign weight_buffer_28_2_address0 = weight_buffer_28_2_1_reg_3139;

assign weight_buffer_28_2_d0 = input_value1_fu_2397_p3;

assign weight_buffer_28_3_address0 = weight_buffer_28_3_1_reg_3144;

assign weight_buffer_28_3_d0 = input_value1_fu_2397_p3;

assign weight_buffer_29_0_address0 = weight_buffer_29_0_1_reg_3149;

assign weight_buffer_29_0_d0 = input_value1_fu_2397_p3;

assign weight_buffer_29_1_address0 = weight_buffer_29_1_1_reg_3154;

assign weight_buffer_29_1_d0 = input_value1_fu_2397_p3;

assign weight_buffer_29_2_address0 = weight_buffer_29_2_1_reg_3159;

assign weight_buffer_29_2_d0 = input_value1_fu_2397_p3;

assign weight_buffer_29_3_address0 = weight_buffer_29_3_1_reg_3164;

assign weight_buffer_29_3_d0 = input_value1_fu_2397_p3;

assign weight_buffer_2_0_address0 = weight_buffer_2_0_s_reg_2609;

assign weight_buffer_2_0_d0 = input_value1_fu_2397_p3;

assign weight_buffer_2_1_address0 = weight_buffer_2_1_s_reg_2614;

assign weight_buffer_2_1_d0 = input_value1_fu_2397_p3;

assign weight_buffer_2_2_address0 = weight_buffer_2_2_s_reg_2619;

assign weight_buffer_2_2_d0 = input_value1_fu_2397_p3;

assign weight_buffer_2_3_address0 = weight_buffer_2_3_s_reg_2624;

assign weight_buffer_2_3_d0 = input_value1_fu_2397_p3;

assign weight_buffer_30_0_address0 = weight_buffer_30_0_1_reg_3169;

assign weight_buffer_30_0_d0 = input_value1_fu_2397_p3;

assign weight_buffer_30_1_address0 = weight_buffer_30_1_1_reg_3174;

assign weight_buffer_30_1_d0 = input_value1_fu_2397_p3;

assign weight_buffer_30_2_address0 = weight_buffer_30_2_1_reg_3179;

assign weight_buffer_30_2_d0 = input_value1_fu_2397_p3;

assign weight_buffer_30_3_address0 = weight_buffer_30_3_1_reg_3184;

assign weight_buffer_30_3_d0 = input_value1_fu_2397_p3;

assign weight_buffer_31_0_address0 = weight_buffer_31_0_1_reg_3189;

assign weight_buffer_31_0_d0 = input_value1_fu_2397_p3;

assign weight_buffer_31_1_address0 = weight_buffer_31_1_1_reg_3194;

assign weight_buffer_31_1_d0 = input_value1_fu_2397_p3;

assign weight_buffer_31_2_address0 = weight_buffer_31_2_1_reg_3199;

assign weight_buffer_31_2_d0 = input_value1_fu_2397_p3;

assign weight_buffer_31_3_address0 = weight_buffer_31_3_1_reg_3204;

assign weight_buffer_31_3_d0 = input_value1_fu_2397_p3;

assign weight_buffer_3_0_address0 = weight_buffer_3_0_s_reg_2629;

assign weight_buffer_3_0_d0 = input_value1_fu_2397_p3;

assign weight_buffer_3_1_address0 = weight_buffer_3_1_s_reg_2634;

assign weight_buffer_3_1_d0 = input_value1_fu_2397_p3;

assign weight_buffer_3_2_address0 = weight_buffer_3_2_s_reg_2639;

assign weight_buffer_3_2_d0 = input_value1_fu_2397_p3;

assign weight_buffer_3_3_address0 = weight_buffer_3_3_s_reg_2644;

assign weight_buffer_3_3_d0 = input_value1_fu_2397_p3;

assign weight_buffer_4_0_address0 = weight_buffer_4_0_s_reg_2649;

assign weight_buffer_4_0_d0 = input_value1_fu_2397_p3;

assign weight_buffer_4_1_address0 = weight_buffer_4_1_s_reg_2654;

assign weight_buffer_4_1_d0 = input_value1_fu_2397_p3;

assign weight_buffer_4_2_address0 = weight_buffer_4_2_s_reg_2659;

assign weight_buffer_4_2_d0 = input_value1_fu_2397_p3;

assign weight_buffer_4_3_address0 = weight_buffer_4_3_s_reg_2664;

assign weight_buffer_4_3_d0 = input_value1_fu_2397_p3;

assign weight_buffer_5_0_address0 = weight_buffer_5_0_s_reg_2669;

assign weight_buffer_5_0_d0 = input_value1_fu_2397_p3;

assign weight_buffer_5_1_address0 = weight_buffer_5_1_s_reg_2674;

assign weight_buffer_5_1_d0 = input_value1_fu_2397_p3;

assign weight_buffer_5_2_address0 = weight_buffer_5_2_s_reg_2679;

assign weight_buffer_5_2_d0 = input_value1_fu_2397_p3;

assign weight_buffer_5_3_address0 = weight_buffer_5_3_s_reg_2684;

assign weight_buffer_5_3_d0 = input_value1_fu_2397_p3;

assign weight_buffer_6_0_address0 = weight_buffer_6_0_s_reg_2689;

assign weight_buffer_6_0_d0 = input_value1_fu_2397_p3;

assign weight_buffer_6_1_address0 = weight_buffer_6_1_s_reg_2694;

assign weight_buffer_6_1_d0 = input_value1_fu_2397_p3;

assign weight_buffer_6_2_address0 = weight_buffer_6_2_s_reg_2699;

assign weight_buffer_6_2_d0 = input_value1_fu_2397_p3;

assign weight_buffer_6_3_address0 = weight_buffer_6_3_s_reg_2704;

assign weight_buffer_6_3_d0 = input_value1_fu_2397_p3;

assign weight_buffer_7_0_address0 = weight_buffer_7_0_s_reg_2709;

assign weight_buffer_7_0_d0 = input_value1_fu_2397_p3;

assign weight_buffer_7_1_address0 = weight_buffer_7_1_s_reg_2714;

assign weight_buffer_7_1_d0 = input_value1_fu_2397_p3;

assign weight_buffer_7_2_address0 = weight_buffer_7_2_s_reg_2719;

assign weight_buffer_7_2_d0 = input_value1_fu_2397_p3;

assign weight_buffer_7_3_address0 = weight_buffer_7_3_s_reg_2724;

assign weight_buffer_7_3_d0 = input_value1_fu_2397_p3;

assign weight_buffer_8_0_address0 = weight_buffer_8_0_s_reg_2729;

assign weight_buffer_8_0_d0 = input_value1_fu_2397_p3;

assign weight_buffer_8_1_address0 = weight_buffer_8_1_s_reg_2734;

assign weight_buffer_8_1_d0 = input_value1_fu_2397_p3;

assign weight_buffer_8_2_address0 = weight_buffer_8_2_s_reg_2739;

assign weight_buffer_8_2_d0 = input_value1_fu_2397_p3;

assign weight_buffer_8_3_address0 = weight_buffer_8_3_s_reg_2744;

assign weight_buffer_8_3_d0 = input_value1_fu_2397_p3;

assign weight_buffer_9_0_address0 = weight_buffer_9_0_s_reg_2749;

assign weight_buffer_9_0_d0 = input_value1_fu_2397_p3;

assign weight_buffer_9_1_address0 = weight_buffer_9_1_s_reg_2754;

assign weight_buffer_9_1_d0 = input_value1_fu_2397_p3;

assign weight_buffer_9_2_address0 = weight_buffer_9_2_s_reg_2759;

assign weight_buffer_9_2_d0 = input_value1_fu_2397_p3;

assign weight_buffer_9_3_address0 = weight_buffer_9_3_s_reg_2764;

assign weight_buffer_9_3_d0 = input_value1_fu_2397_p3;

assign weight_memcpy_buffer_address0 = tmp_37_fu_2272_p1;

assign weight_memcpy_offset_1_fu_2283_p3 = ((tmp_36_fu_2266_p2[0:0] === 1'b1) ? weight_memcpy_offset_fu_2277_p2 : t_V_reg_2010);

assign weight_memcpy_offset_2_fu_2311_p3 = ((or_cond_fu_2260_p2[0:0] === 1'b1) ? weight_memcpy_offset_1_fu_2283_p3 : t_V_reg_2010);

assign weight_memcpy_offset_fu_2277_p2 = (8'd1 + t_V_reg_2010);

endmodule //load_weight2buf_ever
