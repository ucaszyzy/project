-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity weight_mmcpy_everyKx is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_Weight_AWVALID : OUT STD_LOGIC;
    m_axi_Weight_AWREADY : IN STD_LOGIC;
    m_axi_Weight_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Weight_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Weight_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Weight_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Weight_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Weight_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Weight_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Weight_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Weight_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Weight_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Weight_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Weight_WVALID : OUT STD_LOGIC;
    m_axi_Weight_WREADY : IN STD_LOGIC;
    m_axi_Weight_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Weight_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Weight_WLAST : OUT STD_LOGIC;
    m_axi_Weight_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Weight_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Weight_ARVALID : OUT STD_LOGIC;
    m_axi_Weight_ARREADY : IN STD_LOGIC;
    m_axi_Weight_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Weight_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Weight_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Weight_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Weight_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Weight_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Weight_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Weight_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Weight_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Weight_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Weight_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Weight_RVALID : IN STD_LOGIC;
    m_axi_Weight_RREADY : OUT STD_LOGIC;
    m_axi_Weight_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Weight_RLAST : IN STD_LOGIC;
    m_axi_Weight_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Weight_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Weight_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Weight_BVALID : IN STD_LOGIC;
    m_axi_Weight_BREADY : OUT STD_LOGIC;
    m_axi_Weight_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Weight_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Weight_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    Weight_offset : IN STD_LOGIC_VECTOR (29 downto 0);
    weight_memcpy_buffer_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    weight_memcpy_buffer_ce0 : OUT STD_LOGIC;
    weight_memcpy_buffer_we0 : OUT STD_LOGIC;
    weight_memcpy_buffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    t3_V : IN STD_LOGIC_VECTOR (1 downto 0);
    t4_V : IN STD_LOGIC_VECTOR (2 downto 0);
    next_t3_0_V_read : IN STD_LOGIC_VECTOR (2 downto 0);
    next_t4_0_V_read : IN STD_LOGIC_VECTOR (2 downto 0);
    ReadLength : IN STD_LOGIC_VECTOR (7 downto 0);
    init_enable : IN STD_LOGIC;
    enable : IN STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (2 downto 0) );
end;


architecture behav of weight_mmcpy_everyKx is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal Woffset : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Weight_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal Weight_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_reg_311 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_reg_154 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_reg_154_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ReadLength_cast1_fu_184_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadLength_cast1_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal t3_V_cast_fu_188_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal t3_V_cast_reg_295 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Woffset_load_fu_196_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Woffset_load_reg_300 : STD_LOGIC_VECTOR (31 downto 0);
    signal enable_read_read_fu_82_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Weight_addr_reg_305 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_311_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_233_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_next_reg_315 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal Weight_addr_read_reg_320 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_phi_fu_158_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal next_t4_0_V_write_a_reg_166 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal next_t3_0_V_write_a_reg_175 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar1_fu_239_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_cast_fu_218_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_Weight_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_Weight_ARREADY : STD_LOGIC;
    signal tmp_1_fu_244_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Woffset_load_fu_196_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_cast_fu_204_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_cast_fu_208_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sum_fu_212_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_return_0_preg : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_Weight_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_Weight_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    if ((ap_sig_ioackin_m_axi_Weight_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_Weight_ARREADY <= ap_const_logic_0;
                    elsif ((m_axi_Weight_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_Weight_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv3_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_return_0_preg <= next_t3_0_V_write_a_reg_175;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv3_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_return_1_preg <= next_t4_0_V_write_a_reg_166;
                end if; 
            end if;
        end if;
    end process;


    indvar_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_311 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_reg_154 <= indvar_next_reg_315;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                indvar_reg_154 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    next_t3_0_V_write_a_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((enable_read_read_fu_82_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                next_t3_0_V_write_a_reg_175 <= next_t3_0_V_read;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                next_t3_0_V_write_a_reg_175 <= t3_V_cast_reg_295;
            end if; 
        end if;
    end process;

    next_t4_0_V_write_a_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((enable_read_read_fu_82_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                next_t4_0_V_write_a_reg_166 <= next_t4_0_V_read;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                next_t4_0_V_write_a_reg_166 <= t4_V;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ReadLength_cast1_reg_289(7 downto 0) <= ReadLength_cast1_fu_184_p1(7 downto 0);
                    t3_V_cast_reg_295(1 downto 0) <= t3_V_cast_fu_188_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_311 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                Weight_addr_read_reg_320 <= m_axi_Weight_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (enable_read_read_fu_82_p2 = ap_const_lv1_1))) then
                Weight_addr_reg_305 <= sum_cast_fu_218_p1(32 - 1 downto 0);
                p_Woffset_load_reg_300 <= p_Woffset_load_fu_196_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                Woffset <= tmp_1_fu_244_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_reg_311 <= exitcond_fu_228_p2;
                exitcond_reg_311_pp0_iter1_reg <= exitcond_reg_311;
                indvar_reg_154_pp0_iter1_reg <= indvar_reg_154;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                indvar_next_reg_315 <= indvar_next_fu_233_p2;
            end if;
        end if;
    end process;
    ReadLength_cast1_reg_289(31 downto 8) <= "000000000000000000000000";
    t3_V_cast_reg_295(2) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, enable_read_read_fu_82_p2, exitcond_fu_228_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_sig_ioackin_m_axi_Weight_ARREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((enable_read_read_fu_82_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (enable_read_read_fu_82_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_sig_ioackin_m_axi_Weight_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_fu_228_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_fu_228_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ReadLength_cast1_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ReadLength),32));

    Weight_blk_n_AR_assign_proc : process(m_axi_Weight_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Weight_blk_n_AR <= m_axi_Weight_ARREADY;
        else 
            Weight_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    Weight_blk_n_R_assign_proc : process(m_axi_Weight_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_311)
    begin
        if (((exitcond_reg_311 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            Weight_blk_n_R <= m_axi_Weight_RVALID;
        else 
            Weight_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_Weight_RVALID, ap_enable_reg_pp0_iter1, exitcond_reg_311)
    begin
                ap_block_pp0_stage0_11001 <= ((exitcond_reg_311 = ap_const_lv1_0) and (m_axi_Weight_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_Weight_RVALID, ap_enable_reg_pp0_iter1, exitcond_reg_311)
    begin
                ap_block_pp0_stage0_subdone <= ((exitcond_reg_311 = ap_const_lv1_0) and (m_axi_Weight_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_state10_pp0_stage0_iter1_assign_proc : process(m_axi_Weight_RVALID, exitcond_reg_311)
    begin
                ap_block_state10_pp0_stage0_iter1 <= ((exitcond_reg_311 = ap_const_lv1_0) and (m_axi_Weight_RVALID = ap_const_logic_0));
    end process;

        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(exitcond_fu_228_p2)
    begin
        if ((exitcond_fu_228_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_phi_fu_158_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_311, indvar_reg_154, indvar_next_reg_315)
    begin
        if (((exitcond_reg_311 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_phi_fu_158_p4 <= indvar_next_reg_315;
        else 
            ap_phi_mux_indvar_phi_fu_158_p4 <= indvar_reg_154;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(next_t3_0_V_write_a_reg_175, ap_CS_fsm_state13, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_return_0 <= next_t3_0_V_write_a_reg_175;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(next_t4_0_V_write_a_reg_166, ap_CS_fsm_state13, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_return_1 <= next_t4_0_V_write_a_reg_166;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_Weight_ARREADY_assign_proc : process(m_axi_Weight_ARREADY, ap_reg_ioackin_m_axi_Weight_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_Weight_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_Weight_ARREADY <= m_axi_Weight_ARREADY;
        else 
            ap_sig_ioackin_m_axi_Weight_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    enable_read_read_fu_82_p2 <= (0=>enable, others=>'-');
    exitcond_fu_228_p2 <= "1" when (ap_phi_mux_indvar_phi_fu_158_p4 = ReadLength) else "0";
    indvar1_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar_reg_154_pp0_iter1_reg),64));
    indvar_next_fu_233_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_phi_fu_158_p4) + unsigned(ap_const_lv8_1));
    m_axi_Weight_ARADDR <= Weight_addr_reg_305;
    m_axi_Weight_ARBURST <= ap_const_lv2_0;
    m_axi_Weight_ARCACHE <= ap_const_lv4_0;
    m_axi_Weight_ARID <= ap_const_lv1_0;
    m_axi_Weight_ARLEN <= ReadLength_cast1_reg_289;
    m_axi_Weight_ARLOCK <= ap_const_lv2_0;
    m_axi_Weight_ARPROT <= ap_const_lv3_0;
    m_axi_Weight_ARQOS <= ap_const_lv4_0;
    m_axi_Weight_ARREGION <= ap_const_lv4_0;
    m_axi_Weight_ARSIZE <= ap_const_lv3_0;
    m_axi_Weight_ARUSER <= ap_const_lv1_0;

    m_axi_Weight_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_reg_ioackin_m_axi_Weight_ARREADY)
    begin
        if (((ap_reg_ioackin_m_axi_Weight_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_Weight_ARVALID <= ap_const_logic_1;
        else 
            m_axi_Weight_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_Weight_AWADDR <= ap_const_lv32_0;
    m_axi_Weight_AWBURST <= ap_const_lv2_0;
    m_axi_Weight_AWCACHE <= ap_const_lv4_0;
    m_axi_Weight_AWID <= ap_const_lv1_0;
    m_axi_Weight_AWLEN <= ap_const_lv32_0;
    m_axi_Weight_AWLOCK <= ap_const_lv2_0;
    m_axi_Weight_AWPROT <= ap_const_lv3_0;
    m_axi_Weight_AWQOS <= ap_const_lv4_0;
    m_axi_Weight_AWREGION <= ap_const_lv4_0;
    m_axi_Weight_AWSIZE <= ap_const_lv3_0;
    m_axi_Weight_AWUSER <= ap_const_lv1_0;
    m_axi_Weight_AWVALID <= ap_const_logic_0;
    m_axi_Weight_BREADY <= ap_const_logic_0;

    m_axi_Weight_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_311, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_reg_311 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_Weight_RREADY <= ap_const_logic_1;
        else 
            m_axi_Weight_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_Weight_WDATA <= ap_const_lv32_0;
    m_axi_Weight_WID <= ap_const_lv1_0;
    m_axi_Weight_WLAST <= ap_const_logic_0;
    m_axi_Weight_WSTRB <= ap_const_lv4_0;
    m_axi_Weight_WUSER <= ap_const_lv1_0;
    m_axi_Weight_WVALID <= ap_const_logic_0;
    p_Woffset_load_fu_196_p0 <= (0=>init_enable, others=>'-');
    p_Woffset_load_fu_196_p3 <= 
        ap_const_lv32_0 when (p_Woffset_load_fu_196_p0(0) = '1') else 
        Woffset;
    sext_cast_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Weight_offset),33));
        sum_cast_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_fu_212_p2),64));

    sum_fu_212_p2 <= std_logic_vector(signed(tmp_cast_fu_204_p1) + signed(sext_cast_fu_208_p1));
    t3_V_cast_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t3_V),3));
    tmp_1_fu_244_p2 <= std_logic_vector(signed(p_Woffset_load_reg_300) + signed(ReadLength_cast1_reg_289));
        tmp_cast_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Woffset_load_fu_196_p3),33));

    weight_memcpy_buffer_address0 <= indvar1_fu_239_p1(6 - 1 downto 0);

    weight_memcpy_buffer_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weight_memcpy_buffer_ce0 <= ap_const_logic_1;
        else 
            weight_memcpy_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_memcpy_buffer_d0 <= Weight_addr_read_reg_320;

    weight_memcpy_buffer_we0_assign_proc : process(ap_block_pp0_stage0_11001, exitcond_reg_311_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((exitcond_reg_311_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weight_memcpy_buffer_we0 <= ap_const_logic_1;
        else 
            weight_memcpy_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
