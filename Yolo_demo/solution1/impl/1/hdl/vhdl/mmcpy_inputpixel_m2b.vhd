-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mmcpy_inputpixel_m2b is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_input_r_AWVALID : OUT STD_LOGIC;
    m_axi_input_r_AWREADY : IN STD_LOGIC;
    m_axi_input_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_WVALID : OUT STD_LOGIC;
    m_axi_input_r_WREADY : IN STD_LOGIC;
    m_axi_input_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_WLAST : OUT STD_LOGIC;
    m_axi_input_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_ARVALID : OUT STD_LOGIC;
    m_axi_input_r_ARREADY : IN STD_LOGIC;
    m_axi_input_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_RVALID : IN STD_LOGIC;
    m_axi_input_r_RREADY : OUT STD_LOGIC;
    m_axi_input_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_r_RLAST : IN STD_LOGIC;
    m_axi_input_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_BVALID : IN STD_LOGIC;
    m_axi_input_r_BREADY : OUT STD_LOGIC;
    m_axi_input_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_offset : IN STD_LOGIC_VECTOR (29 downto 0);
    m_axi_input1_AWVALID : OUT STD_LOGIC;
    m_axi_input1_AWREADY : IN STD_LOGIC;
    m_axi_input1_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input1_WVALID : OUT STD_LOGIC;
    m_axi_input1_WREADY : IN STD_LOGIC;
    m_axi_input1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input1_WLAST : OUT STD_LOGIC;
    m_axi_input1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input1_ARVALID : OUT STD_LOGIC;
    m_axi_input1_ARREADY : IN STD_LOGIC;
    m_axi_input1_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input1_RVALID : IN STD_LOGIC;
    m_axi_input1_RREADY : OUT STD_LOGIC;
    m_axi_input1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input1_RLAST : IN STD_LOGIC;
    m_axi_input1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input1_BVALID : IN STD_LOGIC;
    m_axi_input1_BREADY : OUT STD_LOGIC;
    m_axi_input1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input1_offset : IN STD_LOGIC_VECTOR (29 downto 0);
    m_axi_input2_AWVALID : OUT STD_LOGIC;
    m_axi_input2_AWREADY : IN STD_LOGIC;
    m_axi_input2_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input2_WVALID : OUT STD_LOGIC;
    m_axi_input2_WREADY : IN STD_LOGIC;
    m_axi_input2_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input2_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input2_WLAST : OUT STD_LOGIC;
    m_axi_input2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input2_ARVALID : OUT STD_LOGIC;
    m_axi_input2_ARREADY : IN STD_LOGIC;
    m_axi_input2_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input2_RVALID : IN STD_LOGIC;
    m_axi_input2_RREADY : OUT STD_LOGIC;
    m_axi_input2_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input2_RLAST : IN STD_LOGIC;
    m_axi_input2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input2_BVALID : IN STD_LOGIC;
    m_axi_input2_BREADY : OUT STD_LOGIC;
    m_axi_input2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input2_offset : IN STD_LOGIC_VECTOR (29 downto 0);
    m_axi_input3_AWVALID : OUT STD_LOGIC;
    m_axi_input3_AWREADY : IN STD_LOGIC;
    m_axi_input3_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input3_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input3_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input3_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input3_WVALID : OUT STD_LOGIC;
    m_axi_input3_WREADY : IN STD_LOGIC;
    m_axi_input3_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input3_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input3_WLAST : OUT STD_LOGIC;
    m_axi_input3_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input3_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input3_ARVALID : OUT STD_LOGIC;
    m_axi_input3_ARREADY : IN STD_LOGIC;
    m_axi_input3_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input3_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input3_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input3_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input3_RVALID : IN STD_LOGIC;
    m_axi_input3_RREADY : OUT STD_LOGIC;
    m_axi_input3_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input3_RLAST : IN STD_LOGIC;
    m_axi_input3_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input3_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input3_BVALID : IN STD_LOGIC;
    m_axi_input3_BREADY : OUT STD_LOGIC;
    m_axi_input3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input3_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input3_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input3_offset : IN STD_LOGIC_VECTOR (29 downto 0);
    input_memcpy_buffer_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_memcpy_buffer_ce0 : OUT STD_LOGIC;
    input_memcpy_buffer_we0 : OUT STD_LOGIC;
    input_memcpy_buffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_memcpy_buffer1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_memcpy_buffer1_ce0 : OUT STD_LOGIC;
    input_memcpy_buffer1_we0 : OUT STD_LOGIC;
    input_memcpy_buffer1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_memcpy_buffer2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_memcpy_buffer2_ce0 : OUT STD_LOGIC;
    input_memcpy_buffer2_we0 : OUT STD_LOGIC;
    input_memcpy_buffer2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_memcpy_buffer3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_memcpy_buffer3_ce0 : OUT STD_LOGIC;
    input_memcpy_buffer3_we0 : OUT STD_LOGIC;
    input_memcpy_buffer3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    RowBeginByte_0_V_read : IN STD_LOGIC_VECTOR (0 downto 0);
    RowBeginByte_1_V_read : IN STD_LOGIC_VECTOR (0 downto 0);
    RowBeginByte_2_V_read : IN STD_LOGIC_VECTOR (0 downto 0);
    RowBeginByte_3_V_read : IN STD_LOGIC_VECTOR (0 downto 0);
    TN_MIN_3b_V : IN STD_LOGIC_VECTOR (2 downto 0);
    next_t2_0_V_write : IN STD_LOGIC_VECTOR (5 downto 0);
    IN_OFFSET : IN STD_LOGIC_VECTOR (29 downto 0);
    RowIncreaseLength_V : IN STD_LOGIC_VECTOR (8 downto 0);
    IHxIW_18b_V : IN STD_LOGIC_VECTOR (17 downto 0);
    ColIncreaseLength_V : IN STD_LOGIC_VECTOR (5 downto 0);
    IsRowPixel : IN STD_LOGIC;
    enable : IN STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of mmcpy_inputpixel_m2b is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_inoffset : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal enable_read_read_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal storemerge_fu_322_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge_reg_690 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_reg_697 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_59_fu_350_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_reg_702 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_100_3_fu_366_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_100_3_reg_712 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_62_fu_372_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_62_reg_717 : STD_LOGIC_VECTOR (0 downto 0);
    signal RowIntNum_2_fu_415_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal RowIntNum_2_reg_722 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_21_reg_728 : STD_LOGIC_VECTOR (30 downto 0);
    signal RowBeginByte_V1_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal RowBeginByte_V1_reg_733 : STD_LOGIC_VECTOR (0 downto 0);
    signal RowIntNum_1_fu_481_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal RowIntNum_1_reg_738 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_23_reg_743 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_26_reg_748 : STD_LOGIC_VECTOR (30 downto 0);
    signal RowBeginByte_V3_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal RowBeginByte_V3_reg_753 : STD_LOGIC_VECTOR (0 downto 0);
    signal RowIntNum_3_fu_572_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal RowIntNum_3_reg_758 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mmcpy_inputport_fu_250_ap_start : STD_LOGIC;
    signal grp_mmcpy_inputport_fu_250_ap_done : STD_LOGIC;
    signal grp_mmcpy_inputport_fu_250_ap_idle : STD_LOGIC;
    signal grp_mmcpy_inputport_fu_250_ap_ready : STD_LOGIC;
    signal grp_mmcpy_inputport_fu_250_m_axi_input_r_AWVALID : STD_LOGIC;
    signal grp_mmcpy_inputport_fu_250_m_axi_input_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputport_fu_250_m_axi_input_r_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputport_fu_250_m_axi_input_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputport_fu_250_m_axi_input_r_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_inputport_fu_250_m_axi_input_r_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_inputport_fu_250_m_axi_input_r_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_inputport_fu_250_m_axi_input_r_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputport_fu_250_m_axi_input_r_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_inputport_fu_250_m_axi_input_r_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputport_fu_250_m_axi_input_r_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputport_fu_250_m_axi_input_r_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputport_fu_250_m_axi_input_r_WVALID : STD_LOGIC;
    signal grp_mmcpy_inputport_fu_250_m_axi_input_r_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputport_fu_250_m_axi_input_r_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputport_fu_250_m_axi_input_r_WLAST : STD_LOGIC;
    signal grp_mmcpy_inputport_fu_250_m_axi_input_r_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputport_fu_250_m_axi_input_r_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputport_fu_250_m_axi_input_r_ARVALID : STD_LOGIC;
    signal grp_mmcpy_inputport_fu_250_m_axi_input_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputport_fu_250_m_axi_input_r_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputport_fu_250_m_axi_input_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputport_fu_250_m_axi_input_r_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_inputport_fu_250_m_axi_input_r_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_inputport_fu_250_m_axi_input_r_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_inputport_fu_250_m_axi_input_r_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputport_fu_250_m_axi_input_r_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_inputport_fu_250_m_axi_input_r_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputport_fu_250_m_axi_input_r_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputport_fu_250_m_axi_input_r_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputport_fu_250_m_axi_input_r_RREADY : STD_LOGIC;
    signal grp_mmcpy_inputport_fu_250_m_axi_input_r_BREADY : STD_LOGIC;
    signal grp_mmcpy_inputport_fu_250_input_memcpy_buffer_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_mmcpy_inputport_fu_250_input_memcpy_buffer_ce0 : STD_LOGIC;
    signal grp_mmcpy_inputport_fu_250_input_memcpy_buffer_we0 : STD_LOGIC;
    signal grp_mmcpy_inputport_fu_250_input_memcpy_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputport2_fu_262_ap_start : STD_LOGIC;
    signal grp_mmcpy_inputport2_fu_262_ap_done : STD_LOGIC;
    signal grp_mmcpy_inputport2_fu_262_ap_idle : STD_LOGIC;
    signal grp_mmcpy_inputport2_fu_262_ap_ready : STD_LOGIC;
    signal grp_mmcpy_inputport2_fu_262_m_axi_input_r_AWVALID : STD_LOGIC;
    signal grp_mmcpy_inputport2_fu_262_m_axi_input_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputport2_fu_262_m_axi_input_r_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputport2_fu_262_m_axi_input_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputport2_fu_262_m_axi_input_r_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_inputport2_fu_262_m_axi_input_r_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_inputport2_fu_262_m_axi_input_r_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_inputport2_fu_262_m_axi_input_r_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputport2_fu_262_m_axi_input_r_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_inputport2_fu_262_m_axi_input_r_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputport2_fu_262_m_axi_input_r_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputport2_fu_262_m_axi_input_r_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputport2_fu_262_m_axi_input_r_WVALID : STD_LOGIC;
    signal grp_mmcpy_inputport2_fu_262_m_axi_input_r_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputport2_fu_262_m_axi_input_r_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputport2_fu_262_m_axi_input_r_WLAST : STD_LOGIC;
    signal grp_mmcpy_inputport2_fu_262_m_axi_input_r_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputport2_fu_262_m_axi_input_r_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputport2_fu_262_m_axi_input_r_ARVALID : STD_LOGIC;
    signal grp_mmcpy_inputport2_fu_262_m_axi_input_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputport2_fu_262_m_axi_input_r_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputport2_fu_262_m_axi_input_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputport2_fu_262_m_axi_input_r_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_inputport2_fu_262_m_axi_input_r_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_inputport2_fu_262_m_axi_input_r_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_inputport2_fu_262_m_axi_input_r_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputport2_fu_262_m_axi_input_r_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_inputport2_fu_262_m_axi_input_r_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputport2_fu_262_m_axi_input_r_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputport2_fu_262_m_axi_input_r_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputport2_fu_262_m_axi_input_r_RREADY : STD_LOGIC;
    signal grp_mmcpy_inputport2_fu_262_m_axi_input_r_BREADY : STD_LOGIC;
    signal grp_mmcpy_inputport2_fu_262_input_memcpy_buffer_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_mmcpy_inputport2_fu_262_input_memcpy_buffer_ce0 : STD_LOGIC;
    signal grp_mmcpy_inputport2_fu_262_input_memcpy_buffer_we0 : STD_LOGIC;
    signal grp_mmcpy_inputport2_fu_262_input_memcpy_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputport1_fu_274_ap_start : STD_LOGIC;
    signal grp_mmcpy_inputport1_fu_274_ap_done : STD_LOGIC;
    signal grp_mmcpy_inputport1_fu_274_ap_idle : STD_LOGIC;
    signal grp_mmcpy_inputport1_fu_274_ap_ready : STD_LOGIC;
    signal grp_mmcpy_inputport1_fu_274_m_axi_input_r_AWVALID : STD_LOGIC;
    signal grp_mmcpy_inputport1_fu_274_m_axi_input_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputport1_fu_274_m_axi_input_r_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputport1_fu_274_m_axi_input_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputport1_fu_274_m_axi_input_r_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_inputport1_fu_274_m_axi_input_r_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_inputport1_fu_274_m_axi_input_r_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_inputport1_fu_274_m_axi_input_r_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputport1_fu_274_m_axi_input_r_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_inputport1_fu_274_m_axi_input_r_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputport1_fu_274_m_axi_input_r_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputport1_fu_274_m_axi_input_r_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputport1_fu_274_m_axi_input_r_WVALID : STD_LOGIC;
    signal grp_mmcpy_inputport1_fu_274_m_axi_input_r_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputport1_fu_274_m_axi_input_r_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputport1_fu_274_m_axi_input_r_WLAST : STD_LOGIC;
    signal grp_mmcpy_inputport1_fu_274_m_axi_input_r_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputport1_fu_274_m_axi_input_r_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputport1_fu_274_m_axi_input_r_ARVALID : STD_LOGIC;
    signal grp_mmcpy_inputport1_fu_274_m_axi_input_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputport1_fu_274_m_axi_input_r_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputport1_fu_274_m_axi_input_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputport1_fu_274_m_axi_input_r_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_inputport1_fu_274_m_axi_input_r_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_inputport1_fu_274_m_axi_input_r_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_inputport1_fu_274_m_axi_input_r_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputport1_fu_274_m_axi_input_r_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_inputport1_fu_274_m_axi_input_r_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputport1_fu_274_m_axi_input_r_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputport1_fu_274_m_axi_input_r_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputport1_fu_274_m_axi_input_r_RREADY : STD_LOGIC;
    signal grp_mmcpy_inputport1_fu_274_m_axi_input_r_BREADY : STD_LOGIC;
    signal grp_mmcpy_inputport1_fu_274_input_memcpy_buffer_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_mmcpy_inputport1_fu_274_input_memcpy_buffer_ce0 : STD_LOGIC;
    signal grp_mmcpy_inputport1_fu_274_input_memcpy_buffer_we0 : STD_LOGIC;
    signal grp_mmcpy_inputport1_fu_274_input_memcpy_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputport3_fu_286_ap_start : STD_LOGIC;
    signal grp_mmcpy_inputport3_fu_286_ap_done : STD_LOGIC;
    signal grp_mmcpy_inputport3_fu_286_ap_idle : STD_LOGIC;
    signal grp_mmcpy_inputport3_fu_286_ap_ready : STD_LOGIC;
    signal grp_mmcpy_inputport3_fu_286_m_axi_input_r_AWVALID : STD_LOGIC;
    signal grp_mmcpy_inputport3_fu_286_m_axi_input_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputport3_fu_286_m_axi_input_r_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputport3_fu_286_m_axi_input_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputport3_fu_286_m_axi_input_r_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_inputport3_fu_286_m_axi_input_r_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_inputport3_fu_286_m_axi_input_r_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_inputport3_fu_286_m_axi_input_r_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputport3_fu_286_m_axi_input_r_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_inputport3_fu_286_m_axi_input_r_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputport3_fu_286_m_axi_input_r_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputport3_fu_286_m_axi_input_r_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputport3_fu_286_m_axi_input_r_WVALID : STD_LOGIC;
    signal grp_mmcpy_inputport3_fu_286_m_axi_input_r_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputport3_fu_286_m_axi_input_r_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputport3_fu_286_m_axi_input_r_WLAST : STD_LOGIC;
    signal grp_mmcpy_inputport3_fu_286_m_axi_input_r_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputport3_fu_286_m_axi_input_r_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputport3_fu_286_m_axi_input_r_ARVALID : STD_LOGIC;
    signal grp_mmcpy_inputport3_fu_286_m_axi_input_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputport3_fu_286_m_axi_input_r_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputport3_fu_286_m_axi_input_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_inputport3_fu_286_m_axi_input_r_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_inputport3_fu_286_m_axi_input_r_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_inputport3_fu_286_m_axi_input_r_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_inputport3_fu_286_m_axi_input_r_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputport3_fu_286_m_axi_input_r_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_inputport3_fu_286_m_axi_input_r_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputport3_fu_286_m_axi_input_r_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_inputport3_fu_286_m_axi_input_r_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputport3_fu_286_m_axi_input_r_RREADY : STD_LOGIC;
    signal grp_mmcpy_inputport3_fu_286_m_axi_input_r_BREADY : STD_LOGIC;
    signal grp_mmcpy_inputport3_fu_286_input_memcpy_buffer_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_mmcpy_inputport3_fu_286_input_memcpy_buffer_ce0 : STD_LOGIC;
    signal grp_mmcpy_inputport3_fu_286_input_memcpy_buffer_we0 : STD_LOGIC;
    signal grp_mmcpy_inputport3_fu_286_input_memcpy_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_RowBeginByte_1_V_wr_phi_fu_217_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal RowBeginByte_1_V_wr_reg_214 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3_on_subcall_done : BOOLEAN;
    signal ap_phi_mux_RowBeginByte_2_V_wr_phi_fu_226_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal RowBeginByte_2_V_wr_reg_223 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_RowBeginByte_3_V_wr_phi_fu_235_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal RowBeginByte_3_V_wr_reg_232 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_RowBeginByte_0_V_wr_phi_fu_244_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal RowBeginByte_0_V_wr_reg_241 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_inputport_fu_250_ap_start_reg : STD_LOGIC := '0';
    signal grp_mmcpy_inputport2_fu_262_ap_start_reg : STD_LOGIC := '0';
    signal grp_mmcpy_inputport1_fu_274_ap_start_reg : STD_LOGIC := '0';
    signal grp_mmcpy_inputport3_fu_286_ap_start_reg : STD_LOGIC := '0';
    signal tmp_fu_312_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal init_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal IN_OFFSET_cast_fu_298_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_316_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl_fu_354_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_shl_cast_fu_362_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_53_cast5_fu_336_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal rhs_V_fu_382_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal lhs_V_fu_379_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_60_fu_385_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_fu_388_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_56_cast_fu_399_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_55_cast3_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_409_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_31_fu_376_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_101_1_fu_428_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_61_fu_425_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_1_fu_449_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_1_fu_453_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_106_1_cast_fu_465_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_105_1_cast2_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_109_1_fu_475_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_100_2_fu_490_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_100_2_cast_fu_497_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_101_2_fu_501_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_100_3_cast_fu_517_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_101_3_fu_520_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_3_fu_540_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_3_fu_544_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_106_3_cast_fu_556_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_105_3_cast1_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_109_3_fu_566_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component mmcpy_inputport IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_input_r_AWVALID : OUT STD_LOGIC;
        m_axi_input_r_AWREADY : IN STD_LOGIC;
        m_axi_input_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_WVALID : OUT STD_LOGIC;
        m_axi_input_r_WREADY : IN STD_LOGIC;
        m_axi_input_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_WLAST : OUT STD_LOGIC;
        m_axi_input_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_ARVALID : OUT STD_LOGIC;
        m_axi_input_r_ARREADY : IN STD_LOGIC;
        m_axi_input_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_RVALID : IN STD_LOGIC;
        m_axi_input_r_RREADY : OUT STD_LOGIC;
        m_axi_input_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_RLAST : IN STD_LOGIC;
        m_axi_input_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_BVALID : IN STD_LOGIC;
        m_axi_input_r_BREADY : OUT STD_LOGIC;
        m_axi_input_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        input_memcpy_buffer_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        input_memcpy_buffer_ce0 : OUT STD_LOGIC;
        input_memcpy_buffer_we0 : OUT STD_LOGIC;
        input_memcpy_buffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        TN_MIN_V : IN STD_LOGIC_VECTOR (2 downto 0);
        RowOffset : IN STD_LOGIC_VECTOR (30 downto 0);
        RowIntNum : IN STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component mmcpy_inputport2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_input_r_AWVALID : OUT STD_LOGIC;
        m_axi_input_r_AWREADY : IN STD_LOGIC;
        m_axi_input_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_WVALID : OUT STD_LOGIC;
        m_axi_input_r_WREADY : IN STD_LOGIC;
        m_axi_input_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_WLAST : OUT STD_LOGIC;
        m_axi_input_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_ARVALID : OUT STD_LOGIC;
        m_axi_input_r_ARREADY : IN STD_LOGIC;
        m_axi_input_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_RVALID : IN STD_LOGIC;
        m_axi_input_r_RREADY : OUT STD_LOGIC;
        m_axi_input_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_RLAST : IN STD_LOGIC;
        m_axi_input_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_BVALID : IN STD_LOGIC;
        m_axi_input_r_BREADY : OUT STD_LOGIC;
        m_axi_input_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        input_memcpy_buffer_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        input_memcpy_buffer_ce0 : OUT STD_LOGIC;
        input_memcpy_buffer_we0 : OUT STD_LOGIC;
        input_memcpy_buffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        TN_MIN_V : IN STD_LOGIC_VECTOR (2 downto 0);
        RowOffset : IN STD_LOGIC_VECTOR (30 downto 0);
        RowIntNum : IN STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component mmcpy_inputport1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_input_r_AWVALID : OUT STD_LOGIC;
        m_axi_input_r_AWREADY : IN STD_LOGIC;
        m_axi_input_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_WVALID : OUT STD_LOGIC;
        m_axi_input_r_WREADY : IN STD_LOGIC;
        m_axi_input_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_WLAST : OUT STD_LOGIC;
        m_axi_input_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_ARVALID : OUT STD_LOGIC;
        m_axi_input_r_ARREADY : IN STD_LOGIC;
        m_axi_input_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_RVALID : IN STD_LOGIC;
        m_axi_input_r_RREADY : OUT STD_LOGIC;
        m_axi_input_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_RLAST : IN STD_LOGIC;
        m_axi_input_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_BVALID : IN STD_LOGIC;
        m_axi_input_r_BREADY : OUT STD_LOGIC;
        m_axi_input_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        input_memcpy_buffer_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        input_memcpy_buffer_ce0 : OUT STD_LOGIC;
        input_memcpy_buffer_we0 : OUT STD_LOGIC;
        input_memcpy_buffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        TN_MIN_V : IN STD_LOGIC_VECTOR (2 downto 0);
        RowOffset : IN STD_LOGIC_VECTOR (30 downto 0);
        RowIntNum : IN STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component mmcpy_inputport3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_input_r_AWVALID : OUT STD_LOGIC;
        m_axi_input_r_AWREADY : IN STD_LOGIC;
        m_axi_input_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_WVALID : OUT STD_LOGIC;
        m_axi_input_r_WREADY : IN STD_LOGIC;
        m_axi_input_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_WLAST : OUT STD_LOGIC;
        m_axi_input_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_ARVALID : OUT STD_LOGIC;
        m_axi_input_r_ARREADY : IN STD_LOGIC;
        m_axi_input_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_RVALID : IN STD_LOGIC;
        m_axi_input_r_RREADY : OUT STD_LOGIC;
        m_axi_input_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_RLAST : IN STD_LOGIC;
        m_axi_input_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_BVALID : IN STD_LOGIC;
        m_axi_input_r_BREADY : OUT STD_LOGIC;
        m_axi_input_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        input_memcpy_buffer_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        input_memcpy_buffer_ce0 : OUT STD_LOGIC;
        input_memcpy_buffer_we0 : OUT STD_LOGIC;
        input_memcpy_buffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        TN_MIN_V : IN STD_LOGIC_VECTOR (2 downto 0);
        RowOffset : IN STD_LOGIC_VECTOR (30 downto 0);
        RowIntNum : IN STD_LOGIC_VECTOR (5 downto 0) );
    end component;



begin
    grp_mmcpy_inputport_fu_250 : component mmcpy_inputport
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mmcpy_inputport_fu_250_ap_start,
        ap_done => grp_mmcpy_inputport_fu_250_ap_done,
        ap_idle => grp_mmcpy_inputport_fu_250_ap_idle,
        ap_ready => grp_mmcpy_inputport_fu_250_ap_ready,
        m_axi_input_r_AWVALID => grp_mmcpy_inputport_fu_250_m_axi_input_r_AWVALID,
        m_axi_input_r_AWREADY => ap_const_logic_0,
        m_axi_input_r_AWADDR => grp_mmcpy_inputport_fu_250_m_axi_input_r_AWADDR,
        m_axi_input_r_AWID => grp_mmcpy_inputport_fu_250_m_axi_input_r_AWID,
        m_axi_input_r_AWLEN => grp_mmcpy_inputport_fu_250_m_axi_input_r_AWLEN,
        m_axi_input_r_AWSIZE => grp_mmcpy_inputport_fu_250_m_axi_input_r_AWSIZE,
        m_axi_input_r_AWBURST => grp_mmcpy_inputport_fu_250_m_axi_input_r_AWBURST,
        m_axi_input_r_AWLOCK => grp_mmcpy_inputport_fu_250_m_axi_input_r_AWLOCK,
        m_axi_input_r_AWCACHE => grp_mmcpy_inputport_fu_250_m_axi_input_r_AWCACHE,
        m_axi_input_r_AWPROT => grp_mmcpy_inputport_fu_250_m_axi_input_r_AWPROT,
        m_axi_input_r_AWQOS => grp_mmcpy_inputport_fu_250_m_axi_input_r_AWQOS,
        m_axi_input_r_AWREGION => grp_mmcpy_inputport_fu_250_m_axi_input_r_AWREGION,
        m_axi_input_r_AWUSER => grp_mmcpy_inputport_fu_250_m_axi_input_r_AWUSER,
        m_axi_input_r_WVALID => grp_mmcpy_inputport_fu_250_m_axi_input_r_WVALID,
        m_axi_input_r_WREADY => ap_const_logic_0,
        m_axi_input_r_WDATA => grp_mmcpy_inputport_fu_250_m_axi_input_r_WDATA,
        m_axi_input_r_WSTRB => grp_mmcpy_inputport_fu_250_m_axi_input_r_WSTRB,
        m_axi_input_r_WLAST => grp_mmcpy_inputport_fu_250_m_axi_input_r_WLAST,
        m_axi_input_r_WID => grp_mmcpy_inputport_fu_250_m_axi_input_r_WID,
        m_axi_input_r_WUSER => grp_mmcpy_inputport_fu_250_m_axi_input_r_WUSER,
        m_axi_input_r_ARVALID => grp_mmcpy_inputport_fu_250_m_axi_input_r_ARVALID,
        m_axi_input_r_ARREADY => m_axi_input_r_ARREADY,
        m_axi_input_r_ARADDR => grp_mmcpy_inputport_fu_250_m_axi_input_r_ARADDR,
        m_axi_input_r_ARID => grp_mmcpy_inputport_fu_250_m_axi_input_r_ARID,
        m_axi_input_r_ARLEN => grp_mmcpy_inputport_fu_250_m_axi_input_r_ARLEN,
        m_axi_input_r_ARSIZE => grp_mmcpy_inputport_fu_250_m_axi_input_r_ARSIZE,
        m_axi_input_r_ARBURST => grp_mmcpy_inputport_fu_250_m_axi_input_r_ARBURST,
        m_axi_input_r_ARLOCK => grp_mmcpy_inputport_fu_250_m_axi_input_r_ARLOCK,
        m_axi_input_r_ARCACHE => grp_mmcpy_inputport_fu_250_m_axi_input_r_ARCACHE,
        m_axi_input_r_ARPROT => grp_mmcpy_inputport_fu_250_m_axi_input_r_ARPROT,
        m_axi_input_r_ARQOS => grp_mmcpy_inputport_fu_250_m_axi_input_r_ARQOS,
        m_axi_input_r_ARREGION => grp_mmcpy_inputport_fu_250_m_axi_input_r_ARREGION,
        m_axi_input_r_ARUSER => grp_mmcpy_inputport_fu_250_m_axi_input_r_ARUSER,
        m_axi_input_r_RVALID => m_axi_input_r_RVALID,
        m_axi_input_r_RREADY => grp_mmcpy_inputport_fu_250_m_axi_input_r_RREADY,
        m_axi_input_r_RDATA => m_axi_input_r_RDATA,
        m_axi_input_r_RLAST => m_axi_input_r_RLAST,
        m_axi_input_r_RID => m_axi_input_r_RID,
        m_axi_input_r_RUSER => m_axi_input_r_RUSER,
        m_axi_input_r_RRESP => m_axi_input_r_RRESP,
        m_axi_input_r_BVALID => ap_const_logic_0,
        m_axi_input_r_BREADY => grp_mmcpy_inputport_fu_250_m_axi_input_r_BREADY,
        m_axi_input_r_BRESP => ap_const_lv2_0,
        m_axi_input_r_BID => ap_const_lv1_0,
        m_axi_input_r_BUSER => ap_const_lv1_0,
        input_offset => input_offset,
        input_memcpy_buffer_address0 => grp_mmcpy_inputport_fu_250_input_memcpy_buffer_address0,
        input_memcpy_buffer_ce0 => grp_mmcpy_inputport_fu_250_input_memcpy_buffer_ce0,
        input_memcpy_buffer_we0 => grp_mmcpy_inputport_fu_250_input_memcpy_buffer_we0,
        input_memcpy_buffer_d0 => grp_mmcpy_inputport_fu_250_input_memcpy_buffer_d0,
        TN_MIN_V => TN_MIN_3b_V,
        RowOffset => tmp_18_reg_697,
        RowIntNum => RowIntNum_2_reg_722);

    grp_mmcpy_inputport2_fu_262 : component mmcpy_inputport2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mmcpy_inputport2_fu_262_ap_start,
        ap_done => grp_mmcpy_inputport2_fu_262_ap_done,
        ap_idle => grp_mmcpy_inputport2_fu_262_ap_idle,
        ap_ready => grp_mmcpy_inputport2_fu_262_ap_ready,
        m_axi_input_r_AWVALID => grp_mmcpy_inputport2_fu_262_m_axi_input_r_AWVALID,
        m_axi_input_r_AWREADY => ap_const_logic_0,
        m_axi_input_r_AWADDR => grp_mmcpy_inputport2_fu_262_m_axi_input_r_AWADDR,
        m_axi_input_r_AWID => grp_mmcpy_inputport2_fu_262_m_axi_input_r_AWID,
        m_axi_input_r_AWLEN => grp_mmcpy_inputport2_fu_262_m_axi_input_r_AWLEN,
        m_axi_input_r_AWSIZE => grp_mmcpy_inputport2_fu_262_m_axi_input_r_AWSIZE,
        m_axi_input_r_AWBURST => grp_mmcpy_inputport2_fu_262_m_axi_input_r_AWBURST,
        m_axi_input_r_AWLOCK => grp_mmcpy_inputport2_fu_262_m_axi_input_r_AWLOCK,
        m_axi_input_r_AWCACHE => grp_mmcpy_inputport2_fu_262_m_axi_input_r_AWCACHE,
        m_axi_input_r_AWPROT => grp_mmcpy_inputport2_fu_262_m_axi_input_r_AWPROT,
        m_axi_input_r_AWQOS => grp_mmcpy_inputport2_fu_262_m_axi_input_r_AWQOS,
        m_axi_input_r_AWREGION => grp_mmcpy_inputport2_fu_262_m_axi_input_r_AWREGION,
        m_axi_input_r_AWUSER => grp_mmcpy_inputport2_fu_262_m_axi_input_r_AWUSER,
        m_axi_input_r_WVALID => grp_mmcpy_inputport2_fu_262_m_axi_input_r_WVALID,
        m_axi_input_r_WREADY => ap_const_logic_0,
        m_axi_input_r_WDATA => grp_mmcpy_inputport2_fu_262_m_axi_input_r_WDATA,
        m_axi_input_r_WSTRB => grp_mmcpy_inputport2_fu_262_m_axi_input_r_WSTRB,
        m_axi_input_r_WLAST => grp_mmcpy_inputport2_fu_262_m_axi_input_r_WLAST,
        m_axi_input_r_WID => grp_mmcpy_inputport2_fu_262_m_axi_input_r_WID,
        m_axi_input_r_WUSER => grp_mmcpy_inputport2_fu_262_m_axi_input_r_WUSER,
        m_axi_input_r_ARVALID => grp_mmcpy_inputport2_fu_262_m_axi_input_r_ARVALID,
        m_axi_input_r_ARREADY => m_axi_input2_ARREADY,
        m_axi_input_r_ARADDR => grp_mmcpy_inputport2_fu_262_m_axi_input_r_ARADDR,
        m_axi_input_r_ARID => grp_mmcpy_inputport2_fu_262_m_axi_input_r_ARID,
        m_axi_input_r_ARLEN => grp_mmcpy_inputport2_fu_262_m_axi_input_r_ARLEN,
        m_axi_input_r_ARSIZE => grp_mmcpy_inputport2_fu_262_m_axi_input_r_ARSIZE,
        m_axi_input_r_ARBURST => grp_mmcpy_inputport2_fu_262_m_axi_input_r_ARBURST,
        m_axi_input_r_ARLOCK => grp_mmcpy_inputport2_fu_262_m_axi_input_r_ARLOCK,
        m_axi_input_r_ARCACHE => grp_mmcpy_inputport2_fu_262_m_axi_input_r_ARCACHE,
        m_axi_input_r_ARPROT => grp_mmcpy_inputport2_fu_262_m_axi_input_r_ARPROT,
        m_axi_input_r_ARQOS => grp_mmcpy_inputport2_fu_262_m_axi_input_r_ARQOS,
        m_axi_input_r_ARREGION => grp_mmcpy_inputport2_fu_262_m_axi_input_r_ARREGION,
        m_axi_input_r_ARUSER => grp_mmcpy_inputport2_fu_262_m_axi_input_r_ARUSER,
        m_axi_input_r_RVALID => m_axi_input2_RVALID,
        m_axi_input_r_RREADY => grp_mmcpy_inputport2_fu_262_m_axi_input_r_RREADY,
        m_axi_input_r_RDATA => m_axi_input2_RDATA,
        m_axi_input_r_RLAST => m_axi_input2_RLAST,
        m_axi_input_r_RID => m_axi_input2_RID,
        m_axi_input_r_RUSER => m_axi_input2_RUSER,
        m_axi_input_r_RRESP => m_axi_input2_RRESP,
        m_axi_input_r_BVALID => ap_const_logic_0,
        m_axi_input_r_BREADY => grp_mmcpy_inputport2_fu_262_m_axi_input_r_BREADY,
        m_axi_input_r_BRESP => ap_const_lv2_0,
        m_axi_input_r_BID => ap_const_lv1_0,
        m_axi_input_r_BUSER => ap_const_lv1_0,
        input_offset => input2_offset,
        input_memcpy_buffer_address0 => grp_mmcpy_inputport2_fu_262_input_memcpy_buffer_address0,
        input_memcpy_buffer_ce0 => grp_mmcpy_inputport2_fu_262_input_memcpy_buffer_ce0,
        input_memcpy_buffer_we0 => grp_mmcpy_inputport2_fu_262_input_memcpy_buffer_we0,
        input_memcpy_buffer_d0 => grp_mmcpy_inputport2_fu_262_input_memcpy_buffer_d0,
        TN_MIN_V => TN_MIN_3b_V,
        RowOffset => tmp_23_reg_743,
        RowIntNum => RowIntNum_2_reg_722);

    grp_mmcpy_inputport1_fu_274 : component mmcpy_inputport1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mmcpy_inputport1_fu_274_ap_start,
        ap_done => grp_mmcpy_inputport1_fu_274_ap_done,
        ap_idle => grp_mmcpy_inputport1_fu_274_ap_idle,
        ap_ready => grp_mmcpy_inputport1_fu_274_ap_ready,
        m_axi_input_r_AWVALID => grp_mmcpy_inputport1_fu_274_m_axi_input_r_AWVALID,
        m_axi_input_r_AWREADY => ap_const_logic_0,
        m_axi_input_r_AWADDR => grp_mmcpy_inputport1_fu_274_m_axi_input_r_AWADDR,
        m_axi_input_r_AWID => grp_mmcpy_inputport1_fu_274_m_axi_input_r_AWID,
        m_axi_input_r_AWLEN => grp_mmcpy_inputport1_fu_274_m_axi_input_r_AWLEN,
        m_axi_input_r_AWSIZE => grp_mmcpy_inputport1_fu_274_m_axi_input_r_AWSIZE,
        m_axi_input_r_AWBURST => grp_mmcpy_inputport1_fu_274_m_axi_input_r_AWBURST,
        m_axi_input_r_AWLOCK => grp_mmcpy_inputport1_fu_274_m_axi_input_r_AWLOCK,
        m_axi_input_r_AWCACHE => grp_mmcpy_inputport1_fu_274_m_axi_input_r_AWCACHE,
        m_axi_input_r_AWPROT => grp_mmcpy_inputport1_fu_274_m_axi_input_r_AWPROT,
        m_axi_input_r_AWQOS => grp_mmcpy_inputport1_fu_274_m_axi_input_r_AWQOS,
        m_axi_input_r_AWREGION => grp_mmcpy_inputport1_fu_274_m_axi_input_r_AWREGION,
        m_axi_input_r_AWUSER => grp_mmcpy_inputport1_fu_274_m_axi_input_r_AWUSER,
        m_axi_input_r_WVALID => grp_mmcpy_inputport1_fu_274_m_axi_input_r_WVALID,
        m_axi_input_r_WREADY => ap_const_logic_0,
        m_axi_input_r_WDATA => grp_mmcpy_inputport1_fu_274_m_axi_input_r_WDATA,
        m_axi_input_r_WSTRB => grp_mmcpy_inputport1_fu_274_m_axi_input_r_WSTRB,
        m_axi_input_r_WLAST => grp_mmcpy_inputport1_fu_274_m_axi_input_r_WLAST,
        m_axi_input_r_WID => grp_mmcpy_inputport1_fu_274_m_axi_input_r_WID,
        m_axi_input_r_WUSER => grp_mmcpy_inputport1_fu_274_m_axi_input_r_WUSER,
        m_axi_input_r_ARVALID => grp_mmcpy_inputport1_fu_274_m_axi_input_r_ARVALID,
        m_axi_input_r_ARREADY => m_axi_input1_ARREADY,
        m_axi_input_r_ARADDR => grp_mmcpy_inputport1_fu_274_m_axi_input_r_ARADDR,
        m_axi_input_r_ARID => grp_mmcpy_inputport1_fu_274_m_axi_input_r_ARID,
        m_axi_input_r_ARLEN => grp_mmcpy_inputport1_fu_274_m_axi_input_r_ARLEN,
        m_axi_input_r_ARSIZE => grp_mmcpy_inputport1_fu_274_m_axi_input_r_ARSIZE,
        m_axi_input_r_ARBURST => grp_mmcpy_inputport1_fu_274_m_axi_input_r_ARBURST,
        m_axi_input_r_ARLOCK => grp_mmcpy_inputport1_fu_274_m_axi_input_r_ARLOCK,
        m_axi_input_r_ARCACHE => grp_mmcpy_inputport1_fu_274_m_axi_input_r_ARCACHE,
        m_axi_input_r_ARPROT => grp_mmcpy_inputport1_fu_274_m_axi_input_r_ARPROT,
        m_axi_input_r_ARQOS => grp_mmcpy_inputport1_fu_274_m_axi_input_r_ARQOS,
        m_axi_input_r_ARREGION => grp_mmcpy_inputport1_fu_274_m_axi_input_r_ARREGION,
        m_axi_input_r_ARUSER => grp_mmcpy_inputport1_fu_274_m_axi_input_r_ARUSER,
        m_axi_input_r_RVALID => m_axi_input1_RVALID,
        m_axi_input_r_RREADY => grp_mmcpy_inputport1_fu_274_m_axi_input_r_RREADY,
        m_axi_input_r_RDATA => m_axi_input1_RDATA,
        m_axi_input_r_RLAST => m_axi_input1_RLAST,
        m_axi_input_r_RID => m_axi_input1_RID,
        m_axi_input_r_RUSER => m_axi_input1_RUSER,
        m_axi_input_r_RRESP => m_axi_input1_RRESP,
        m_axi_input_r_BVALID => ap_const_logic_0,
        m_axi_input_r_BREADY => grp_mmcpy_inputport1_fu_274_m_axi_input_r_BREADY,
        m_axi_input_r_BRESP => ap_const_lv2_0,
        m_axi_input_r_BID => ap_const_lv1_0,
        m_axi_input_r_BUSER => ap_const_lv1_0,
        input_offset => input1_offset,
        input_memcpy_buffer_address0 => grp_mmcpy_inputport1_fu_274_input_memcpy_buffer_address0,
        input_memcpy_buffer_ce0 => grp_mmcpy_inputport1_fu_274_input_memcpy_buffer_ce0,
        input_memcpy_buffer_we0 => grp_mmcpy_inputport1_fu_274_input_memcpy_buffer_we0,
        input_memcpy_buffer_d0 => grp_mmcpy_inputport1_fu_274_input_memcpy_buffer_d0,
        TN_MIN_V => TN_MIN_3b_V,
        RowOffset => tmp_21_reg_728,
        RowIntNum => RowIntNum_1_reg_738);

    grp_mmcpy_inputport3_fu_286 : component mmcpy_inputport3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mmcpy_inputport3_fu_286_ap_start,
        ap_done => grp_mmcpy_inputport3_fu_286_ap_done,
        ap_idle => grp_mmcpy_inputport3_fu_286_ap_idle,
        ap_ready => grp_mmcpy_inputport3_fu_286_ap_ready,
        m_axi_input_r_AWVALID => grp_mmcpy_inputport3_fu_286_m_axi_input_r_AWVALID,
        m_axi_input_r_AWREADY => ap_const_logic_0,
        m_axi_input_r_AWADDR => grp_mmcpy_inputport3_fu_286_m_axi_input_r_AWADDR,
        m_axi_input_r_AWID => grp_mmcpy_inputport3_fu_286_m_axi_input_r_AWID,
        m_axi_input_r_AWLEN => grp_mmcpy_inputport3_fu_286_m_axi_input_r_AWLEN,
        m_axi_input_r_AWSIZE => grp_mmcpy_inputport3_fu_286_m_axi_input_r_AWSIZE,
        m_axi_input_r_AWBURST => grp_mmcpy_inputport3_fu_286_m_axi_input_r_AWBURST,
        m_axi_input_r_AWLOCK => grp_mmcpy_inputport3_fu_286_m_axi_input_r_AWLOCK,
        m_axi_input_r_AWCACHE => grp_mmcpy_inputport3_fu_286_m_axi_input_r_AWCACHE,
        m_axi_input_r_AWPROT => grp_mmcpy_inputport3_fu_286_m_axi_input_r_AWPROT,
        m_axi_input_r_AWQOS => grp_mmcpy_inputport3_fu_286_m_axi_input_r_AWQOS,
        m_axi_input_r_AWREGION => grp_mmcpy_inputport3_fu_286_m_axi_input_r_AWREGION,
        m_axi_input_r_AWUSER => grp_mmcpy_inputport3_fu_286_m_axi_input_r_AWUSER,
        m_axi_input_r_WVALID => grp_mmcpy_inputport3_fu_286_m_axi_input_r_WVALID,
        m_axi_input_r_WREADY => ap_const_logic_0,
        m_axi_input_r_WDATA => grp_mmcpy_inputport3_fu_286_m_axi_input_r_WDATA,
        m_axi_input_r_WSTRB => grp_mmcpy_inputport3_fu_286_m_axi_input_r_WSTRB,
        m_axi_input_r_WLAST => grp_mmcpy_inputport3_fu_286_m_axi_input_r_WLAST,
        m_axi_input_r_WID => grp_mmcpy_inputport3_fu_286_m_axi_input_r_WID,
        m_axi_input_r_WUSER => grp_mmcpy_inputport3_fu_286_m_axi_input_r_WUSER,
        m_axi_input_r_ARVALID => grp_mmcpy_inputport3_fu_286_m_axi_input_r_ARVALID,
        m_axi_input_r_ARREADY => m_axi_input3_ARREADY,
        m_axi_input_r_ARADDR => grp_mmcpy_inputport3_fu_286_m_axi_input_r_ARADDR,
        m_axi_input_r_ARID => grp_mmcpy_inputport3_fu_286_m_axi_input_r_ARID,
        m_axi_input_r_ARLEN => grp_mmcpy_inputport3_fu_286_m_axi_input_r_ARLEN,
        m_axi_input_r_ARSIZE => grp_mmcpy_inputport3_fu_286_m_axi_input_r_ARSIZE,
        m_axi_input_r_ARBURST => grp_mmcpy_inputport3_fu_286_m_axi_input_r_ARBURST,
        m_axi_input_r_ARLOCK => grp_mmcpy_inputport3_fu_286_m_axi_input_r_ARLOCK,
        m_axi_input_r_ARCACHE => grp_mmcpy_inputport3_fu_286_m_axi_input_r_ARCACHE,
        m_axi_input_r_ARPROT => grp_mmcpy_inputport3_fu_286_m_axi_input_r_ARPROT,
        m_axi_input_r_ARQOS => grp_mmcpy_inputport3_fu_286_m_axi_input_r_ARQOS,
        m_axi_input_r_ARREGION => grp_mmcpy_inputport3_fu_286_m_axi_input_r_ARREGION,
        m_axi_input_r_ARUSER => grp_mmcpy_inputport3_fu_286_m_axi_input_r_ARUSER,
        m_axi_input_r_RVALID => m_axi_input3_RVALID,
        m_axi_input_r_RREADY => grp_mmcpy_inputport3_fu_286_m_axi_input_r_RREADY,
        m_axi_input_r_RDATA => m_axi_input3_RDATA,
        m_axi_input_r_RLAST => m_axi_input3_RLAST,
        m_axi_input_r_RID => m_axi_input3_RID,
        m_axi_input_r_RUSER => m_axi_input3_RUSER,
        m_axi_input_r_RRESP => m_axi_input3_RRESP,
        m_axi_input_r_BVALID => ap_const_logic_0,
        m_axi_input_r_BREADY => grp_mmcpy_inputport3_fu_286_m_axi_input_r_BREADY,
        m_axi_input_r_BRESP => ap_const_lv2_0,
        m_axi_input_r_BID => ap_const_lv1_0,
        m_axi_input_r_BUSER => ap_const_lv1_0,
        input_offset => input3_offset,
        input_memcpy_buffer_address0 => grp_mmcpy_inputport3_fu_286_input_memcpy_buffer_address0,
        input_memcpy_buffer_ce0 => grp_mmcpy_inputport3_fu_286_input_memcpy_buffer_ce0,
        input_memcpy_buffer_we0 => grp_mmcpy_inputport3_fu_286_input_memcpy_buffer_we0,
        input_memcpy_buffer_d0 => grp_mmcpy_inputport3_fu_286_input_memcpy_buffer_d0,
        TN_MIN_V => TN_MIN_3b_V,
        RowOffset => tmp_26_reg_748,
        RowIntNum => RowIntNum_3_reg_758);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv6_0;
            else
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_return_0_preg <= next_t2_0_V_write;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_return_1_preg <= (0=>IsRowPixel, others=>'-');
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_return_2_preg <= ap_phi_mux_RowBeginByte_0_V_wr_phi_fu_244_p4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_return_3_preg <= ap_phi_mux_RowBeginByte_1_V_wr_phi_fu_217_p4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_return_4_preg <= ap_phi_mux_RowBeginByte_2_V_wr_phi_fu_226_p4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_return_5_preg <= ap_phi_mux_RowBeginByte_3_V_wr_phi_fu_235_p4;
                end if; 
            end if;
        end if;
    end process;


    grp_mmcpy_inputport1_fu_274_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_mmcpy_inputport1_fu_274_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_mmcpy_inputport1_fu_274_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mmcpy_inputport1_fu_274_ap_ready = ap_const_logic_1)) then 
                    grp_mmcpy_inputport1_fu_274_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mmcpy_inputport2_fu_262_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_mmcpy_inputport2_fu_262_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_mmcpy_inputport2_fu_262_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mmcpy_inputport2_fu_262_ap_ready = ap_const_logic_1)) then 
                    grp_mmcpy_inputport2_fu_262_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mmcpy_inputport3_fu_286_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_mmcpy_inputport3_fu_286_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_mmcpy_inputport3_fu_286_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mmcpy_inputport3_fu_286_ap_ready = ap_const_logic_1)) then 
                    grp_mmcpy_inputport3_fu_286_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mmcpy_inputport_fu_250_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_mmcpy_inputport_fu_250_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_mmcpy_inputport_fu_250_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mmcpy_inputport_fu_250_ap_ready = ap_const_logic_1)) then 
                    grp_mmcpy_inputport_fu_250_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    RowBeginByte_0_V_wr_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (enable_read_read_fu_118_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                RowBeginByte_0_V_wr_reg_241 <= RowBeginByte_0_V_read;
            elsif (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (enable_read_read_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                RowBeginByte_0_V_wr_reg_241 <= tmp_59_reg_702;
            end if; 
        end if;
    end process;

    RowBeginByte_1_V_wr_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (enable_read_read_fu_118_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                RowBeginByte_1_V_wr_reg_214 <= RowBeginByte_1_V_read;
            elsif (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (enable_read_read_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                RowBeginByte_1_V_wr_reg_214 <= RowBeginByte_V1_reg_733;
            end if; 
        end if;
    end process;

    RowBeginByte_2_V_wr_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (enable_read_read_fu_118_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                RowBeginByte_2_V_wr_reg_223 <= RowBeginByte_2_V_read;
            elsif (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (enable_read_read_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                RowBeginByte_2_V_wr_reg_223 <= tmp_59_reg_702;
            end if; 
        end if;
    end process;

    RowBeginByte_3_V_wr_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (enable_read_read_fu_118_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                RowBeginByte_3_V_wr_reg_232 <= RowBeginByte_3_V_read;
            elsif (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (enable_read_read_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                RowBeginByte_3_V_wr_reg_232 <= RowBeginByte_V3_reg_753;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                RowBeginByte_V1_reg_733 <= RowBeginByte_V1_fu_444_p2;
                RowBeginByte_V3_reg_753 <= RowBeginByte_V3_fu_536_p2;
                RowIntNum_1_reg_738 <= RowIntNum_1_fu_481_p3;
                RowIntNum_2_reg_722 <= RowIntNum_2_fu_415_p3;
                RowIntNum_3_reg_758 <= RowIntNum_3_fu_572_p3;
                tmp_21_reg_728 <= tmp_101_1_fu_428_p2(31 downto 1);
                tmp_23_reg_743 <= tmp_101_2_fu_501_p2(31 downto 1);
                tmp_26_reg_748 <= tmp_101_3_fu_520_p2(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (enable_read_read_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                storemerge_reg_690 <= storemerge_fu_322_p3;
                tmp_100_3_reg_712 <= tmp_100_3_fu_366_p2;
                tmp_18_reg_697 <= storemerge_fu_322_p3(31 downto 1);
                tmp_59_reg_702 <= tmp_59_fu_350_p1;
                tmp_62_reg_717 <= tmp_62_fu_372_p1;
                tmp_inoffset <= storemerge_fu_322_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, enable_read_read_fu_118_p2, ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (enable_read_read_fu_118_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((ap_start = ap_const_logic_1) and (enable_read_read_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    IN_OFFSET_cast_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(IN_OFFSET),32));
    RowBeginByte_V1_fu_444_p2 <= (tmp_61_fu_425_p1 xor tmp_59_reg_702);
    RowBeginByte_V3_fu_536_p2 <= (tmp_62_reg_717 xor tmp_59_reg_702);
    RowIntNum_1_fu_481_p3 <= 
        tmp_109_1_fu_475_p2 when (tmp_105_1_cast2_fu_459_p2(0) = '1') else 
        tmp_106_1_cast_fu_465_p4;
    RowIntNum_2_fu_415_p3 <= 
        tmp_32_fu_409_p2 when (tmp_55_cast3_fu_394_p2(0) = '1') else 
        tmp_56_cast_fu_399_p4;
    RowIntNum_3_fu_572_p3 <= 
        tmp_109_3_fu_566_p2 when (tmp_105_3_cast1_fu_550_p2(0) = '1') else 
        tmp_106_3_cast_fu_556_p4;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state3_on_subcall_done_assign_proc : process(enable_read_read_fu_118_p2, grp_mmcpy_inputport_fu_250_ap_done, grp_mmcpy_inputport2_fu_262_ap_done, grp_mmcpy_inputport1_fu_274_ap_done, grp_mmcpy_inputport3_fu_286_ap_done)
    begin
                ap_block_state3_on_subcall_done <= (((grp_mmcpy_inputport3_fu_286_ap_done = ap_const_logic_0) and (enable_read_read_fu_118_p2 = ap_const_lv1_1)) or ((grp_mmcpy_inputport2_fu_262_ap_done = ap_const_logic_0) and (enable_read_read_fu_118_p2 = ap_const_lv1_1)) or ((grp_mmcpy_inputport1_fu_274_ap_done = ap_const_logic_0) and (enable_read_read_fu_118_p2 = ap_const_lv1_1)) or ((grp_mmcpy_inputport_fu_250_ap_done = ap_const_logic_0) and (enable_read_read_fu_118_p2 = ap_const_lv1_1)));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        if ((((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_RowBeginByte_0_V_wr_phi_fu_244_p4_assign_proc : process(enable_read_read_fu_118_p2, tmp_59_reg_702, ap_CS_fsm_state3, RowBeginByte_0_V_wr_reg_241)
    begin
        if (((enable_read_read_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_phi_mux_RowBeginByte_0_V_wr_phi_fu_244_p4 <= tmp_59_reg_702;
        else 
            ap_phi_mux_RowBeginByte_0_V_wr_phi_fu_244_p4 <= RowBeginByte_0_V_wr_reg_241;
        end if; 
    end process;


    ap_phi_mux_RowBeginByte_1_V_wr_phi_fu_217_p4_assign_proc : process(enable_read_read_fu_118_p2, RowBeginByte_V1_reg_733, RowBeginByte_1_V_wr_reg_214, ap_CS_fsm_state3)
    begin
        if (((enable_read_read_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_phi_mux_RowBeginByte_1_V_wr_phi_fu_217_p4 <= RowBeginByte_V1_reg_733;
        else 
            ap_phi_mux_RowBeginByte_1_V_wr_phi_fu_217_p4 <= RowBeginByte_1_V_wr_reg_214;
        end if; 
    end process;


    ap_phi_mux_RowBeginByte_2_V_wr_phi_fu_226_p4_assign_proc : process(enable_read_read_fu_118_p2, tmp_59_reg_702, ap_CS_fsm_state3, RowBeginByte_2_V_wr_reg_223)
    begin
        if (((enable_read_read_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_phi_mux_RowBeginByte_2_V_wr_phi_fu_226_p4 <= tmp_59_reg_702;
        else 
            ap_phi_mux_RowBeginByte_2_V_wr_phi_fu_226_p4 <= RowBeginByte_2_V_wr_reg_223;
        end if; 
    end process;


    ap_phi_mux_RowBeginByte_3_V_wr_phi_fu_235_p4_assign_proc : process(enable_read_read_fu_118_p2, RowBeginByte_V3_reg_753, ap_CS_fsm_state3, RowBeginByte_3_V_wr_reg_232)
    begin
        if (((enable_read_read_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_phi_mux_RowBeginByte_3_V_wr_phi_fu_235_p4 <= RowBeginByte_V3_reg_753;
        else 
            ap_phi_mux_RowBeginByte_3_V_wr_phi_fu_235_p4 <= RowBeginByte_3_V_wr_reg_232;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(next_t2_0_V_write, ap_CS_fsm_state3, ap_block_state3_on_subcall_done, ap_return_0_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_return_0 <= next_t2_0_V_write;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(IsRowPixel, ap_CS_fsm_state3, ap_block_state3_on_subcall_done, ap_return_1_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_return_1 <= (0=>IsRowPixel, others=>'-');
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_state3, ap_block_state3_on_subcall_done, ap_phi_mux_RowBeginByte_0_V_wr_phi_fu_244_p4, ap_return_2_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_return_2 <= ap_phi_mux_RowBeginByte_0_V_wr_phi_fu_244_p4;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_phi_mux_RowBeginByte_1_V_wr_phi_fu_217_p4, ap_CS_fsm_state3, ap_block_state3_on_subcall_done, ap_return_3_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_return_3 <= ap_phi_mux_RowBeginByte_1_V_wr_phi_fu_217_p4;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(ap_CS_fsm_state3, ap_block_state3_on_subcall_done, ap_phi_mux_RowBeginByte_2_V_wr_phi_fu_226_p4, ap_return_4_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_return_4 <= ap_phi_mux_RowBeginByte_2_V_wr_phi_fu_226_p4;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    ap_return_5_assign_proc : process(ap_CS_fsm_state3, ap_block_state3_on_subcall_done, ap_phi_mux_RowBeginByte_3_V_wr_phi_fu_235_p4, ap_return_5_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_return_5 <= ap_phi_mux_RowBeginByte_3_V_wr_phi_fu_235_p4;
        else 
            ap_return_5 <= ap_return_5_preg;
        end if; 
    end process;

    enable_read_read_fu_118_p2 <= (0=>enable, others=>'-');
    grp_mmcpy_inputport1_fu_274_ap_start <= grp_mmcpy_inputport1_fu_274_ap_start_reg;
    grp_mmcpy_inputport2_fu_262_ap_start <= grp_mmcpy_inputport2_fu_262_ap_start_reg;
    grp_mmcpy_inputport3_fu_286_ap_start <= grp_mmcpy_inputport3_fu_286_ap_start_reg;
    grp_mmcpy_inputport_fu_250_ap_start <= grp_mmcpy_inputport_fu_250_ap_start_reg;
    init_fu_302_p2 <= "1" when (next_t2_0_V_write = ap_const_lv6_0) else "0";
    input_memcpy_buffer1_address0 <= grp_mmcpy_inputport1_fu_274_input_memcpy_buffer_address0;
    input_memcpy_buffer1_ce0 <= grp_mmcpy_inputport1_fu_274_input_memcpy_buffer_ce0;
    input_memcpy_buffer1_d0 <= grp_mmcpy_inputport1_fu_274_input_memcpy_buffer_d0;
    input_memcpy_buffer1_we0 <= grp_mmcpy_inputport1_fu_274_input_memcpy_buffer_we0;
    input_memcpy_buffer2_address0 <= grp_mmcpy_inputport2_fu_262_input_memcpy_buffer_address0;
    input_memcpy_buffer2_ce0 <= grp_mmcpy_inputport2_fu_262_input_memcpy_buffer_ce0;
    input_memcpy_buffer2_d0 <= grp_mmcpy_inputport2_fu_262_input_memcpy_buffer_d0;
    input_memcpy_buffer2_we0 <= grp_mmcpy_inputport2_fu_262_input_memcpy_buffer_we0;
    input_memcpy_buffer3_address0 <= grp_mmcpy_inputport3_fu_286_input_memcpy_buffer_address0;
    input_memcpy_buffer3_ce0 <= grp_mmcpy_inputport3_fu_286_input_memcpy_buffer_ce0;
    input_memcpy_buffer3_d0 <= grp_mmcpy_inputport3_fu_286_input_memcpy_buffer_d0;
    input_memcpy_buffer3_we0 <= grp_mmcpy_inputport3_fu_286_input_memcpy_buffer_we0;
    input_memcpy_buffer_address0 <= grp_mmcpy_inputport_fu_250_input_memcpy_buffer_address0;
    input_memcpy_buffer_ce0 <= grp_mmcpy_inputport_fu_250_input_memcpy_buffer_ce0;
    input_memcpy_buffer_d0 <= grp_mmcpy_inputport_fu_250_input_memcpy_buffer_d0;
    input_memcpy_buffer_we0 <= grp_mmcpy_inputport_fu_250_input_memcpy_buffer_we0;
    lhs_V_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ColIncreaseLength_V),7));
    m_axi_input1_ARADDR <= grp_mmcpy_inputport1_fu_274_m_axi_input_r_ARADDR;
    m_axi_input1_ARBURST <= grp_mmcpy_inputport1_fu_274_m_axi_input_r_ARBURST;
    m_axi_input1_ARCACHE <= grp_mmcpy_inputport1_fu_274_m_axi_input_r_ARCACHE;
    m_axi_input1_ARID <= grp_mmcpy_inputport1_fu_274_m_axi_input_r_ARID;
    m_axi_input1_ARLEN <= grp_mmcpy_inputport1_fu_274_m_axi_input_r_ARLEN;
    m_axi_input1_ARLOCK <= grp_mmcpy_inputport1_fu_274_m_axi_input_r_ARLOCK;
    m_axi_input1_ARPROT <= grp_mmcpy_inputport1_fu_274_m_axi_input_r_ARPROT;
    m_axi_input1_ARQOS <= grp_mmcpy_inputport1_fu_274_m_axi_input_r_ARQOS;
    m_axi_input1_ARREGION <= grp_mmcpy_inputport1_fu_274_m_axi_input_r_ARREGION;
    m_axi_input1_ARSIZE <= grp_mmcpy_inputport1_fu_274_m_axi_input_r_ARSIZE;
    m_axi_input1_ARUSER <= grp_mmcpy_inputport1_fu_274_m_axi_input_r_ARUSER;

    m_axi_input1_ARVALID_assign_proc : process(enable_read_read_fu_118_p2, ap_CS_fsm_state2, grp_mmcpy_inputport1_fu_274_m_axi_input_r_ARVALID, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((enable_read_read_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            m_axi_input1_ARVALID <= grp_mmcpy_inputport1_fu_274_m_axi_input_r_ARVALID;
        else 
            m_axi_input1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_input1_AWADDR <= ap_const_lv32_0;
    m_axi_input1_AWBURST <= ap_const_lv2_0;
    m_axi_input1_AWCACHE <= ap_const_lv4_0;
    m_axi_input1_AWID <= ap_const_lv1_0;
    m_axi_input1_AWLEN <= ap_const_lv32_0;
    m_axi_input1_AWLOCK <= ap_const_lv2_0;
    m_axi_input1_AWPROT <= ap_const_lv3_0;
    m_axi_input1_AWQOS <= ap_const_lv4_0;
    m_axi_input1_AWREGION <= ap_const_lv4_0;
    m_axi_input1_AWSIZE <= ap_const_lv3_0;
    m_axi_input1_AWUSER <= ap_const_lv1_0;
    m_axi_input1_AWVALID <= ap_const_logic_0;
    m_axi_input1_BREADY <= ap_const_logic_0;

    m_axi_input1_RREADY_assign_proc : process(enable_read_read_fu_118_p2, ap_CS_fsm_state2, grp_mmcpy_inputport1_fu_274_m_axi_input_r_RREADY, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((enable_read_read_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            m_axi_input1_RREADY <= grp_mmcpy_inputport1_fu_274_m_axi_input_r_RREADY;
        else 
            m_axi_input1_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_input1_WDATA <= ap_const_lv32_0;
    m_axi_input1_WID <= ap_const_lv1_0;
    m_axi_input1_WLAST <= ap_const_logic_0;
    m_axi_input1_WSTRB <= ap_const_lv4_0;
    m_axi_input1_WUSER <= ap_const_lv1_0;
    m_axi_input1_WVALID <= ap_const_logic_0;
    m_axi_input2_ARADDR <= grp_mmcpy_inputport2_fu_262_m_axi_input_r_ARADDR;
    m_axi_input2_ARBURST <= grp_mmcpy_inputport2_fu_262_m_axi_input_r_ARBURST;
    m_axi_input2_ARCACHE <= grp_mmcpy_inputport2_fu_262_m_axi_input_r_ARCACHE;
    m_axi_input2_ARID <= grp_mmcpy_inputport2_fu_262_m_axi_input_r_ARID;
    m_axi_input2_ARLEN <= grp_mmcpy_inputport2_fu_262_m_axi_input_r_ARLEN;
    m_axi_input2_ARLOCK <= grp_mmcpy_inputport2_fu_262_m_axi_input_r_ARLOCK;
    m_axi_input2_ARPROT <= grp_mmcpy_inputport2_fu_262_m_axi_input_r_ARPROT;
    m_axi_input2_ARQOS <= grp_mmcpy_inputport2_fu_262_m_axi_input_r_ARQOS;
    m_axi_input2_ARREGION <= grp_mmcpy_inputport2_fu_262_m_axi_input_r_ARREGION;
    m_axi_input2_ARSIZE <= grp_mmcpy_inputport2_fu_262_m_axi_input_r_ARSIZE;
    m_axi_input2_ARUSER <= grp_mmcpy_inputport2_fu_262_m_axi_input_r_ARUSER;

    m_axi_input2_ARVALID_assign_proc : process(enable_read_read_fu_118_p2, ap_CS_fsm_state2, grp_mmcpy_inputport2_fu_262_m_axi_input_r_ARVALID, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((enable_read_read_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            m_axi_input2_ARVALID <= grp_mmcpy_inputport2_fu_262_m_axi_input_r_ARVALID;
        else 
            m_axi_input2_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_input2_AWADDR <= ap_const_lv32_0;
    m_axi_input2_AWBURST <= ap_const_lv2_0;
    m_axi_input2_AWCACHE <= ap_const_lv4_0;
    m_axi_input2_AWID <= ap_const_lv1_0;
    m_axi_input2_AWLEN <= ap_const_lv32_0;
    m_axi_input2_AWLOCK <= ap_const_lv2_0;
    m_axi_input2_AWPROT <= ap_const_lv3_0;
    m_axi_input2_AWQOS <= ap_const_lv4_0;
    m_axi_input2_AWREGION <= ap_const_lv4_0;
    m_axi_input2_AWSIZE <= ap_const_lv3_0;
    m_axi_input2_AWUSER <= ap_const_lv1_0;
    m_axi_input2_AWVALID <= ap_const_logic_0;
    m_axi_input2_BREADY <= ap_const_logic_0;

    m_axi_input2_RREADY_assign_proc : process(enable_read_read_fu_118_p2, ap_CS_fsm_state2, grp_mmcpy_inputport2_fu_262_m_axi_input_r_RREADY, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((enable_read_read_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            m_axi_input2_RREADY <= grp_mmcpy_inputport2_fu_262_m_axi_input_r_RREADY;
        else 
            m_axi_input2_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_input2_WDATA <= ap_const_lv32_0;
    m_axi_input2_WID <= ap_const_lv1_0;
    m_axi_input2_WLAST <= ap_const_logic_0;
    m_axi_input2_WSTRB <= ap_const_lv4_0;
    m_axi_input2_WUSER <= ap_const_lv1_0;
    m_axi_input2_WVALID <= ap_const_logic_0;
    m_axi_input3_ARADDR <= grp_mmcpy_inputport3_fu_286_m_axi_input_r_ARADDR;
    m_axi_input3_ARBURST <= grp_mmcpy_inputport3_fu_286_m_axi_input_r_ARBURST;
    m_axi_input3_ARCACHE <= grp_mmcpy_inputport3_fu_286_m_axi_input_r_ARCACHE;
    m_axi_input3_ARID <= grp_mmcpy_inputport3_fu_286_m_axi_input_r_ARID;
    m_axi_input3_ARLEN <= grp_mmcpy_inputport3_fu_286_m_axi_input_r_ARLEN;
    m_axi_input3_ARLOCK <= grp_mmcpy_inputport3_fu_286_m_axi_input_r_ARLOCK;
    m_axi_input3_ARPROT <= grp_mmcpy_inputport3_fu_286_m_axi_input_r_ARPROT;
    m_axi_input3_ARQOS <= grp_mmcpy_inputport3_fu_286_m_axi_input_r_ARQOS;
    m_axi_input3_ARREGION <= grp_mmcpy_inputport3_fu_286_m_axi_input_r_ARREGION;
    m_axi_input3_ARSIZE <= grp_mmcpy_inputport3_fu_286_m_axi_input_r_ARSIZE;
    m_axi_input3_ARUSER <= grp_mmcpy_inputport3_fu_286_m_axi_input_r_ARUSER;

    m_axi_input3_ARVALID_assign_proc : process(enable_read_read_fu_118_p2, ap_CS_fsm_state2, grp_mmcpy_inputport3_fu_286_m_axi_input_r_ARVALID, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((enable_read_read_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            m_axi_input3_ARVALID <= grp_mmcpy_inputport3_fu_286_m_axi_input_r_ARVALID;
        else 
            m_axi_input3_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_input3_AWADDR <= ap_const_lv32_0;
    m_axi_input3_AWBURST <= ap_const_lv2_0;
    m_axi_input3_AWCACHE <= ap_const_lv4_0;
    m_axi_input3_AWID <= ap_const_lv1_0;
    m_axi_input3_AWLEN <= ap_const_lv32_0;
    m_axi_input3_AWLOCK <= ap_const_lv2_0;
    m_axi_input3_AWPROT <= ap_const_lv3_0;
    m_axi_input3_AWQOS <= ap_const_lv4_0;
    m_axi_input3_AWREGION <= ap_const_lv4_0;
    m_axi_input3_AWSIZE <= ap_const_lv3_0;
    m_axi_input3_AWUSER <= ap_const_lv1_0;
    m_axi_input3_AWVALID <= ap_const_logic_0;
    m_axi_input3_BREADY <= ap_const_logic_0;

    m_axi_input3_RREADY_assign_proc : process(enable_read_read_fu_118_p2, ap_CS_fsm_state2, grp_mmcpy_inputport3_fu_286_m_axi_input_r_RREADY, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((enable_read_read_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            m_axi_input3_RREADY <= grp_mmcpy_inputport3_fu_286_m_axi_input_r_RREADY;
        else 
            m_axi_input3_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_input3_WDATA <= ap_const_lv32_0;
    m_axi_input3_WID <= ap_const_lv1_0;
    m_axi_input3_WLAST <= ap_const_logic_0;
    m_axi_input3_WSTRB <= ap_const_lv4_0;
    m_axi_input3_WUSER <= ap_const_lv1_0;
    m_axi_input3_WVALID <= ap_const_logic_0;
    m_axi_input_r_ARADDR <= grp_mmcpy_inputport_fu_250_m_axi_input_r_ARADDR;
    m_axi_input_r_ARBURST <= grp_mmcpy_inputport_fu_250_m_axi_input_r_ARBURST;
    m_axi_input_r_ARCACHE <= grp_mmcpy_inputport_fu_250_m_axi_input_r_ARCACHE;
    m_axi_input_r_ARID <= grp_mmcpy_inputport_fu_250_m_axi_input_r_ARID;
    m_axi_input_r_ARLEN <= grp_mmcpy_inputport_fu_250_m_axi_input_r_ARLEN;
    m_axi_input_r_ARLOCK <= grp_mmcpy_inputport_fu_250_m_axi_input_r_ARLOCK;
    m_axi_input_r_ARPROT <= grp_mmcpy_inputport_fu_250_m_axi_input_r_ARPROT;
    m_axi_input_r_ARQOS <= grp_mmcpy_inputport_fu_250_m_axi_input_r_ARQOS;
    m_axi_input_r_ARREGION <= grp_mmcpy_inputport_fu_250_m_axi_input_r_ARREGION;
    m_axi_input_r_ARSIZE <= grp_mmcpy_inputport_fu_250_m_axi_input_r_ARSIZE;
    m_axi_input_r_ARUSER <= grp_mmcpy_inputport_fu_250_m_axi_input_r_ARUSER;

    m_axi_input_r_ARVALID_assign_proc : process(enable_read_read_fu_118_p2, ap_CS_fsm_state2, grp_mmcpy_inputport_fu_250_m_axi_input_r_ARVALID, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((enable_read_read_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            m_axi_input_r_ARVALID <= grp_mmcpy_inputport_fu_250_m_axi_input_r_ARVALID;
        else 
            m_axi_input_r_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_input_r_AWADDR <= ap_const_lv32_0;
    m_axi_input_r_AWBURST <= ap_const_lv2_0;
    m_axi_input_r_AWCACHE <= ap_const_lv4_0;
    m_axi_input_r_AWID <= ap_const_lv1_0;
    m_axi_input_r_AWLEN <= ap_const_lv32_0;
    m_axi_input_r_AWLOCK <= ap_const_lv2_0;
    m_axi_input_r_AWPROT <= ap_const_lv3_0;
    m_axi_input_r_AWQOS <= ap_const_lv4_0;
    m_axi_input_r_AWREGION <= ap_const_lv4_0;
    m_axi_input_r_AWSIZE <= ap_const_lv3_0;
    m_axi_input_r_AWUSER <= ap_const_lv1_0;
    m_axi_input_r_AWVALID <= ap_const_logic_0;
    m_axi_input_r_BREADY <= ap_const_logic_0;

    m_axi_input_r_RREADY_assign_proc : process(enable_read_read_fu_118_p2, ap_CS_fsm_state2, grp_mmcpy_inputport_fu_250_m_axi_input_r_RREADY, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((enable_read_read_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            m_axi_input_r_RREADY <= grp_mmcpy_inputport_fu_250_m_axi_input_r_RREADY;
        else 
            m_axi_input_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_input_r_WDATA <= ap_const_lv32_0;
    m_axi_input_r_WID <= ap_const_lv1_0;
    m_axi_input_r_WLAST <= ap_const_logic_0;
    m_axi_input_r_WSTRB <= ap_const_lv4_0;
    m_axi_input_r_WUSER <= ap_const_lv1_0;
    m_axi_input_r_WVALID <= ap_const_logic_0;
    p_shl_cast_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_354_p3),21));
    p_shl_fu_354_p3 <= (IHxIW_18b_V & ap_const_lv2_0);
    r_V_1_fu_453_p2 <= std_logic_vector(unsigned(rhs_V_1_fu_449_p1) + unsigned(lhs_V_fu_379_p1));
    r_V_3_fu_544_p2 <= std_logic_vector(unsigned(rhs_V_3_fu_540_p1) + unsigned(lhs_V_fu_379_p1));
    r_V_fu_388_p2 <= std_logic_vector(unsigned(rhs_V_fu_382_p1) + unsigned(lhs_V_fu_379_p1));
    rhs_V_1_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(RowBeginByte_V1_fu_444_p2),7));
    rhs_V_3_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(RowBeginByte_V3_fu_536_p2),7));
    rhs_V_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_59_reg_702),7));
    storemerge_fu_322_p3 <= 
        IN_OFFSET_cast_fu_298_p1 when (init_fu_302_p2(0) = '1') else 
        tmp_s_fu_316_p2;
    tmp_100_2_cast_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_100_2_fu_490_p3),32));
    tmp_100_2_fu_490_p3 <= (IHxIW_18b_V & ap_const_lv1_0);
        tmp_100_3_cast_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_100_3_reg_712),32));

    tmp_100_3_fu_366_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_362_p1) - unsigned(tmp_53_cast5_fu_336_p1));
    tmp_101_1_fu_428_p2 <= std_logic_vector(unsigned(tmp_31_fu_376_p1) + unsigned(storemerge_reg_690));
    tmp_101_2_fu_501_p2 <= std_logic_vector(unsigned(storemerge_reg_690) + unsigned(tmp_100_2_cast_fu_497_p1));
    tmp_101_3_fu_520_p2 <= std_logic_vector(unsigned(storemerge_reg_690) + unsigned(tmp_100_3_cast_fu_517_p1));
    tmp_105_1_cast2_fu_459_p2 <= (tmp_60_fu_385_p1 xor RowBeginByte_V1_fu_444_p2);
    tmp_105_3_cast1_fu_550_p2 <= (tmp_60_fu_385_p1 xor RowBeginByte_V3_fu_536_p2);
    tmp_106_1_cast_fu_465_p4 <= r_V_1_fu_453_p2(6 downto 1);
    tmp_106_3_cast_fu_556_p4 <= r_V_3_fu_544_p2(6 downto 1);
    tmp_109_1_fu_475_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(tmp_106_1_cast_fu_465_p4));
    tmp_109_3_fu_566_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(tmp_106_3_cast_fu_556_p4));
    tmp_31_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(IHxIW_18b_V),32));
    tmp_32_fu_409_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(tmp_56_cast_fu_399_p4));
    tmp_53_cast5_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(IHxIW_18b_V),21));
    tmp_55_cast3_fu_394_p2 <= (tmp_60_fu_385_p1 xor tmp_59_reg_702);
    tmp_56_cast_fu_399_p4 <= r_V_fu_388_p2(6 downto 1);
    tmp_59_fu_350_p1 <= storemerge_fu_322_p3(1 - 1 downto 0);
    tmp_60_fu_385_p1 <= ColIncreaseLength_V(1 - 1 downto 0);
    tmp_61_fu_425_p1 <= IHxIW_18b_V(1 - 1 downto 0);
    tmp_62_fu_372_p1 <= tmp_100_3_fu_366_p2(1 - 1 downto 0);
    tmp_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(RowIncreaseLength_V),32));
    tmp_s_fu_316_p2 <= std_logic_vector(unsigned(tmp_fu_312_p1) + unsigned(tmp_inoffset));
end behav;
