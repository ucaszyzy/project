-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pool_yolo26 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Input_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    Input_0_ce0 : OUT STD_LOGIC;
    Input_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Input_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    Input_1_ce0 : OUT STD_LOGIC;
    Input_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Input_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    Input_2_ce0 : OUT STD_LOGIC;
    Input_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Input_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    Input_3_ce0 : OUT STD_LOGIC;
    Input_3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Output_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Output_0_ce0 : OUT STD_LOGIC;
    Output_0_we0 : OUT STD_LOGIC;
    Output_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Output_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Output_1_ce0 : OUT STD_LOGIC;
    Output_1_we0 : OUT STD_LOGIC;
    Output_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Output_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Output_2_ce0 : OUT STD_LOGIC;
    Output_2_we0 : OUT STD_LOGIC;
    Output_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Output_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Output_3_ce0 : OUT STD_LOGIC;
    Output_3_we0 : OUT STD_LOGIC;
    Output_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Kernel_stride : IN STD_LOGIC_VECTOR (31 downto 0);
    TR_MIN : IN STD_LOGIC_VECTOR (31 downto 0);
    TC_MIN : IN STD_LOGIC_VECTOR (31 downto 0);
    enable : IN STD_LOGIC );
end;


architecture behav of pool_yolo26 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv16_8001 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000001";
    constant ap_const_lv13_35 : STD_LOGIC_VECTOR (12 downto 0) := "0000000110101";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten3_reg_230 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_s_reg_241 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten4_reg_253 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_reg_264 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_4_reg_275 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_5_reg_286 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_6_reg_297 : STD_LOGIC_VECTOR (1 downto 0);
    signal enable_read_read_fu_102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_fu_312_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal rhs_V_reg_916 : STD_LOGIC_VECTOR (6 downto 0);
    signal bound8_fu_328_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal bound8_reg_924 : STD_LOGIC_VECTOR (7 downto 0);
    signal bound_fu_344_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal bound_reg_929 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond_flatten4_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten4_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_flatten4_reg_934_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten4_reg_934_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten4_reg_934_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next4_fu_355_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tr_V_fu_361_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tr_V_reg_943 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_flatten_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_948 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_mid2_v_fu_372_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_15_mid2_v_reg_958 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_15_mid2_v_reg_958_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_15_mid2_v_reg_958_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_15_mid2_v_reg_958_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal not_exitcond_flatten_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_reg_964 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten2_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten2_reg_971 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_mid_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_mid_reg_976 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_reg_984 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_410_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_next3_fu_424_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_mid2_fu_549_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_16_mid2_reg_999 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal tmp_16_mid2_reg_999_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_16_mid2_reg_999_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_44_fu_644_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_44_reg_1005 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_5_mid2_fu_666_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_10_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_1015 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_1015_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_5_fu_688_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_5_reg_1023 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_cond_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_1028 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_1028_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_1028_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_V_fu_706_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_0_tmp_0_3_fu_741_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_0_tmp_0_3_reg_1057 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_1_fu_770_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_1_reg_1062 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_1_fu_799_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_1_reg_1067 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_1_fu_828_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_1_reg_1072 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter1_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_phi_mux_p_s_phi_fu_245_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_p_4_phi_fu_279_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_32_cast_fu_718_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_cast_fu_847_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_0_3_fu_86 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_2_fu_90 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_2_fu_94 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_2_fu_98 : STD_LOGIC_VECTOR (15 downto 0);
    signal Kernel_stride_2b_V_fu_308_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_37_fu_316_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_320_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_38_fu_332_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal bound_fu_344_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal bound_fu_344_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_op_fu_404_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten33_op_fu_418_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_6_fu_436_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_V_6_fu_436_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_V_fu_445_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_V_fu_445_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal rhs_V_6_cast_fu_450_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_6_fu_436_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_8_mid1_fu_470_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_V_8_mid1_fu_470_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_V_8_mid1_fu_470_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_fu_445_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_39_fu_489_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_4_mid_fu_460_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tc_V_fu_520_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_V_mid1_fu_537_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_V_mid1_fu_537_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_V_mid1_fu_537_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_mid_fu_482_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond_flatten_not_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_5_cast_mid_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_2_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_mid_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_mid_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_5_mid_fu_526_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond4_mid1_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_V_fu_584_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_41_fu_608_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_5_cast_mid3_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_6_cast_mid1_fu_620_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_8_mid2_fu_475_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_7_fu_454_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_42_fu_630_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_9_mid1_fu_624_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_43_fu_637_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_18_mid1_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_mid3_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_6_mid2_fu_600_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_45_fu_674_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_5_cast_mid2_fu_612_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_5_cast_fu_684_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_mid2_fu_542_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_18_mid2_fu_658_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_870_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_tmp_0_3_fu_728_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_fu_735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_5_fu_757_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_52_1_fu_764_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_5_fu_786_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_52_2_fu_793_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_5_fu_815_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_52_3_fu_822_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_879_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_870_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_870_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_870_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_879_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_879_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_879_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_344_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal bound_fu_344_p10 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_870_p10 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_870_p20 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_879_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_879_p20 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_6_fu_436_p10 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_8_mid1_fu_470_p10 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_fu_445_p10 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_mid1_fu_537_p10 : STD_LOGIC_VECTOR (6 downto 0);

    component YOLO2_FPGA_mac_muqcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component YOLO2_FPGA_mac_murcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;



begin
    YOLO2_FPGA_mac_muqcK_U564 : component YOLO2_FPGA_mac_muqcK
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 7,
        din2_WIDTH => 7,
        dout_WIDTH => 13)
    port map (
        din0 => grp_fu_870_p0,
        din1 => grp_fu_870_p1,
        din2 => grp_fu_870_p2,
        dout => grp_fu_870_p3);

    YOLO2_FPGA_mac_murcU_U565 : component YOLO2_FPGA_mac_murcU
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 5,
        din2_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        din0 => grp_fu_879_p0,
        din1 => grp_fu_879_p1,
        din2 => grp_fu_879_p2,
        dout => grp_fu_879_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((exitcond_flatten4_fu_350_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((enable_read_read_fu_102_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter1_state3)) then 
                        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((enable_read_read_fu_102_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten3_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten4_fu_350_p2 = ap_const_lv1_0))) then 
                indvar_flatten3_reg_230 <= indvar_flatten_next4_fu_355_p2;
            elsif (((enable_read_read_fu_102_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten3_reg_230 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    indvar_flatten4_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten4_fu_350_p2 = ap_const_lv1_0))) then 
                indvar_flatten4_reg_253 <= indvar_flatten_next3_fu_424_p3;
            elsif (((enable_read_read_fu_102_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten4_reg_253 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten4_fu_350_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_264 <= indvar_flatten_next_fu_410_p3;
            elsif (((enable_read_read_fu_102_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_264 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    p_4_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (exitcond_flatten4_reg_934_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                p_4_reg_275 <= tmp_16_mid2_reg_999;
            elsif (((enable_read_read_fu_102_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_4_reg_275 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_5_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten4_reg_934 = ap_const_lv1_0))) then 
                p_5_reg_286 <= p_5_mid2_fu_666_p3;
            elsif (((enable_read_read_fu_102_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_5_reg_286 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_6_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten4_reg_934 = ap_const_lv1_0))) then 
                p_6_reg_297 <= j_V_fu_706_p2;
            elsif (((enable_read_read_fu_102_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_6_reg_297 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_s_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten4_reg_934 = ap_const_lv1_0))) then 
                p_s_reg_241 <= tmp_15_mid2_v_reg_958;
            elsif (((enable_read_read_fu_102_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_s_reg_241 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((enable_read_read_fu_102_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    bound8_reg_924(6 downto 2) <= bound8_fu_328_p1(6 downto 2);
                bound_reg_929 <= bound_fu_344_p2;
                    rhs_V_reg_916(1 downto 0) <= rhs_V_fu_312_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten4_fu_350_p2 = ap_const_lv1_0))) then
                exitcond_flatten2_reg_971 <= exitcond_flatten2_fu_386_p2;
                exitcond_flatten_mid_reg_976 <= exitcond_flatten_mid_fu_392_p2;
                exitcond_flatten_reg_948 <= exitcond_flatten_fu_367_p2;
                not_exitcond_flatten_reg_964 <= not_exitcond_flatten_fu_380_p2;
                tmp_17_reg_984 <= tmp_17_fu_398_p2;
                tr_V_reg_943 <= tr_V_fu_361_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_flatten4_reg_934 <= exitcond_flatten4_fu_350_p2;
                exitcond_flatten4_reg_934_pp0_iter1_reg <= exitcond_flatten4_reg_934;
                tmp_15_mid2_v_reg_958_pp0_iter1_reg <= tmp_15_mid2_v_reg_958;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exitcond_flatten4_reg_934_pp0_iter2_reg <= exitcond_flatten4_reg_934_pp0_iter1_reg;
                exitcond_flatten4_reg_934_pp0_iter3_reg <= exitcond_flatten4_reg_934_pp0_iter2_reg;
                or_cond_reg_1028_pp0_iter2_reg <= or_cond_reg_1028;
                or_cond_reg_1028_pp0_iter3_reg <= or_cond_reg_1028_pp0_iter2_reg;
                tmp_10_reg_1015_pp0_iter2_reg <= tmp_10_reg_1015;
                tmp_15_mid2_v_reg_958_pp0_iter2_reg <= tmp_15_mid2_v_reg_958_pp0_iter1_reg;
                tmp_15_mid2_v_reg_958_pp0_iter3_reg <= tmp_15_mid2_v_reg_958_pp0_iter2_reg;
                tmp_16_mid2_reg_999_pp0_iter2_reg <= tmp_16_mid2_reg_999;
                tmp_16_mid2_reg_999_pp0_iter3_reg <= tmp_16_mid2_reg_999_pp0_iter2_reg;
                tmp_1_1_reg_1062 <= tmp_1_1_fu_770_p3;
                tmp_2_1_reg_1067 <= tmp_2_1_fu_799_p3;
                tmp_3_1_reg_1072 <= tmp_3_1_fu_828_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten4_reg_934 = ap_const_lv1_0))) then
                or_cond_reg_1028 <= or_cond_fu_700_p2;
                r_V_5_reg_1023 <= r_V_5_fu_688_p2;
                tmp_10_reg_1015 <= tmp_10_fu_678_p2;
                tmp_44_reg_1005 <= tmp_44_fu_644_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (exitcond_flatten4_reg_934_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_0_3_fu_86 <= tmp_0_tmp_0_3_fu_741_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten4_reg_934_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_0_tmp_0_3_reg_1057 <= tmp_0_tmp_0_3_fu_741_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten4_fu_350_p2 = ap_const_lv1_0))) then
                tmp_15_mid2_v_reg_958 <= tmp_15_mid2_v_fu_372_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten4_reg_934 = ap_const_lv1_0))) then
                tmp_16_mid2_reg_999 <= tmp_16_mid2_fu_549_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_1_2_fu_90 <= tmp_1_1_fu_770_p3;
                tmp_2_2_fu_94 <= tmp_2_1_fu_799_p3;
                tmp_3_2_fu_98 <= tmp_3_1_fu_828_p3;
            end if;
        end if;
    end process;
    rhs_V_reg_916(6 downto 2) <= "00000";
    bound8_reg_924(1 downto 0) <= "00";
    bound8_reg_924(7) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, enable_read_read_fu_102_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((enable_read_read_fu_102_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((enable_read_read_fu_102_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    Input_0_address0 <= tmp_32_cast_fu_718_p1(12 - 1 downto 0);

    Input_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Input_0_ce0 <= ap_const_logic_1;
        else 
            Input_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Input_1_address0 <= tmp_32_cast_fu_718_p1(12 - 1 downto 0);

    Input_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Input_1_ce0 <= ap_const_logic_1;
        else 
            Input_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Input_2_address0 <= tmp_32_cast_fu_718_p1(12 - 1 downto 0);

    Input_2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Input_2_ce0 <= ap_const_logic_1;
        else 
            Input_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Input_3_address0 <= tmp_32_cast_fu_718_p1(12 - 1 downto 0);

    Input_3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Input_3_ce0 <= ap_const_logic_1;
        else 
            Input_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Kernel_stride_2b_V_fu_308_p1 <= Kernel_stride(2 - 1 downto 0);
    Output_0_address0 <= tmp_29_cast_fu_847_p1(10 - 1 downto 0);

    Output_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Output_0_ce0 <= ap_const_logic_1;
        else 
            Output_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        Output_0_d0 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_0_tmp_0_3_reg_1057),32));


    Output_0_we0_assign_proc : process(ap_block_pp0_stage0_11001, or_cond_reg_1028_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((or_cond_reg_1028_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Output_0_we0 <= ap_const_logic_1;
        else 
            Output_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Output_1_address0 <= tmp_29_cast_fu_847_p1(10 - 1 downto 0);

    Output_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Output_1_ce0 <= ap_const_logic_1;
        else 
            Output_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        Output_1_d0 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_1_reg_1062),32));


    Output_1_we0_assign_proc : process(ap_block_pp0_stage0_11001, or_cond_reg_1028_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((or_cond_reg_1028_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Output_1_we0 <= ap_const_logic_1;
        else 
            Output_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Output_2_address0 <= tmp_29_cast_fu_847_p1(10 - 1 downto 0);

    Output_2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Output_2_ce0 <= ap_const_logic_1;
        else 
            Output_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        Output_2_d0 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_1_reg_1067),32));


    Output_2_we0_assign_proc : process(ap_block_pp0_stage0_11001, or_cond_reg_1028_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((or_cond_reg_1028_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Output_2_we0 <= ap_const_logic_1;
        else 
            Output_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Output_3_address0 <= tmp_29_cast_fu_847_p1(10 - 1 downto 0);

    Output_3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Output_3_ce0 <= ap_const_logic_1;
        else 
            Output_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        Output_3_d0 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_1_reg_1072),32));


    Output_3_we0_assign_proc : process(ap_block_pp0_stage0_11001, or_cond_reg_1028_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((or_cond_reg_1028_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Output_3_we0 <= ap_const_logic_1;
        else 
            Output_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state7 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter1_state3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter1_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter1_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_4_phi_fu_279_p4_assign_proc : process(p_4_reg_275, exitcond_flatten4_reg_934_pp0_iter1_reg, tmp_16_mid2_reg_999, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (exitcond_flatten4_reg_934_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_p_4_phi_fu_279_p4 <= tmp_16_mid2_reg_999;
        else 
            ap_phi_mux_p_4_phi_fu_279_p4 <= p_4_reg_275;
        end if; 
    end process;


    ap_phi_mux_p_s_phi_fu_245_p4_assign_proc : process(p_s_reg_241, exitcond_flatten4_reg_934, ap_CS_fsm_pp0_stage0, tmp_15_mid2_v_reg_958, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten4_reg_934 = ap_const_lv1_0))) then 
            ap_phi_mux_p_s_phi_fu_245_p4 <= tmp_15_mid2_v_reg_958;
        else 
            ap_phi_mux_p_s_phi_fu_245_p4 <= p_s_reg_241;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bound8_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_320_p3),8));
    bound_fu_344_p0 <= bound_fu_344_p00(7 - 1 downto 0);
    bound_fu_344_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_320_p3),12));
    bound_fu_344_p1 <= bound_fu_344_p10(5 - 1 downto 0);
    bound_fu_344_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_38_fu_332_p1),12));
    bound_fu_344_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_344_p0) * unsigned(bound_fu_344_p1), 12));
    enable_read_read_fu_102_p2 <= (0=>enable, others=>'-');
    exitcond4_mid1_fu_578_p2 <= (not_exitcond_flatten_2_fu_561_p2 and exitcond4_mid_fu_515_p2);
    exitcond4_mid_fu_515_p2 <= (not_exitcond_flatten_reg_964 and exitcond_fu_509_p2);
    exitcond_flatten2_fu_386_p2 <= "1" when (indvar_flatten_reg_264 = ap_const_lv4_4) else "0";
    exitcond_flatten4_fu_350_p2 <= "1" when (indvar_flatten3_reg_230 = bound_reg_929) else "0";
    exitcond_flatten_fu_367_p2 <= "1" when (indvar_flatten4_reg_253 = bound8_reg_924) else "0";
    exitcond_flatten_mid_fu_392_p2 <= (not_exitcond_flatten_fu_380_p2 and exitcond_flatten2_fu_386_p2);
    exitcond_flatten_not_fu_556_p2 <= (exitcond_flatten2_reg_971 xor ap_const_lv1_1);
    exitcond_fu_509_p2 <= "1" when (p_6_reg_297 = ap_const_lv2_2) else "0";
    grp_fu_870_p0 <= ap_const_lv13_35(7 - 1 downto 0);
    grp_fu_870_p1 <= grp_fu_870_p10(7 - 1 downto 0);
    grp_fu_870_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_44_reg_1005),13));
    grp_fu_870_p2 <= grp_fu_870_p20(7 - 1 downto 0);
    grp_fu_870_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_5_reg_1023),13));
    grp_fu_879_p0 <= ap_const_lv10_1A(6 - 1 downto 0);
    grp_fu_879_p1 <= grp_fu_879_p10(5 - 1 downto 0);
    grp_fu_879_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_mid2_v_reg_958_pp0_iter3_reg),10));
    grp_fu_879_p2 <= grp_fu_879_p20(5 - 1 downto 0);
    grp_fu_879_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_mid2_reg_999_pp0_iter3_reg),10));
    i_V_fu_584_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(p_5_mid_fu_526_p3));
    indvar_flatten33_op_fu_418_p2 <= std_logic_vector(unsigned(indvar_flatten4_reg_253) + unsigned(ap_const_lv8_1));
    indvar_flatten_next3_fu_424_p3 <= 
        ap_const_lv8_1 when (exitcond_flatten_fu_367_p2(0) = '1') else 
        indvar_flatten33_op_fu_418_p2;
    indvar_flatten_next4_fu_355_p2 <= std_logic_vector(unsigned(indvar_flatten3_reg_230) + unsigned(ap_const_lv12_1));
    indvar_flatten_next_fu_410_p3 <= 
        ap_const_lv4_1 when (tmp_17_fu_398_p2(0) = '1') else 
        indvar_flatten_op_fu_404_p2;
    indvar_flatten_op_fu_404_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_264) + unsigned(ap_const_lv4_1));
    j_V_fu_706_p2 <= std_logic_vector(unsigned(p_6_mid2_fu_600_p3) + unsigned(ap_const_lv2_1));
    not_exitcond_flatten_2_fu_561_p2 <= (exitcond_flatten_reg_948 or exitcond_flatten_not_fu_556_p2);
    not_exitcond_flatten_fu_380_p2 <= (exitcond_flatten_fu_367_p2 xor ap_const_lv1_1);
    or_cond_fu_700_p2 <= (tmp_18_mid2_fu_658_p3 and tmp_12_fu_694_p2);
    p_4_mid_fu_460_p3 <= 
        ap_const_lv5_0 when (exitcond_flatten_reg_948(0) = '1') else 
        ap_phi_mux_p_4_phi_fu_279_p4;
    p_5_cast_mid2_fu_612_p3 <= 
        tmp_41_fu_608_p1 when (exitcond4_mid1_fu_578_p2(0) = '1') else 
        p_5_cast_mid3_fu_566_p2;
    p_5_cast_mid3_fu_566_p2 <= (p_5_cast_mid_fu_493_p2 and not_exitcond_flatten_2_fu_561_p2);
    p_5_cast_mid_fu_493_p2 <= (tmp_39_fu_489_p1 and not_exitcond_flatten_reg_964);
    p_5_mid2_fu_666_p3 <= 
        i_V_fu_584_p2 when (exitcond4_mid1_fu_578_p2(0) = '1') else 
        p_5_mid_fu_526_p3;
    p_5_mid_fu_526_p3 <= 
        ap_const_lv2_0 when (tmp_17_reg_984(0) = '1') else 
        p_5_reg_286;
    p_6_mid2_fu_600_p3 <= 
        ap_const_lv2_0 when (tmp_40_fu_595_p2(0) = '1') else 
        p_6_reg_297;
    p_tmp_0_3_fu_728_p3 <= 
        tmp_0_3_fu_86 when (tmp_10_reg_1015_pp0_iter2_reg(0) = '1') else 
        ap_const_lv16_8001;
    r_V_5_fu_688_p2 <= std_logic_vector(unsigned(rhs_V_5_cast_fu_684_p1) + unsigned(r_V_mid2_fu_542_p3));
    r_V_6_fu_436_p0 <= rhs_V_reg_916(2 - 1 downto 0);
    r_V_6_fu_436_p1 <= r_V_6_fu_436_p10(5 - 1 downto 0);
    r_V_6_fu_436_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_s_reg_241),7));
    r_V_6_fu_436_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_6_fu_436_p0) * unsigned(r_V_6_fu_436_p1), 7));
    r_V_7_fu_454_p2 <= std_logic_vector(unsigned(rhs_V_6_cast_fu_450_p1) + unsigned(r_V_6_fu_436_p2));
    r_V_8_mid1_fu_470_p0 <= rhs_V_reg_916(2 - 1 downto 0);
    r_V_8_mid1_fu_470_p1 <= r_V_8_mid1_fu_470_p10(5 - 1 downto 0);
    r_V_8_mid1_fu_470_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tr_V_reg_943),7));
    r_V_8_mid1_fu_470_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_8_mid1_fu_470_p0) * unsigned(r_V_8_mid1_fu_470_p1), 7));
    r_V_8_mid2_fu_475_p3 <= 
        r_V_8_mid1_fu_470_p2 when (exitcond_flatten_reg_948(0) = '1') else 
        r_V_6_fu_436_p2;
    r_V_9_mid1_fu_624_p2 <= std_logic_vector(unsigned(rhs_V_6_cast_mid1_fu_620_p1) + unsigned(r_V_8_mid2_fu_475_p3));
    r_V_fu_445_p0 <= rhs_V_reg_916(2 - 1 downto 0);
    r_V_fu_445_p1 <= r_V_fu_445_p10(5 - 1 downto 0);
    r_V_fu_445_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_p_4_phi_fu_279_p4),7));
    r_V_fu_445_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_445_p0) * unsigned(r_V_fu_445_p1), 7));
    r_V_mid1_fu_537_p0 <= rhs_V_reg_916(2 - 1 downto 0);
    r_V_mid1_fu_537_p1 <= r_V_mid1_fu_537_p10(5 - 1 downto 0);
    r_V_mid1_fu_537_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tc_V_fu_520_p2),7));
    r_V_mid1_fu_537_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_mid1_fu_537_p0) * unsigned(r_V_mid1_fu_537_p1), 7));
    r_V_mid2_fu_542_p3 <= 
        r_V_mid1_fu_537_p2 when (exitcond_flatten_mid_reg_976(0) = '1') else 
        r_V_mid_fu_482_p3;
    r_V_mid_fu_482_p3 <= 
        ap_const_lv7_0 when (exitcond_flatten_reg_948(0) = '1') else 
        r_V_fu_445_p2;
    rhs_V_5_cast_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_6_mid2_fu_600_p3),7));
    rhs_V_6_cast_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_5_reg_286),7));
    rhs_V_6_cast_mid1_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_V_fu_584_p2),7));
    rhs_V_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Kernel_stride_2b_V_fu_308_p1),7));
    tc_V_fu_520_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(p_4_mid_fu_460_p3));
    tmp_0_tmp_0_3_fu_741_p3 <= 
        Input_0_q0 when (tmp_13_fu_735_p2(0) = '1') else 
        p_tmp_0_3_fu_728_p3;
    tmp_10_fu_678_p2 <= (tmp_45_fu_674_p1 or p_5_cast_mid2_fu_612_p3);
    tmp_12_fu_694_p2 <= "1" when (p_6_mid2_fu_600_p3 = ap_const_lv2_1) else "0";
    tmp_13_fu_735_p2 <= "1" when (signed(Input_0_q0) > signed(p_tmp_0_3_fu_728_p3)) else "0";
    tmp_15_mid2_v_fu_372_p3 <= 
        tr_V_fu_361_p2 when (exitcond_flatten_fu_367_p2(0) = '1') else 
        ap_phi_mux_p_s_phi_fu_245_p4;
    tmp_16_fu_498_p2 <= "1" when (p_5_reg_286 = ap_const_lv2_1) else "0";
    tmp_16_mid2_fu_549_p3 <= 
        tc_V_fu_520_p2 when (exitcond_flatten_mid_reg_976(0) = '1') else 
        p_4_mid_fu_460_p3;
    tmp_17_fu_398_p2 <= (exitcond_flatten_mid_fu_392_p2 or exitcond_flatten_fu_367_p2);
    tmp_18_mid1_fu_652_p2 <= "1" when (p_5_mid_fu_526_p3 = ap_const_lv2_0) else "0";
    tmp_18_mid2_fu_658_p3 <= 
        tmp_18_mid1_fu_652_p2 when (exitcond4_mid1_fu_578_p2(0) = '1') else 
        tmp_18_mid3_fu_572_p2;
    tmp_18_mid3_fu_572_p2 <= (tmp_18_mid_fu_504_p2 and not_exitcond_flatten_2_fu_561_p2);
    tmp_18_mid_fu_504_p2 <= (tmp_16_fu_498_p2 and not_exitcond_flatten_reg_964);
    tmp_19_fu_590_p2 <= (exitcond_flatten_mid_reg_976 or exitcond4_mid1_fu_578_p2);
    tmp_1_1_fu_770_p3 <= 
        Input_1_q0 when (tmp_52_1_fu_764_p2(0) = '1') else 
        tmp_1_5_fu_757_p3;
    tmp_1_5_fu_757_p3 <= 
        tmp_1_2_fu_90 when (tmp_10_reg_1015_pp0_iter2_reg(0) = '1') else 
        ap_const_lv16_8001;
    tmp_29_cast_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_879_p3),64));
    tmp_2_1_fu_799_p3 <= 
        Input_2_q0 when (tmp_52_2_fu_793_p2(0) = '1') else 
        tmp_2_5_fu_786_p3;
    tmp_2_5_fu_786_p3 <= 
        tmp_2_2_fu_94 when (tmp_10_reg_1015_pp0_iter2_reg(0) = '1') else 
        ap_const_lv16_8001;
        tmp_32_cast_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_870_p3),64));

    tmp_37_fu_316_p1 <= TC_MIN(5 - 1 downto 0);
    tmp_38_fu_332_p1 <= TR_MIN(5 - 1 downto 0);
    tmp_39_fu_489_p1 <= p_5_reg_286(1 - 1 downto 0);
    tmp_3_1_fu_828_p3 <= 
        Input_3_q0 when (tmp_52_3_fu_822_p2(0) = '1') else 
        tmp_3_5_fu_815_p3;
    tmp_3_5_fu_815_p3 <= 
        tmp_3_2_fu_98 when (tmp_10_reg_1015_pp0_iter2_reg(0) = '1') else 
        ap_const_lv16_8001;
    tmp_40_fu_595_p2 <= (tmp_19_fu_590_p2 or exitcond_flatten_reg_948);
    tmp_41_fu_608_p1 <= i_V_fu_584_p2(1 - 1 downto 0);
    tmp_42_fu_630_p3 <= 
        r_V_8_mid1_fu_470_p2 when (exitcond_flatten_reg_948(0) = '1') else 
        r_V_7_fu_454_p2;
    tmp_43_fu_637_p3 <= 
        r_V_8_mid2_fu_475_p3 when (exitcond_flatten_mid_reg_976(0) = '1') else 
        tmp_42_fu_630_p3;
    tmp_44_fu_644_p3 <= 
        r_V_9_mid1_fu_624_p2 when (exitcond4_mid1_fu_578_p2(0) = '1') else 
        tmp_43_fu_637_p3;
    tmp_45_fu_674_p1 <= p_6_mid2_fu_600_p3(1 - 1 downto 0);
    tmp_52_1_fu_764_p2 <= "1" when (signed(Input_1_q0) > signed(tmp_1_5_fu_757_p3)) else "0";
    tmp_52_2_fu_793_p2 <= "1" when (signed(Input_2_q0) > signed(tmp_2_5_fu_786_p3)) else "0";
    tmp_52_3_fu_822_p2 <= "1" when (signed(Input_3_q0) > signed(tmp_3_5_fu_815_p3)) else "0";
    tmp_s_fu_320_p3 <= (tmp_37_fu_316_p1 & ap_const_lv2_0);
    tr_V_fu_361_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(ap_phi_mux_p_s_phi_fu_245_p4));
end behav;
