-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mmcpy_outputport is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_Output_r_AWVALID : OUT STD_LOGIC;
    m_axi_Output_r_AWREADY : IN STD_LOGIC;
    m_axi_Output_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Output_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Output_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Output_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Output_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Output_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Output_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Output_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Output_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Output_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Output_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Output_r_WVALID : OUT STD_LOGIC;
    m_axi_Output_r_WREADY : IN STD_LOGIC;
    m_axi_Output_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Output_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Output_r_WLAST : OUT STD_LOGIC;
    m_axi_Output_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Output_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Output_r_ARVALID : OUT STD_LOGIC;
    m_axi_Output_r_ARREADY : IN STD_LOGIC;
    m_axi_Output_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Output_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Output_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Output_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Output_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Output_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Output_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Output_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Output_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Output_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Output_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Output_r_RVALID : IN STD_LOGIC;
    m_axi_Output_r_RREADY : OUT STD_LOGIC;
    m_axi_Output_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Output_r_RLAST : IN STD_LOGIC;
    m_axi_Output_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Output_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Output_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Output_r_BVALID : IN STD_LOGIC;
    m_axi_Output_r_BREADY : OUT STD_LOGIC;
    m_axi_Output_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Output_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Output_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    Output_offset : IN STD_LOGIC_VECTOR (29 downto 0);
    output_tmp_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_tmp_ce0 : OUT STD_LOGIC;
    output_tmp_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tm_V_4 : IN STD_LOGIC_VECTOR (5 downto 0);
    mLoop_V : IN STD_LOGIC_VECTOR (4 downto 0);
    OutputOffset : IN STD_LOGIC_VECTOR (31 downto 0);
    OutputLength : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of mmcpy_outputport is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal Output_r_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal Output_r_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_reg_213 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_213_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal Output_r_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal enable_reg_203 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_reg_132 : STD_LOGIC_VECTOR (7 downto 0);
    signal enable_fu_147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Output_addr_reg_207 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_Output_r_WREADY : STD_LOGIC;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar_next_fu_186_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal output_tmp_load_reg_227 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_m_axi_Output_r_AWREADY : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal indvar1_fu_192_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_cast_fu_167_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_Output_r_AWREADY : STD_LOGIC := '0';
    signal ap_block_state10 : BOOLEAN;
    signal ap_reg_ioackin_m_axi_Output_r_WREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mLoop_V_cast_fu_143_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast_fu_153_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_cast_fu_157_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sum_fu_161_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_sig_ioackin_m_axi_Output_r_AWREADY = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_sig_ioackin_m_axi_Output_r_AWREADY = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_Output_r_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_Output_r_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    if ((ap_sig_ioackin_m_axi_Output_r_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_Output_r_AWREADY <= ap_const_logic_0;
                    elsif ((m_axi_Output_r_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_Output_r_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_Output_r_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_Output_r_WREADY <= ap_const_logic_0;
            else
                if (((exitcond_reg_213_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                        ap_reg_ioackin_m_axi_Output_r_WREADY <= ap_const_logic_0;
                    elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (m_axi_Output_r_WREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_m_axi_Output_r_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    indvar_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_181_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_reg_132 <= indvar_next_fu_186_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_sig_ioackin_m_axi_Output_r_AWREADY = ap_const_logic_1))) then 
                indvar_reg_132 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (enable_fu_147_p2 = ap_const_lv1_1))) then
                Output_addr_reg_207 <= sum_cast_fu_167_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                enable_reg_203 <= enable_fu_147_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_reg_213 <= exitcond_fu_181_p2;
                exitcond_reg_213_pp0_iter1_reg <= exitcond_reg_213;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_213 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                output_tmp_load_reg_227 <= output_tmp_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_Output_r_BVALID, ap_CS_fsm_state2, ap_enable_reg_pp0_iter2, ap_CS_fsm_state10, enable_reg_203, enable_fu_147_p2, exitcond_fu_181_p2, ap_enable_reg_pp0_iter0, ap_sig_ioackin_m_axi_Output_r_AWREADY, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((enable_fu_147_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (enable_fu_147_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_sig_ioackin_m_axi_Output_r_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_fu_181_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_fu_181_p2 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if ((not(((m_axi_Output_r_BVALID = ap_const_logic_0) and (enable_reg_203 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    Output_r_blk_n_AW_assign_proc : process(m_axi_Output_r_AWREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Output_r_blk_n_AW <= m_axi_Output_r_AWREADY;
        else 
            Output_r_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    Output_r_blk_n_B_assign_proc : process(m_axi_Output_r_BVALID, ap_CS_fsm_state10, enable_reg_203)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (enable_reg_203 = ap_const_lv1_1))) then 
            Output_r_blk_n_B <= m_axi_Output_r_BVALID;
        else 
            Output_r_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    Output_r_blk_n_W_assign_proc : process(m_axi_Output_r_WREADY, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, exitcond_reg_213_pp0_iter1_reg)
    begin
        if (((exitcond_reg_213_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            Output_r_blk_n_W <= m_axi_Output_r_WREADY;
        else 
            Output_r_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(7);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io));
    end process;


    ap_block_state10_assign_proc : process(m_axi_Output_r_BVALID, enable_reg_203)
    begin
                ap_block_state10 <= ((m_axi_Output_r_BVALID = ap_const_logic_0) and (enable_reg_203 = ap_const_lv1_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(exitcond_reg_213_pp0_iter1_reg, ap_sig_ioackin_m_axi_Output_r_WREADY)
    begin
                ap_block_state5_io <= ((exitcond_reg_213_pp0_iter1_reg = ap_const_lv1_0) and (ap_sig_ioackin_m_axi_Output_r_WREADY = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond_fu_181_p2)
    begin
        if ((exitcond_fu_181_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_Output_r_BVALID, ap_CS_fsm_state10, enable_reg_203)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((m_axi_Output_r_BVALID = ap_const_logic_0) and (enable_reg_203 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_Output_r_BVALID, ap_CS_fsm_state10, enable_reg_203)
    begin
        if ((not(((m_axi_Output_r_BVALID = ap_const_logic_0) and (enable_reg_203 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_Output_r_AWREADY_assign_proc : process(m_axi_Output_r_AWREADY, ap_reg_ioackin_m_axi_Output_r_AWREADY)
    begin
        if ((ap_reg_ioackin_m_axi_Output_r_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_Output_r_AWREADY <= m_axi_Output_r_AWREADY;
        else 
            ap_sig_ioackin_m_axi_Output_r_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_Output_r_WREADY_assign_proc : process(m_axi_Output_r_WREADY, ap_reg_ioackin_m_axi_Output_r_WREADY)
    begin
        if ((ap_reg_ioackin_m_axi_Output_r_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_Output_r_WREADY <= m_axi_Output_r_WREADY;
        else 
            ap_sig_ioackin_m_axi_Output_r_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    enable_fu_147_p2 <= "1" when (unsigned(mLoop_V_cast_fu_143_p1) > unsigned(tm_V_4)) else "0";
    exitcond_fu_181_p2 <= "1" when (indvar_reg_132 = OutputLength) else "0";
    indvar1_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar_reg_132),64));
    indvar_next_fu_186_p2 <= std_logic_vector(unsigned(indvar_reg_132) + unsigned(ap_const_lv8_1));
    mLoop_V_cast_fu_143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mLoop_V),6));
    m_axi_Output_r_ARADDR <= ap_const_lv32_0;
    m_axi_Output_r_ARBURST <= ap_const_lv2_0;
    m_axi_Output_r_ARCACHE <= ap_const_lv4_0;
    m_axi_Output_r_ARID <= ap_const_lv1_0;
    m_axi_Output_r_ARLEN <= ap_const_lv32_0;
    m_axi_Output_r_ARLOCK <= ap_const_lv2_0;
    m_axi_Output_r_ARPROT <= ap_const_lv3_0;
    m_axi_Output_r_ARQOS <= ap_const_lv4_0;
    m_axi_Output_r_ARREGION <= ap_const_lv4_0;
    m_axi_Output_r_ARSIZE <= ap_const_lv3_0;
    m_axi_Output_r_ARUSER <= ap_const_lv1_0;
    m_axi_Output_r_ARVALID <= ap_const_logic_0;
    m_axi_Output_r_AWADDR <= Output_addr_reg_207;
    m_axi_Output_r_AWBURST <= ap_const_lv2_0;
    m_axi_Output_r_AWCACHE <= ap_const_lv4_0;
    m_axi_Output_r_AWID <= ap_const_lv1_0;
    m_axi_Output_r_AWLEN <= std_logic_vector(IEEE.numeric_std.resize(unsigned(OutputLength),32));
    m_axi_Output_r_AWLOCK <= ap_const_lv2_0;
    m_axi_Output_r_AWPROT <= ap_const_lv3_0;
    m_axi_Output_r_AWQOS <= ap_const_lv4_0;
    m_axi_Output_r_AWREGION <= ap_const_lv4_0;
    m_axi_Output_r_AWSIZE <= ap_const_lv3_0;
    m_axi_Output_r_AWUSER <= ap_const_lv1_0;

    m_axi_Output_r_AWVALID_assign_proc : process(ap_CS_fsm_state2, ap_reg_ioackin_m_axi_Output_r_AWREADY)
    begin
        if (((ap_reg_ioackin_m_axi_Output_r_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_Output_r_AWVALID <= ap_const_logic_1;
        else 
            m_axi_Output_r_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_Output_r_BREADY_assign_proc : process(m_axi_Output_r_BVALID, ap_CS_fsm_state10, enable_reg_203)
    begin
        if ((not(((m_axi_Output_r_BVALID = ap_const_logic_0) and (enable_reg_203 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state10) and (enable_reg_203 = ap_const_lv1_1))) then 
            m_axi_Output_r_BREADY <= ap_const_logic_1;
        else 
            m_axi_Output_r_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_Output_r_RREADY <= ap_const_logic_0;
    m_axi_Output_r_WDATA <= output_tmp_load_reg_227;
    m_axi_Output_r_WID <= ap_const_lv1_0;
    m_axi_Output_r_WLAST <= ap_const_logic_0;
    m_axi_Output_r_WSTRB <= ap_const_lv4_F;
    m_axi_Output_r_WUSER <= ap_const_lv1_0;

    m_axi_Output_r_WVALID_assign_proc : process(ap_enable_reg_pp0_iter2, exitcond_reg_213_pp0_iter1_reg, ap_reg_ioackin_m_axi_Output_r_WREADY, ap_block_pp0_stage0_01001)
    begin
        if (((exitcond_reg_213_pp0_iter1_reg = ap_const_lv1_0) and (ap_reg_ioackin_m_axi_Output_r_WREADY = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            m_axi_Output_r_WVALID <= ap_const_logic_1;
        else 
            m_axi_Output_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    output_tmp_address0 <= indvar1_fu_192_p1(8 - 1 downto 0);

    output_tmp_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_tmp_ce0 <= ap_const_logic_1;
        else 
            output_tmp_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sext_cast_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Output_offset),33));
        sum_cast_fu_167_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_fu_161_p2),64));

    sum_fu_161_p2 <= std_logic_vector(signed(tmp_cast_fu_153_p1) + signed(sext_cast_fu_157_p1));
        tmp_cast_fu_153_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(OutputOffset),33));

end behav;
