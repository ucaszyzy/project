// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _weight_mmcpy_everyKx_HH_
#define _weight_mmcpy_everyKx_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct weight_mmcpy_everyKx : public sc_module {
    // Port declarations 65
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > m_axi_Weight_AWVALID;
    sc_in< sc_logic > m_axi_Weight_AWREADY;
    sc_out< sc_lv<32> > m_axi_Weight_AWADDR;
    sc_out< sc_lv<1> > m_axi_Weight_AWID;
    sc_out< sc_lv<32> > m_axi_Weight_AWLEN;
    sc_out< sc_lv<3> > m_axi_Weight_AWSIZE;
    sc_out< sc_lv<2> > m_axi_Weight_AWBURST;
    sc_out< sc_lv<2> > m_axi_Weight_AWLOCK;
    sc_out< sc_lv<4> > m_axi_Weight_AWCACHE;
    sc_out< sc_lv<3> > m_axi_Weight_AWPROT;
    sc_out< sc_lv<4> > m_axi_Weight_AWQOS;
    sc_out< sc_lv<4> > m_axi_Weight_AWREGION;
    sc_out< sc_lv<1> > m_axi_Weight_AWUSER;
    sc_out< sc_logic > m_axi_Weight_WVALID;
    sc_in< sc_logic > m_axi_Weight_WREADY;
    sc_out< sc_lv<32> > m_axi_Weight_WDATA;
    sc_out< sc_lv<4> > m_axi_Weight_WSTRB;
    sc_out< sc_logic > m_axi_Weight_WLAST;
    sc_out< sc_lv<1> > m_axi_Weight_WID;
    sc_out< sc_lv<1> > m_axi_Weight_WUSER;
    sc_out< sc_logic > m_axi_Weight_ARVALID;
    sc_in< sc_logic > m_axi_Weight_ARREADY;
    sc_out< sc_lv<32> > m_axi_Weight_ARADDR;
    sc_out< sc_lv<1> > m_axi_Weight_ARID;
    sc_out< sc_lv<32> > m_axi_Weight_ARLEN;
    sc_out< sc_lv<3> > m_axi_Weight_ARSIZE;
    sc_out< sc_lv<2> > m_axi_Weight_ARBURST;
    sc_out< sc_lv<2> > m_axi_Weight_ARLOCK;
    sc_out< sc_lv<4> > m_axi_Weight_ARCACHE;
    sc_out< sc_lv<3> > m_axi_Weight_ARPROT;
    sc_out< sc_lv<4> > m_axi_Weight_ARQOS;
    sc_out< sc_lv<4> > m_axi_Weight_ARREGION;
    sc_out< sc_lv<1> > m_axi_Weight_ARUSER;
    sc_in< sc_logic > m_axi_Weight_RVALID;
    sc_out< sc_logic > m_axi_Weight_RREADY;
    sc_in< sc_lv<32> > m_axi_Weight_RDATA;
    sc_in< sc_logic > m_axi_Weight_RLAST;
    sc_in< sc_lv<1> > m_axi_Weight_RID;
    sc_in< sc_lv<1> > m_axi_Weight_RUSER;
    sc_in< sc_lv<2> > m_axi_Weight_RRESP;
    sc_in< sc_logic > m_axi_Weight_BVALID;
    sc_out< sc_logic > m_axi_Weight_BREADY;
    sc_in< sc_lv<2> > m_axi_Weight_BRESP;
    sc_in< sc_lv<1> > m_axi_Weight_BID;
    sc_in< sc_lv<1> > m_axi_Weight_BUSER;
    sc_in< sc_lv<30> > Weight_offset;
    sc_out< sc_lv<6> > weight_memcpy_buffer_address0;
    sc_out< sc_logic > weight_memcpy_buffer_ce0;
    sc_out< sc_logic > weight_memcpy_buffer_we0;
    sc_out< sc_lv<32> > weight_memcpy_buffer_d0;
    sc_in< sc_lv<2> > t3_V;
    sc_in< sc_lv<3> > t4_V;
    sc_in< sc_lv<3> > next_t3_0_V_read;
    sc_in< sc_lv<3> > next_t4_0_V_read;
    sc_in< sc_lv<8> > ReadLength;
    sc_in< sc_logic > init_enable;
    sc_in< sc_logic > enable;
    sc_out< sc_lv<3> > ap_return_0;
    sc_out< sc_lv<3> > ap_return_1;


    // Module declarations
    weight_mmcpy_everyKx(sc_module_name name);
    SC_HAS_PROCESS(weight_mmcpy_everyKx);

    ~weight_mmcpy_everyKx();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<11> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > Woffset;
    sc_signal< sc_logic > Weight_blk_n_AR;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > Weight_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > exitcond_reg_311;
    sc_signal< sc_lv<8> > indvar_reg_154;
    sc_signal< sc_lv<8> > indvar_reg_154_pp0_iter1_reg;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state10_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state11_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<32> > ReadLength_cast1_fu_184_p1;
    sc_signal< sc_lv<32> > ReadLength_cast1_reg_289;
    sc_signal< sc_lv<3> > t3_V_cast_fu_188_p1;
    sc_signal< sc_lv<3> > t3_V_cast_reg_295;
    sc_signal< sc_lv<32> > p_Woffset_load_fu_196_p3;
    sc_signal< sc_lv<32> > p_Woffset_load_reg_300;
    sc_signal< sc_lv<1> > enable_read_read_fu_82_p2;
    sc_signal< sc_lv<32> > Weight_addr_reg_305;
    sc_signal< sc_lv<1> > exitcond_fu_228_p2;
    sc_signal< sc_lv<1> > exitcond_reg_311_pp0_iter1_reg;
    sc_signal< sc_lv<8> > indvar_next_fu_233_p2;
    sc_signal< sc_lv<8> > indvar_next_reg_315;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<32> > Weight_addr_read_reg_320;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state9;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<8> > ap_phi_mux_indvar_phi_fu_158_p4;
    sc_signal< sc_lv<3> > next_t4_0_V_write_a_reg_166;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_lv<3> > next_t3_0_V_write_a_reg_175;
    sc_signal< sc_lv<64> > indvar1_fu_239_p1;
    sc_signal< sc_lv<64> > sum_cast_fu_218_p1;
    sc_signal< sc_logic > ap_reg_ioackin_m_axi_Weight_ARREADY;
    sc_signal< sc_logic > ap_sig_ioackin_m_axi_Weight_ARREADY;
    sc_signal< sc_lv<32> > tmp_1_fu_244_p2;
    sc_signal< sc_lv<1> > p_Woffset_load_fu_196_p0;
    sc_signal< sc_lv<33> > tmp_cast_fu_204_p1;
    sc_signal< sc_lv<33> > sext_cast_fu_208_p1;
    sc_signal< sc_lv<33> > sum_fu_212_p2;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< sc_lv<3> > ap_return_0_preg;
    sc_signal< sc_lv<3> > ap_return_1_preg;
    sc_signal< sc_lv<11> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<11> ap_ST_fsm_state1;
    static const sc_lv<11> ap_ST_fsm_state2;
    static const sc_lv<11> ap_ST_fsm_state3;
    static const sc_lv<11> ap_ST_fsm_state4;
    static const sc_lv<11> ap_ST_fsm_state5;
    static const sc_lv<11> ap_ST_fsm_state6;
    static const sc_lv<11> ap_ST_fsm_state7;
    static const sc_lv<11> ap_ST_fsm_state8;
    static const sc_lv<11> ap_ST_fsm_pp0_stage0;
    static const sc_lv<11> ap_ST_fsm_state12;
    static const sc_lv<11> ap_ST_fsm_state13;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<32> ap_const_lv32_A;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ReadLength_cast1_fu_184_p1();
    void thread_Weight_blk_n_AR();
    void thread_Weight_blk_n_R();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state8();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state10_pp0_stage0_iter1();
    void thread_ap_block_state11_pp0_stage0_iter2();
    void thread_ap_block_state9_pp0_stage0_iter0();
    void thread_ap_condition_pp0_exit_iter0_state9();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_indvar_phi_fu_158_p4();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_sig_ioackin_m_axi_Weight_ARREADY();
    void thread_enable_read_read_fu_82_p2();
    void thread_exitcond_fu_228_p2();
    void thread_indvar1_fu_239_p1();
    void thread_indvar_next_fu_233_p2();
    void thread_m_axi_Weight_ARADDR();
    void thread_m_axi_Weight_ARBURST();
    void thread_m_axi_Weight_ARCACHE();
    void thread_m_axi_Weight_ARID();
    void thread_m_axi_Weight_ARLEN();
    void thread_m_axi_Weight_ARLOCK();
    void thread_m_axi_Weight_ARPROT();
    void thread_m_axi_Weight_ARQOS();
    void thread_m_axi_Weight_ARREGION();
    void thread_m_axi_Weight_ARSIZE();
    void thread_m_axi_Weight_ARUSER();
    void thread_m_axi_Weight_ARVALID();
    void thread_m_axi_Weight_AWADDR();
    void thread_m_axi_Weight_AWBURST();
    void thread_m_axi_Weight_AWCACHE();
    void thread_m_axi_Weight_AWID();
    void thread_m_axi_Weight_AWLEN();
    void thread_m_axi_Weight_AWLOCK();
    void thread_m_axi_Weight_AWPROT();
    void thread_m_axi_Weight_AWQOS();
    void thread_m_axi_Weight_AWREGION();
    void thread_m_axi_Weight_AWSIZE();
    void thread_m_axi_Weight_AWUSER();
    void thread_m_axi_Weight_AWVALID();
    void thread_m_axi_Weight_BREADY();
    void thread_m_axi_Weight_RREADY();
    void thread_m_axi_Weight_WDATA();
    void thread_m_axi_Weight_WID();
    void thread_m_axi_Weight_WLAST();
    void thread_m_axi_Weight_WSTRB();
    void thread_m_axi_Weight_WUSER();
    void thread_m_axi_Weight_WVALID();
    void thread_p_Woffset_load_fu_196_p0();
    void thread_p_Woffset_load_fu_196_p3();
    void thread_sext_cast_fu_208_p1();
    void thread_sum_cast_fu_218_p1();
    void thread_sum_fu_212_p2();
    void thread_t3_V_cast_fu_188_p1();
    void thread_tmp_1_fu_244_p2();
    void thread_tmp_cast_fu_204_p1();
    void thread_weight_memcpy_buffer_address0();
    void thread_weight_memcpy_buffer_ce0();
    void thread_weight_memcpy_buffer_d0();
    void thread_weight_memcpy_buffer_we0();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
