// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "weight_mmcpy_everyKx.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic weight_mmcpy_everyKx::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic weight_mmcpy_everyKx::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<11> weight_mmcpy_everyKx::ap_ST_fsm_state1 = "1";
const sc_lv<11> weight_mmcpy_everyKx::ap_ST_fsm_state2 = "10";
const sc_lv<11> weight_mmcpy_everyKx::ap_ST_fsm_state3 = "100";
const sc_lv<11> weight_mmcpy_everyKx::ap_ST_fsm_state4 = "1000";
const sc_lv<11> weight_mmcpy_everyKx::ap_ST_fsm_state5 = "10000";
const sc_lv<11> weight_mmcpy_everyKx::ap_ST_fsm_state6 = "100000";
const sc_lv<11> weight_mmcpy_everyKx::ap_ST_fsm_state7 = "1000000";
const sc_lv<11> weight_mmcpy_everyKx::ap_ST_fsm_state8 = "10000000";
const sc_lv<11> weight_mmcpy_everyKx::ap_ST_fsm_pp0_stage0 = "100000000";
const sc_lv<11> weight_mmcpy_everyKx::ap_ST_fsm_state12 = "1000000000";
const sc_lv<11> weight_mmcpy_everyKx::ap_ST_fsm_state13 = "10000000000";
const bool weight_mmcpy_everyKx::ap_const_boolean_1 = true;
const sc_lv<32> weight_mmcpy_everyKx::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> weight_mmcpy_everyKx::ap_const_lv1_0 = "0";
const sc_lv<3> weight_mmcpy_everyKx::ap_const_lv3_0 = "000";
const sc_lv<2> weight_mmcpy_everyKx::ap_const_lv2_0 = "00";
const sc_lv<4> weight_mmcpy_everyKx::ap_const_lv4_0 = "0000";
const sc_lv<32> weight_mmcpy_everyKx::ap_const_lv32_1 = "1";
const sc_lv<32> weight_mmcpy_everyKx::ap_const_lv32_8 = "1000";
const bool weight_mmcpy_everyKx::ap_const_boolean_0 = false;
const sc_lv<1> weight_mmcpy_everyKx::ap_const_lv1_1 = "1";
const sc_lv<32> weight_mmcpy_everyKx::ap_const_lv32_7 = "111";
const sc_lv<8> weight_mmcpy_everyKx::ap_const_lv8_0 = "00000000";
const sc_lv<32> weight_mmcpy_everyKx::ap_const_lv32_9 = "1001";
const sc_lv<8> weight_mmcpy_everyKx::ap_const_lv8_1 = "1";
const sc_lv<32> weight_mmcpy_everyKx::ap_const_lv32_A = "1010";

weight_mmcpy_everyKx::weight_mmcpy_everyKx(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ReadLength_cast1_fu_184_p1);
    sensitive << ( ReadLength );

    SC_METHOD(thread_Weight_blk_n_AR);
    sensitive << ( m_axi_Weight_ARREADY );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_Weight_blk_n_R);
    sensitive << ( m_axi_Weight_RVALID );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_reg_311 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( m_axi_Weight_RVALID );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_311 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( m_axi_Weight_RVALID );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_311 );

    SC_METHOD(thread_ap_block_state10_pp0_stage0_iter1);
    sensitive << ( m_axi_Weight_RVALID );
    sensitive << ( exitcond_reg_311 );

    SC_METHOD(thread_ap_block_state11_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state9_pp0_stage0_iter0);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state9);
    sensitive << ( exitcond_fu_228_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_phi_mux_indvar_phi_fu_158_p4);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_reg_311 );
    sensitive << ( indvar_reg_154 );
    sensitive << ( indvar_next_reg_315 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( next_t3_0_V_write_a_reg_175 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_return_0_preg );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( next_t4_0_V_write_a_reg_166 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_return_1_preg );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_Weight_ARREADY);
    sensitive << ( m_axi_Weight_ARREADY );
    sensitive << ( ap_reg_ioackin_m_axi_Weight_ARREADY );

    SC_METHOD(thread_enable_read_read_fu_82_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( enable );

    SC_METHOD(thread_exitcond_fu_228_p2);
    sensitive << ( ReadLength );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_phi_mux_indvar_phi_fu_158_p4 );

    SC_METHOD(thread_indvar1_fu_239_p1);
    sensitive << ( indvar_reg_154_pp0_iter1_reg );

    SC_METHOD(thread_indvar_next_fu_233_p2);
    sensitive << ( ap_phi_mux_indvar_phi_fu_158_p4 );

    SC_METHOD(thread_m_axi_Weight_ARADDR);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( Weight_addr_reg_305 );
    sensitive << ( ap_reg_ioackin_m_axi_Weight_ARREADY );

    SC_METHOD(thread_m_axi_Weight_ARBURST);

    SC_METHOD(thread_m_axi_Weight_ARCACHE);

    SC_METHOD(thread_m_axi_Weight_ARID);

    SC_METHOD(thread_m_axi_Weight_ARLEN);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ReadLength_cast1_reg_289 );
    sensitive << ( ap_reg_ioackin_m_axi_Weight_ARREADY );

    SC_METHOD(thread_m_axi_Weight_ARLOCK);

    SC_METHOD(thread_m_axi_Weight_ARPROT);

    SC_METHOD(thread_m_axi_Weight_ARQOS);

    SC_METHOD(thread_m_axi_Weight_ARREGION);

    SC_METHOD(thread_m_axi_Weight_ARSIZE);

    SC_METHOD(thread_m_axi_Weight_ARUSER);

    SC_METHOD(thread_m_axi_Weight_ARVALID);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_reg_ioackin_m_axi_Weight_ARREADY );

    SC_METHOD(thread_m_axi_Weight_AWADDR);

    SC_METHOD(thread_m_axi_Weight_AWBURST);

    SC_METHOD(thread_m_axi_Weight_AWCACHE);

    SC_METHOD(thread_m_axi_Weight_AWID);

    SC_METHOD(thread_m_axi_Weight_AWLEN);

    SC_METHOD(thread_m_axi_Weight_AWLOCK);

    SC_METHOD(thread_m_axi_Weight_AWPROT);

    SC_METHOD(thread_m_axi_Weight_AWQOS);

    SC_METHOD(thread_m_axi_Weight_AWREGION);

    SC_METHOD(thread_m_axi_Weight_AWSIZE);

    SC_METHOD(thread_m_axi_Weight_AWUSER);

    SC_METHOD(thread_m_axi_Weight_AWVALID);

    SC_METHOD(thread_m_axi_Weight_BREADY);

    SC_METHOD(thread_m_axi_Weight_RREADY);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_311 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_m_axi_Weight_WDATA);

    SC_METHOD(thread_m_axi_Weight_WID);

    SC_METHOD(thread_m_axi_Weight_WLAST);

    SC_METHOD(thread_m_axi_Weight_WSTRB);

    SC_METHOD(thread_m_axi_Weight_WUSER);

    SC_METHOD(thread_m_axi_Weight_WVALID);

    SC_METHOD(thread_p_Woffset_load_fu_196_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( init_enable );

    SC_METHOD(thread_p_Woffset_load_fu_196_p3);
    sensitive << ( Woffset );
    sensitive << ( p_Woffset_load_fu_196_p0 );

    SC_METHOD(thread_sext_cast_fu_208_p1);
    sensitive << ( Weight_offset );

    SC_METHOD(thread_sum_cast_fu_218_p1);
    sensitive << ( sum_fu_212_p2 );

    SC_METHOD(thread_sum_fu_212_p2);
    sensitive << ( tmp_cast_fu_204_p1 );
    sensitive << ( sext_cast_fu_208_p1 );

    SC_METHOD(thread_t3_V_cast_fu_188_p1);
    sensitive << ( t3_V );

    SC_METHOD(thread_tmp_1_fu_244_p2);
    sensitive << ( ReadLength_cast1_reg_289 );
    sensitive << ( p_Woffset_load_reg_300 );

    SC_METHOD(thread_tmp_cast_fu_204_p1);
    sensitive << ( p_Woffset_load_fu_196_p3 );

    SC_METHOD(thread_weight_memcpy_buffer_address0);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( indvar1_fu_239_p1 );

    SC_METHOD(thread_weight_memcpy_buffer_ce0);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_weight_memcpy_buffer_d0);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( Weight_addr_read_reg_320 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_weight_memcpy_buffer_we0);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( exitcond_reg_311_pp0_iter1_reg );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( enable_read_read_fu_82_p2 );
    sensitive << ( exitcond_fu_228_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_sig_ioackin_m_axi_Weight_ARREADY );

    ap_CS_fsm = "00000000001";
    Woffset = "00000000000000000000000000000000";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_Weight_ARREADY = SC_LOGIC_0;
    ap_return_0_preg = "000";
    ap_return_1_preg = "000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "weight_mmcpy_everyKx_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_Weight_AWVALID, "(port)m_axi_Weight_AWVALID");
    sc_trace(mVcdFile, m_axi_Weight_AWREADY, "(port)m_axi_Weight_AWREADY");
    sc_trace(mVcdFile, m_axi_Weight_AWADDR, "(port)m_axi_Weight_AWADDR");
    sc_trace(mVcdFile, m_axi_Weight_AWID, "(port)m_axi_Weight_AWID");
    sc_trace(mVcdFile, m_axi_Weight_AWLEN, "(port)m_axi_Weight_AWLEN");
    sc_trace(mVcdFile, m_axi_Weight_AWSIZE, "(port)m_axi_Weight_AWSIZE");
    sc_trace(mVcdFile, m_axi_Weight_AWBURST, "(port)m_axi_Weight_AWBURST");
    sc_trace(mVcdFile, m_axi_Weight_AWLOCK, "(port)m_axi_Weight_AWLOCK");
    sc_trace(mVcdFile, m_axi_Weight_AWCACHE, "(port)m_axi_Weight_AWCACHE");
    sc_trace(mVcdFile, m_axi_Weight_AWPROT, "(port)m_axi_Weight_AWPROT");
    sc_trace(mVcdFile, m_axi_Weight_AWQOS, "(port)m_axi_Weight_AWQOS");
    sc_trace(mVcdFile, m_axi_Weight_AWREGION, "(port)m_axi_Weight_AWREGION");
    sc_trace(mVcdFile, m_axi_Weight_AWUSER, "(port)m_axi_Weight_AWUSER");
    sc_trace(mVcdFile, m_axi_Weight_WVALID, "(port)m_axi_Weight_WVALID");
    sc_trace(mVcdFile, m_axi_Weight_WREADY, "(port)m_axi_Weight_WREADY");
    sc_trace(mVcdFile, m_axi_Weight_WDATA, "(port)m_axi_Weight_WDATA");
    sc_trace(mVcdFile, m_axi_Weight_WSTRB, "(port)m_axi_Weight_WSTRB");
    sc_trace(mVcdFile, m_axi_Weight_WLAST, "(port)m_axi_Weight_WLAST");
    sc_trace(mVcdFile, m_axi_Weight_WID, "(port)m_axi_Weight_WID");
    sc_trace(mVcdFile, m_axi_Weight_WUSER, "(port)m_axi_Weight_WUSER");
    sc_trace(mVcdFile, m_axi_Weight_ARVALID, "(port)m_axi_Weight_ARVALID");
    sc_trace(mVcdFile, m_axi_Weight_ARREADY, "(port)m_axi_Weight_ARREADY");
    sc_trace(mVcdFile, m_axi_Weight_ARADDR, "(port)m_axi_Weight_ARADDR");
    sc_trace(mVcdFile, m_axi_Weight_ARID, "(port)m_axi_Weight_ARID");
    sc_trace(mVcdFile, m_axi_Weight_ARLEN, "(port)m_axi_Weight_ARLEN");
    sc_trace(mVcdFile, m_axi_Weight_ARSIZE, "(port)m_axi_Weight_ARSIZE");
    sc_trace(mVcdFile, m_axi_Weight_ARBURST, "(port)m_axi_Weight_ARBURST");
    sc_trace(mVcdFile, m_axi_Weight_ARLOCK, "(port)m_axi_Weight_ARLOCK");
    sc_trace(mVcdFile, m_axi_Weight_ARCACHE, "(port)m_axi_Weight_ARCACHE");
    sc_trace(mVcdFile, m_axi_Weight_ARPROT, "(port)m_axi_Weight_ARPROT");
    sc_trace(mVcdFile, m_axi_Weight_ARQOS, "(port)m_axi_Weight_ARQOS");
    sc_trace(mVcdFile, m_axi_Weight_ARREGION, "(port)m_axi_Weight_ARREGION");
    sc_trace(mVcdFile, m_axi_Weight_ARUSER, "(port)m_axi_Weight_ARUSER");
    sc_trace(mVcdFile, m_axi_Weight_RVALID, "(port)m_axi_Weight_RVALID");
    sc_trace(mVcdFile, m_axi_Weight_RREADY, "(port)m_axi_Weight_RREADY");
    sc_trace(mVcdFile, m_axi_Weight_RDATA, "(port)m_axi_Weight_RDATA");
    sc_trace(mVcdFile, m_axi_Weight_RLAST, "(port)m_axi_Weight_RLAST");
    sc_trace(mVcdFile, m_axi_Weight_RID, "(port)m_axi_Weight_RID");
    sc_trace(mVcdFile, m_axi_Weight_RUSER, "(port)m_axi_Weight_RUSER");
    sc_trace(mVcdFile, m_axi_Weight_RRESP, "(port)m_axi_Weight_RRESP");
    sc_trace(mVcdFile, m_axi_Weight_BVALID, "(port)m_axi_Weight_BVALID");
    sc_trace(mVcdFile, m_axi_Weight_BREADY, "(port)m_axi_Weight_BREADY");
    sc_trace(mVcdFile, m_axi_Weight_BRESP, "(port)m_axi_Weight_BRESP");
    sc_trace(mVcdFile, m_axi_Weight_BID, "(port)m_axi_Weight_BID");
    sc_trace(mVcdFile, m_axi_Weight_BUSER, "(port)m_axi_Weight_BUSER");
    sc_trace(mVcdFile, Weight_offset, "(port)Weight_offset");
    sc_trace(mVcdFile, weight_memcpy_buffer_address0, "(port)weight_memcpy_buffer_address0");
    sc_trace(mVcdFile, weight_memcpy_buffer_ce0, "(port)weight_memcpy_buffer_ce0");
    sc_trace(mVcdFile, weight_memcpy_buffer_we0, "(port)weight_memcpy_buffer_we0");
    sc_trace(mVcdFile, weight_memcpy_buffer_d0, "(port)weight_memcpy_buffer_d0");
    sc_trace(mVcdFile, t3_V, "(port)t3_V");
    sc_trace(mVcdFile, t4_V, "(port)t4_V");
    sc_trace(mVcdFile, next_t3_0_V_read, "(port)next_t3_0_V_read");
    sc_trace(mVcdFile, next_t4_0_V_read, "(port)next_t4_0_V_read");
    sc_trace(mVcdFile, ReadLength, "(port)ReadLength");
    sc_trace(mVcdFile, init_enable, "(port)init_enable");
    sc_trace(mVcdFile, enable, "(port)enable");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, Woffset, "Woffset");
    sc_trace(mVcdFile, Weight_blk_n_AR, "Weight_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, Weight_blk_n_R, "Weight_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, exitcond_reg_311, "exitcond_reg_311");
    sc_trace(mVcdFile, indvar_reg_154, "indvar_reg_154");
    sc_trace(mVcdFile, indvar_reg_154_pp0_iter1_reg, "indvar_reg_154_pp0_iter1_reg");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage0_iter0, "ap_block_state9_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state10_pp0_stage0_iter1, "ap_block_state10_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state11_pp0_stage0_iter2, "ap_block_state11_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, ReadLength_cast1_fu_184_p1, "ReadLength_cast1_fu_184_p1");
    sc_trace(mVcdFile, ReadLength_cast1_reg_289, "ReadLength_cast1_reg_289");
    sc_trace(mVcdFile, t3_V_cast_fu_188_p1, "t3_V_cast_fu_188_p1");
    sc_trace(mVcdFile, t3_V_cast_reg_295, "t3_V_cast_reg_295");
    sc_trace(mVcdFile, p_Woffset_load_fu_196_p3, "p_Woffset_load_fu_196_p3");
    sc_trace(mVcdFile, p_Woffset_load_reg_300, "p_Woffset_load_reg_300");
    sc_trace(mVcdFile, enable_read_read_fu_82_p2, "enable_read_read_fu_82_p2");
    sc_trace(mVcdFile, Weight_addr_reg_305, "Weight_addr_reg_305");
    sc_trace(mVcdFile, exitcond_fu_228_p2, "exitcond_fu_228_p2");
    sc_trace(mVcdFile, exitcond_reg_311_pp0_iter1_reg, "exitcond_reg_311_pp0_iter1_reg");
    sc_trace(mVcdFile, indvar_next_fu_233_p2, "indvar_next_fu_233_p2");
    sc_trace(mVcdFile, indvar_next_reg_315, "indvar_next_reg_315");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, Weight_addr_read_reg_320, "Weight_addr_read_reg_320");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state9, "ap_condition_pp0_exit_iter0_state9");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_phi_mux_indvar_phi_fu_158_p4, "ap_phi_mux_indvar_phi_fu_158_p4");
    sc_trace(mVcdFile, next_t4_0_V_write_a_reg_166, "next_t4_0_V_write_a_reg_166");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, next_t3_0_V_write_a_reg_175, "next_t3_0_V_write_a_reg_175");
    sc_trace(mVcdFile, indvar1_fu_239_p1, "indvar1_fu_239_p1");
    sc_trace(mVcdFile, sum_cast_fu_218_p1, "sum_cast_fu_218_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_Weight_ARREADY, "ap_reg_ioackin_m_axi_Weight_ARREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_Weight_ARREADY, "ap_sig_ioackin_m_axi_Weight_ARREADY");
    sc_trace(mVcdFile, tmp_1_fu_244_p2, "tmp_1_fu_244_p2");
    sc_trace(mVcdFile, p_Woffset_load_fu_196_p0, "p_Woffset_load_fu_196_p0");
    sc_trace(mVcdFile, tmp_cast_fu_204_p1, "tmp_cast_fu_204_p1");
    sc_trace(mVcdFile, sext_cast_fu_208_p1, "sext_cast_fu_208_p1");
    sc_trace(mVcdFile, sum_fu_212_p2, "sum_fu_212_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_return_0_preg, "ap_return_0_preg");
    sc_trace(mVcdFile, ap_return_1_preg, "ap_return_1_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

weight_mmcpy_everyKx::~weight_mmcpy_everyKx() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void weight_mmcpy_everyKx::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state9.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state9.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state9.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_Weight_ARREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_Weight_ARREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_m_axi_Weight_ARREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, m_axi_Weight_ARREADY.read())) {
                ap_reg_ioackin_m_axi_Weight_ARREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_0_preg = ap_const_lv3_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
            ap_return_0_preg = next_t3_0_V_write_a_reg_175.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_1_preg = ap_const_lv3_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
            ap_return_1_preg = next_t4_0_V_write_a_reg_166.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_311.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        indvar_reg_154 = indvar_next_reg_315.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        indvar_reg_154 = ap_const_lv8_0;
    }
    if ((esl_seteq<1,1,1>(enable_read_read_fu_82_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        next_t3_0_V_write_a_reg_175 = next_t3_0_V_read.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        next_t3_0_V_write_a_reg_175 = t3_V_cast_reg_295.read();
    }
    if ((esl_seteq<1,1,1>(enable_read_read_fu_82_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        next_t4_0_V_write_a_reg_166 = next_t4_0_V_read.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        next_t4_0_V_write_a_reg_166 = t4_V.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ReadLength_cast1_reg_289 = ReadLength_cast1_fu_184_p1.read();
        t3_V_cast_reg_295 = t3_V_cast_fu_188_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_311.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        Weight_addr_read_reg_320 = m_axi_Weight_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(enable_read_read_fu_82_p2.read(), ap_const_lv1_1))) {
        Weight_addr_reg_305 =  (sc_lv<32>) (sum_cast_fu_218_p1.read());
        p_Woffset_load_reg_300 = p_Woffset_load_fu_196_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        Woffset = tmp_1_fu_244_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond_reg_311 = exitcond_fu_228_p2.read();
        exitcond_reg_311_pp0_iter1_reg = exitcond_reg_311.read();
        indvar_reg_154_pp0_iter1_reg = indvar_reg_154.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1))) {
        indvar_next_reg_315 = indvar_next_fu_233_p2.read();
    }
}

void weight_mmcpy_everyKx::thread_ReadLength_cast1_fu_184_p1() {
    ReadLength_cast1_fu_184_p1 = esl_zext<32,8>(ReadLength.read());
}

void weight_mmcpy_everyKx::thread_Weight_blk_n_AR() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        Weight_blk_n_AR = m_axi_Weight_ARREADY.read();
    } else {
        Weight_blk_n_AR = ap_const_logic_1;
    }
}

void weight_mmcpy_everyKx::thread_Weight_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_311.read()))) {
        Weight_blk_n_R = m_axi_Weight_RVALID.read();
    } else {
        Weight_blk_n_R = ap_const_logic_1;
    }
}

void weight_mmcpy_everyKx::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[8];
}

void weight_mmcpy_everyKx::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void weight_mmcpy_everyKx::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[9];
}

void weight_mmcpy_everyKx::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[10];
}

void weight_mmcpy_everyKx::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void weight_mmcpy_everyKx::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void weight_mmcpy_everyKx::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void weight_mmcpy_everyKx::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_311.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_Weight_RVALID.read()));
}

void weight_mmcpy_everyKx::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_311.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_Weight_RVALID.read()));
}

void weight_mmcpy_everyKx::thread_ap_block_state10_pp0_stage0_iter1() {
    ap_block_state10_pp0_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_311.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_Weight_RVALID.read()));
}

void weight_mmcpy_everyKx::thread_ap_block_state11_pp0_stage0_iter2() {
    ap_block_state11_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void weight_mmcpy_everyKx::thread_ap_block_state9_pp0_stage0_iter0() {
    ap_block_state9_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void weight_mmcpy_everyKx::thread_ap_condition_pp0_exit_iter0_state9() {
    if (esl_seteq<1,1,1>(exitcond_fu_228_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state9 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state9 = ap_const_logic_0;
    }
}

void weight_mmcpy_everyKx::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void weight_mmcpy_everyKx::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void weight_mmcpy_everyKx::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void weight_mmcpy_everyKx::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void weight_mmcpy_everyKx::thread_ap_phi_mux_indvar_phi_fu_158_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_311.read()))) {
        ap_phi_mux_indvar_phi_fu_158_p4 = indvar_next_reg_315.read();
    } else {
        ap_phi_mux_indvar_phi_fu_158_p4 = indvar_reg_154.read();
    }
}

void weight_mmcpy_everyKx::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void weight_mmcpy_everyKx::thread_ap_return_0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        ap_return_0 = next_t3_0_V_write_a_reg_175.read();
    } else {
        ap_return_0 = ap_return_0_preg.read();
    }
}

void weight_mmcpy_everyKx::thread_ap_return_1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        ap_return_1 = next_t4_0_V_write_a_reg_166.read();
    } else {
        ap_return_1 = ap_return_1_preg.read();
    }
}

void weight_mmcpy_everyKx::thread_ap_sig_ioackin_m_axi_Weight_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_Weight_ARREADY.read())) {
        ap_sig_ioackin_m_axi_Weight_ARREADY = m_axi_Weight_ARREADY.read();
    } else {
        ap_sig_ioackin_m_axi_Weight_ARREADY = ap_const_logic_1;
    }
}

void weight_mmcpy_everyKx::thread_enable_read_read_fu_82_p2() {
    enable_read_read_fu_82_p2 =  (sc_lv<1>) (enable.read());
}

void weight_mmcpy_everyKx::thread_exitcond_fu_228_p2() {
    exitcond_fu_228_p2 = (!ap_phi_mux_indvar_phi_fu_158_p4.read().is_01() || !ReadLength.read().is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_indvar_phi_fu_158_p4.read() == ReadLength.read());
}

void weight_mmcpy_everyKx::thread_indvar1_fu_239_p1() {
    indvar1_fu_239_p1 = esl_zext<64,8>(indvar_reg_154_pp0_iter1_reg.read());
}

void weight_mmcpy_everyKx::thread_indvar_next_fu_233_p2() {
    indvar_next_fu_233_p2 = (!ap_phi_mux_indvar_phi_fu_158_p4.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(ap_phi_mux_indvar_phi_fu_158_p4.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void weight_mmcpy_everyKx::thread_m_axi_Weight_ARADDR() {
    m_axi_Weight_ARADDR = Weight_addr_reg_305.read();
}

void weight_mmcpy_everyKx::thread_m_axi_Weight_ARBURST() {
    m_axi_Weight_ARBURST = ap_const_lv2_0;
}

void weight_mmcpy_everyKx::thread_m_axi_Weight_ARCACHE() {
    m_axi_Weight_ARCACHE = ap_const_lv4_0;
}

void weight_mmcpy_everyKx::thread_m_axi_Weight_ARID() {
    m_axi_Weight_ARID = ap_const_lv1_0;
}

void weight_mmcpy_everyKx::thread_m_axi_Weight_ARLEN() {
    m_axi_Weight_ARLEN = ReadLength_cast1_reg_289.read();
}

void weight_mmcpy_everyKx::thread_m_axi_Weight_ARLOCK() {
    m_axi_Weight_ARLOCK = ap_const_lv2_0;
}

void weight_mmcpy_everyKx::thread_m_axi_Weight_ARPROT() {
    m_axi_Weight_ARPROT = ap_const_lv3_0;
}

void weight_mmcpy_everyKx::thread_m_axi_Weight_ARQOS() {
    m_axi_Weight_ARQOS = ap_const_lv4_0;
}

void weight_mmcpy_everyKx::thread_m_axi_Weight_ARREGION() {
    m_axi_Weight_ARREGION = ap_const_lv4_0;
}

void weight_mmcpy_everyKx::thread_m_axi_Weight_ARSIZE() {
    m_axi_Weight_ARSIZE = ap_const_lv3_0;
}

void weight_mmcpy_everyKx::thread_m_axi_Weight_ARUSER() {
    m_axi_Weight_ARUSER = ap_const_lv1_0;
}

void weight_mmcpy_everyKx::thread_m_axi_Weight_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_Weight_ARREADY.read()))) {
        m_axi_Weight_ARVALID = ap_const_logic_1;
    } else {
        m_axi_Weight_ARVALID = ap_const_logic_0;
    }
}

void weight_mmcpy_everyKx::thread_m_axi_Weight_AWADDR() {
    m_axi_Weight_AWADDR = ap_const_lv32_0;
}

void weight_mmcpy_everyKx::thread_m_axi_Weight_AWBURST() {
    m_axi_Weight_AWBURST = ap_const_lv2_0;
}

void weight_mmcpy_everyKx::thread_m_axi_Weight_AWCACHE() {
    m_axi_Weight_AWCACHE = ap_const_lv4_0;
}

void weight_mmcpy_everyKx::thread_m_axi_Weight_AWID() {
    m_axi_Weight_AWID = ap_const_lv1_0;
}

void weight_mmcpy_everyKx::thread_m_axi_Weight_AWLEN() {
    m_axi_Weight_AWLEN = ap_const_lv32_0;
}

void weight_mmcpy_everyKx::thread_m_axi_Weight_AWLOCK() {
    m_axi_Weight_AWLOCK = ap_const_lv2_0;
}

void weight_mmcpy_everyKx::thread_m_axi_Weight_AWPROT() {
    m_axi_Weight_AWPROT = ap_const_lv3_0;
}

void weight_mmcpy_everyKx::thread_m_axi_Weight_AWQOS() {
    m_axi_Weight_AWQOS = ap_const_lv4_0;
}

void weight_mmcpy_everyKx::thread_m_axi_Weight_AWREGION() {
    m_axi_Weight_AWREGION = ap_const_lv4_0;
}

void weight_mmcpy_everyKx::thread_m_axi_Weight_AWSIZE() {
    m_axi_Weight_AWSIZE = ap_const_lv3_0;
}

void weight_mmcpy_everyKx::thread_m_axi_Weight_AWUSER() {
    m_axi_Weight_AWUSER = ap_const_lv1_0;
}

void weight_mmcpy_everyKx::thread_m_axi_Weight_AWVALID() {
    m_axi_Weight_AWVALID = ap_const_logic_0;
}

void weight_mmcpy_everyKx::thread_m_axi_Weight_BREADY() {
    m_axi_Weight_BREADY = ap_const_logic_0;
}

void weight_mmcpy_everyKx::thread_m_axi_Weight_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_311.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        m_axi_Weight_RREADY = ap_const_logic_1;
    } else {
        m_axi_Weight_RREADY = ap_const_logic_0;
    }
}

void weight_mmcpy_everyKx::thread_m_axi_Weight_WDATA() {
    m_axi_Weight_WDATA = ap_const_lv32_0;
}

void weight_mmcpy_everyKx::thread_m_axi_Weight_WID() {
    m_axi_Weight_WID = ap_const_lv1_0;
}

void weight_mmcpy_everyKx::thread_m_axi_Weight_WLAST() {
    m_axi_Weight_WLAST = ap_const_logic_0;
}

void weight_mmcpy_everyKx::thread_m_axi_Weight_WSTRB() {
    m_axi_Weight_WSTRB = ap_const_lv4_0;
}

void weight_mmcpy_everyKx::thread_m_axi_Weight_WUSER() {
    m_axi_Weight_WUSER = ap_const_lv1_0;
}

void weight_mmcpy_everyKx::thread_m_axi_Weight_WVALID() {
    m_axi_Weight_WVALID = ap_const_logic_0;
}

void weight_mmcpy_everyKx::thread_p_Woffset_load_fu_196_p0() {
    p_Woffset_load_fu_196_p0 =  (sc_lv<1>) (init_enable.read());
}

void weight_mmcpy_everyKx::thread_p_Woffset_load_fu_196_p3() {
    p_Woffset_load_fu_196_p3 = (!p_Woffset_load_fu_196_p0.read()[0].is_01())? sc_lv<32>(): ((p_Woffset_load_fu_196_p0.read()[0].to_bool())? ap_const_lv32_0: Woffset.read());
}

void weight_mmcpy_everyKx::thread_sext_cast_fu_208_p1() {
    sext_cast_fu_208_p1 = esl_zext<33,30>(Weight_offset.read());
}

void weight_mmcpy_everyKx::thread_sum_cast_fu_218_p1() {
    sum_cast_fu_218_p1 = esl_sext<64,33>(sum_fu_212_p2.read());
}

void weight_mmcpy_everyKx::thread_sum_fu_212_p2() {
    sum_fu_212_p2 = (!tmp_cast_fu_204_p1.read().is_01() || !sext_cast_fu_208_p1.read().is_01())? sc_lv<33>(): (sc_bigint<33>(tmp_cast_fu_204_p1.read()) + sc_biguint<33>(sext_cast_fu_208_p1.read()));
}

void weight_mmcpy_everyKx::thread_t3_V_cast_fu_188_p1() {
    t3_V_cast_fu_188_p1 = esl_zext<3,2>(t3_V.read());
}

void weight_mmcpy_everyKx::thread_tmp_1_fu_244_p2() {
    tmp_1_fu_244_p2 = (!p_Woffset_load_reg_300.read().is_01() || !ReadLength_cast1_reg_289.read().is_01())? sc_lv<32>(): (sc_bigint<32>(p_Woffset_load_reg_300.read()) + sc_biguint<32>(ReadLength_cast1_reg_289.read()));
}

void weight_mmcpy_everyKx::thread_tmp_cast_fu_204_p1() {
    tmp_cast_fu_204_p1 = esl_sext<33,32>(p_Woffset_load_fu_196_p3.read());
}

void weight_mmcpy_everyKx::thread_weight_memcpy_buffer_address0() {
    weight_memcpy_buffer_address0 =  (sc_lv<6>) (indvar1_fu_239_p1.read());
}

void weight_mmcpy_everyKx::thread_weight_memcpy_buffer_ce0() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1))) {
        weight_memcpy_buffer_ce0 = ap_const_logic_1;
    } else {
        weight_memcpy_buffer_ce0 = ap_const_logic_0;
    }
}

void weight_mmcpy_everyKx::thread_weight_memcpy_buffer_d0() {
    weight_memcpy_buffer_d0 = Weight_addr_read_reg_320.read();
}

void weight_mmcpy_everyKx::thread_weight_memcpy_buffer_we0() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_311_pp0_iter1_reg.read()))) {
        weight_memcpy_buffer_we0 = ap_const_logic_1;
    } else {
        weight_memcpy_buffer_we0 = ap_const_logic_0;
    }
}

void weight_mmcpy_everyKx::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(enable_read_read_fu_82_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state13;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(enable_read_read_fu_82_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_Weight_ARREADY.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 256 : 
            if ((!(esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && esl_seteq<1,1,1>(exitcond_fu_228_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
  esl_seteq<1,1,1>(exitcond_fu_228_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXX";
            break;
    }
}

}

