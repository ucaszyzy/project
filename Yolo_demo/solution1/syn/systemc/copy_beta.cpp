// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "copy_beta.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic copy_beta::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic copy_beta::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<12> copy_beta::ap_ST_fsm_state1 = "1";
const sc_lv<12> copy_beta::ap_ST_fsm_state2 = "10";
const sc_lv<12> copy_beta::ap_ST_fsm_state3 = "100";
const sc_lv<12> copy_beta::ap_ST_fsm_state4 = "1000";
const sc_lv<12> copy_beta::ap_ST_fsm_state5 = "10000";
const sc_lv<12> copy_beta::ap_ST_fsm_state6 = "100000";
const sc_lv<12> copy_beta::ap_ST_fsm_state7 = "1000000";
const sc_lv<12> copy_beta::ap_ST_fsm_state8 = "10000000";
const sc_lv<12> copy_beta::ap_ST_fsm_pp0_stage0 = "100000000";
const sc_lv<12> copy_beta::ap_ST_fsm_state12 = "1000000000";
const sc_lv<12> copy_beta::ap_ST_fsm_pp1_stage0 = "10000000000";
const sc_lv<12> copy_beta::ap_ST_fsm_state15 = "100000000000";
const bool copy_beta::ap_const_boolean_1 = true;
const sc_lv<32> copy_beta::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> copy_beta::ap_const_lv1_0 = "0";
const sc_lv<3> copy_beta::ap_const_lv3_0 = "000";
const sc_lv<2> copy_beta::ap_const_lv2_0 = "00";
const sc_lv<4> copy_beta::ap_const_lv4_0 = "0000";
const sc_lv<32> copy_beta::ap_const_lv32_1 = "1";
const sc_lv<32> copy_beta::ap_const_lv32_8 = "1000";
const bool copy_beta::ap_const_boolean_0 = false;
const sc_lv<32> copy_beta::ap_const_lv32_A = "1010";
const sc_lv<1> copy_beta::ap_const_lv1_1 = "1";
const sc_lv<32> copy_beta::ap_const_lv32_7 = "111";
const sc_lv<32> copy_beta::ap_const_lv32_9 = "1001";
const sc_lv<30> copy_beta::ap_const_lv30_0 = "000000000000000000000000000000";
const sc_lv<32> copy_beta::ap_const_lv32_1E = "11110";
const sc_lv<32> copy_beta::ap_const_lv32_1F = "11111";
const sc_lv<30> copy_beta::ap_const_lv30_1 = "1";
const sc_lv<32> copy_beta::ap_const_lv32_10 = "10000";
const sc_lv<31> copy_beta::ap_const_lv31_1 = "1";
const sc_lv<32> copy_beta::ap_const_lv32_B = "1011";

copy_beta::copy_beta(sc_module_name name) : sc_module(name), mVcdFile(0) {
    beta_tmp_U = new copy_beta_beta_tmp("beta_tmp_U");
    beta_tmp_U->clk(ap_clk);
    beta_tmp_U->reset(ap_rst);
    beta_tmp_U->address0(beta_tmp_address0);
    beta_tmp_U->ce0(beta_tmp_ce0);
    beta_tmp_U->we0(beta_tmp_we0);
    beta_tmp_U->d0(Beta_addr_read_reg_320);
    beta_tmp_U->q0(beta_tmp_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Beta_blk_n_AR);
    sensitive << ( m_axi_Beta_ARREADY );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_Beta_blk_n_R);
    sensitive << ( m_axi_Beta_RVALID );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_reg_311 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( m_axi_Beta_RVALID );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_311 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( m_axi_Beta_RVALID );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_311 );

    SC_METHOD(thread_ap_block_pp1_stage0);

    SC_METHOD(thread_ap_block_pp1_stage0_11001);

    SC_METHOD(thread_ap_block_pp1_stage0_subdone);

    SC_METHOD(thread_ap_block_state10_pp0_stage0_iter1);
    sensitive << ( m_axi_Beta_RVALID );
    sensitive << ( exitcond_reg_311 );

    SC_METHOD(thread_ap_block_state11_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state13_pp1_stage0_iter0);

    SC_METHOD(thread_ap_block_state14_pp1_stage0_iter1);

    SC_METHOD(thread_ap_block_state9_pp0_stage0_iter0);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state9);
    sensitive << ( exitcond_fu_215_p2 );

    SC_METHOD(thread_ap_condition_pp1_exit_iter0_state13);
    sensitive << ( tmp_s_fu_235_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_pp1);
    sensitive << ( ap_idle_pp1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_idle_pp1);
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );

    SC_METHOD(thread_ap_phi_mux_indvar_phi_fu_155_p4);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_reg_311 );
    sensitive << ( indvar_reg_151 );
    sensitive << ( indvar_next_reg_315 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_Beta_ARREADY);
    sensitive << ( m_axi_Beta_ARREADY );
    sensitive << ( ap_reg_ioackin_m_axi_Beta_ARREADY );

    SC_METHOD(thread_beta_buffer_address0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( tmp_75_fu_264_p1 );

    SC_METHOD(thread_beta_buffer_address1);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( tmp_78_fu_284_p1 );

    SC_METHOD(thread_beta_buffer_ce0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter1 );

    SC_METHOD(thread_beta_buffer_ce1);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter1 );

    SC_METHOD(thread_beta_buffer_d0);
    sensitive << ( beta_tmp_q0 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0 );

    SC_METHOD(thread_beta_buffer_d1);
    sensitive << ( beta_tmp_q0 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0 );

    SC_METHOD(thread_beta_buffer_we0);
    sensitive << ( tmp_s_reg_325 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter1 );

    SC_METHOD(thread_beta_buffer_we1);
    sensitive << ( tmp_s_reg_325 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter1 );

    SC_METHOD(thread_beta_tmp_address0);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( indvar4_fu_226_p1 );
    sensitive << ( tmp_73_fu_246_p1 );
    sensitive << ( ap_block_pp1_stage0 );

    SC_METHOD(thread_beta_tmp_ce0);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_beta_tmp_we0);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( exitcond_reg_311_pp0_iter1_reg );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_exitcond_fu_215_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tmp_31_cast_reg_289 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_phi_mux_indvar_phi_fu_155_p4 );

    SC_METHOD(thread_indvar4_fu_226_p1);
    sensitive << ( indvar_reg_151_pp0_iter1_reg );

    SC_METHOD(thread_indvar_next_fu_220_p2);
    sensitive << ( ap_phi_mux_indvar_phi_fu_155_p4 );

    SC_METHOD(thread_m_axi_Beta_ARADDR);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_72_fu_200_p1 );
    sensitive << ( ap_reg_ioackin_m_axi_Beta_ARREADY );

    SC_METHOD(thread_m_axi_Beta_ARBURST);

    SC_METHOD(thread_m_axi_Beta_ARCACHE);

    SC_METHOD(thread_m_axi_Beta_ARID);

    SC_METHOD(thread_m_axi_Beta_ARLEN);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_31_cast_reg_289 );
    sensitive << ( ap_reg_ioackin_m_axi_Beta_ARREADY );

    SC_METHOD(thread_m_axi_Beta_ARLOCK);

    SC_METHOD(thread_m_axi_Beta_ARPROT);

    SC_METHOD(thread_m_axi_Beta_ARQOS);

    SC_METHOD(thread_m_axi_Beta_ARREGION);

    SC_METHOD(thread_m_axi_Beta_ARSIZE);

    SC_METHOD(thread_m_axi_Beta_ARUSER);

    SC_METHOD(thread_m_axi_Beta_ARVALID);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_reg_ioackin_m_axi_Beta_ARREADY );

    SC_METHOD(thread_m_axi_Beta_AWADDR);

    SC_METHOD(thread_m_axi_Beta_AWBURST);

    SC_METHOD(thread_m_axi_Beta_AWCACHE);

    SC_METHOD(thread_m_axi_Beta_AWID);

    SC_METHOD(thread_m_axi_Beta_AWLEN);

    SC_METHOD(thread_m_axi_Beta_AWLOCK);

    SC_METHOD(thread_m_axi_Beta_AWPROT);

    SC_METHOD(thread_m_axi_Beta_AWQOS);

    SC_METHOD(thread_m_axi_Beta_AWREGION);

    SC_METHOD(thread_m_axi_Beta_AWSIZE);

    SC_METHOD(thread_m_axi_Beta_AWUSER);

    SC_METHOD(thread_m_axi_Beta_AWVALID);

    SC_METHOD(thread_m_axi_Beta_BREADY);

    SC_METHOD(thread_m_axi_Beta_RREADY);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_311 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_m_axi_Beta_WDATA);

    SC_METHOD(thread_m_axi_Beta_WID);

    SC_METHOD(thread_m_axi_Beta_WLAST);

    SC_METHOD(thread_m_axi_Beta_WSTRB);

    SC_METHOD(thread_m_axi_Beta_WUSER);

    SC_METHOD(thread_m_axi_Beta_WVALID);

    SC_METHOD(thread_tmp_72_fu_200_p1);
    sensitive << ( Beta_offset );

    SC_METHOD(thread_tmp_73_fu_246_p1);
    sensitive << ( x_reg_163 );

    SC_METHOD(thread_tmp_74_fu_251_p3);
    sensitive << ( x_reg_163 );

    SC_METHOD(thread_tmp_75_fu_264_p1);
    sensitive << ( tmp_74_reg_339 );

    SC_METHOD(thread_tmp_77_fu_279_p2);
    sensitive << ( tmp_74_reg_339 );

    SC_METHOD(thread_tmp_78_fu_284_p1);
    sensitive << ( tmp_77_fu_279_p2 );

    SC_METHOD(thread_tmp_fu_174_p2);
    sensitive << ( OFM_NUM );

    SC_METHOD(thread_tmp_s_fu_235_p2);
    sensitive << ( tmp_32_reg_295 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( x_cast_fu_231_p1 );

    SC_METHOD(thread_x_2_fu_240_p2);
    sensitive << ( x_reg_163 );

    SC_METHOD(thread_x_cast_fu_231_p1);
    sensitive << ( x_reg_163 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_sig_ioackin_m_axi_Beta_ARREADY );
    sensitive << ( exitcond_fu_215_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_s_fu_235_p2 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp1_stage0_subdone );

    ap_CS_fsm = "000000000001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter1 = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_Beta_ARREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "copy_beta_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_Beta_AWVALID, "(port)m_axi_Beta_AWVALID");
    sc_trace(mVcdFile, m_axi_Beta_AWREADY, "(port)m_axi_Beta_AWREADY");
    sc_trace(mVcdFile, m_axi_Beta_AWADDR, "(port)m_axi_Beta_AWADDR");
    sc_trace(mVcdFile, m_axi_Beta_AWID, "(port)m_axi_Beta_AWID");
    sc_trace(mVcdFile, m_axi_Beta_AWLEN, "(port)m_axi_Beta_AWLEN");
    sc_trace(mVcdFile, m_axi_Beta_AWSIZE, "(port)m_axi_Beta_AWSIZE");
    sc_trace(mVcdFile, m_axi_Beta_AWBURST, "(port)m_axi_Beta_AWBURST");
    sc_trace(mVcdFile, m_axi_Beta_AWLOCK, "(port)m_axi_Beta_AWLOCK");
    sc_trace(mVcdFile, m_axi_Beta_AWCACHE, "(port)m_axi_Beta_AWCACHE");
    sc_trace(mVcdFile, m_axi_Beta_AWPROT, "(port)m_axi_Beta_AWPROT");
    sc_trace(mVcdFile, m_axi_Beta_AWQOS, "(port)m_axi_Beta_AWQOS");
    sc_trace(mVcdFile, m_axi_Beta_AWREGION, "(port)m_axi_Beta_AWREGION");
    sc_trace(mVcdFile, m_axi_Beta_AWUSER, "(port)m_axi_Beta_AWUSER");
    sc_trace(mVcdFile, m_axi_Beta_WVALID, "(port)m_axi_Beta_WVALID");
    sc_trace(mVcdFile, m_axi_Beta_WREADY, "(port)m_axi_Beta_WREADY");
    sc_trace(mVcdFile, m_axi_Beta_WDATA, "(port)m_axi_Beta_WDATA");
    sc_trace(mVcdFile, m_axi_Beta_WSTRB, "(port)m_axi_Beta_WSTRB");
    sc_trace(mVcdFile, m_axi_Beta_WLAST, "(port)m_axi_Beta_WLAST");
    sc_trace(mVcdFile, m_axi_Beta_WID, "(port)m_axi_Beta_WID");
    sc_trace(mVcdFile, m_axi_Beta_WUSER, "(port)m_axi_Beta_WUSER");
    sc_trace(mVcdFile, m_axi_Beta_ARVALID, "(port)m_axi_Beta_ARVALID");
    sc_trace(mVcdFile, m_axi_Beta_ARREADY, "(port)m_axi_Beta_ARREADY");
    sc_trace(mVcdFile, m_axi_Beta_ARADDR, "(port)m_axi_Beta_ARADDR");
    sc_trace(mVcdFile, m_axi_Beta_ARID, "(port)m_axi_Beta_ARID");
    sc_trace(mVcdFile, m_axi_Beta_ARLEN, "(port)m_axi_Beta_ARLEN");
    sc_trace(mVcdFile, m_axi_Beta_ARSIZE, "(port)m_axi_Beta_ARSIZE");
    sc_trace(mVcdFile, m_axi_Beta_ARBURST, "(port)m_axi_Beta_ARBURST");
    sc_trace(mVcdFile, m_axi_Beta_ARLOCK, "(port)m_axi_Beta_ARLOCK");
    sc_trace(mVcdFile, m_axi_Beta_ARCACHE, "(port)m_axi_Beta_ARCACHE");
    sc_trace(mVcdFile, m_axi_Beta_ARPROT, "(port)m_axi_Beta_ARPROT");
    sc_trace(mVcdFile, m_axi_Beta_ARQOS, "(port)m_axi_Beta_ARQOS");
    sc_trace(mVcdFile, m_axi_Beta_ARREGION, "(port)m_axi_Beta_ARREGION");
    sc_trace(mVcdFile, m_axi_Beta_ARUSER, "(port)m_axi_Beta_ARUSER");
    sc_trace(mVcdFile, m_axi_Beta_RVALID, "(port)m_axi_Beta_RVALID");
    sc_trace(mVcdFile, m_axi_Beta_RREADY, "(port)m_axi_Beta_RREADY");
    sc_trace(mVcdFile, m_axi_Beta_RDATA, "(port)m_axi_Beta_RDATA");
    sc_trace(mVcdFile, m_axi_Beta_RLAST, "(port)m_axi_Beta_RLAST");
    sc_trace(mVcdFile, m_axi_Beta_RID, "(port)m_axi_Beta_RID");
    sc_trace(mVcdFile, m_axi_Beta_RUSER, "(port)m_axi_Beta_RUSER");
    sc_trace(mVcdFile, m_axi_Beta_RRESP, "(port)m_axi_Beta_RRESP");
    sc_trace(mVcdFile, m_axi_Beta_BVALID, "(port)m_axi_Beta_BVALID");
    sc_trace(mVcdFile, m_axi_Beta_BREADY, "(port)m_axi_Beta_BREADY");
    sc_trace(mVcdFile, m_axi_Beta_BRESP, "(port)m_axi_Beta_BRESP");
    sc_trace(mVcdFile, m_axi_Beta_BID, "(port)m_axi_Beta_BID");
    sc_trace(mVcdFile, m_axi_Beta_BUSER, "(port)m_axi_Beta_BUSER");
    sc_trace(mVcdFile, Beta_offset, "(port)Beta_offset");
    sc_trace(mVcdFile, OFM_NUM, "(port)OFM_NUM");
    sc_trace(mVcdFile, beta_buffer_address0, "(port)beta_buffer_address0");
    sc_trace(mVcdFile, beta_buffer_ce0, "(port)beta_buffer_ce0");
    sc_trace(mVcdFile, beta_buffer_we0, "(port)beta_buffer_we0");
    sc_trace(mVcdFile, beta_buffer_d0, "(port)beta_buffer_d0");
    sc_trace(mVcdFile, beta_buffer_address1, "(port)beta_buffer_address1");
    sc_trace(mVcdFile, beta_buffer_ce1, "(port)beta_buffer_ce1");
    sc_trace(mVcdFile, beta_buffer_we1, "(port)beta_buffer_we1");
    sc_trace(mVcdFile, beta_buffer_d1, "(port)beta_buffer_d1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, beta_tmp_address0, "beta_tmp_address0");
    sc_trace(mVcdFile, beta_tmp_ce0, "beta_tmp_ce0");
    sc_trace(mVcdFile, beta_tmp_we0, "beta_tmp_we0");
    sc_trace(mVcdFile, beta_tmp_q0, "beta_tmp_q0");
    sc_trace(mVcdFile, Beta_blk_n_AR, "Beta_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, Beta_blk_n_R, "Beta_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, exitcond_reg_311, "exitcond_reg_311");
    sc_trace(mVcdFile, indvar_reg_151, "indvar_reg_151");
    sc_trace(mVcdFile, indvar_reg_151_pp0_iter1_reg, "indvar_reg_151_pp0_iter1_reg");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage0_iter0, "ap_block_state9_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state10_pp0_stage0_iter1, "ap_block_state10_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state11_pp0_stage0_iter2, "ap_block_state11_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, x_reg_163, "x_reg_163");
    sc_trace(mVcdFile, tmp_31_cast_reg_289, "tmp_31_cast_reg_289");
    sc_trace(mVcdFile, tmp_32_reg_295, "tmp_32_reg_295");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_Beta_ARREADY, "ap_sig_ioackin_m_axi_Beta_ARREADY");
    sc_trace(mVcdFile, exitcond_fu_215_p2, "exitcond_fu_215_p2");
    sc_trace(mVcdFile, exitcond_reg_311_pp0_iter1_reg, "exitcond_reg_311_pp0_iter1_reg");
    sc_trace(mVcdFile, indvar_next_fu_220_p2, "indvar_next_fu_220_p2");
    sc_trace(mVcdFile, indvar_next_reg_315, "indvar_next_reg_315");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, Beta_addr_read_reg_320, "Beta_addr_read_reg_320");
    sc_trace(mVcdFile, tmp_s_fu_235_p2, "tmp_s_fu_235_p2");
    sc_trace(mVcdFile, tmp_s_reg_325, "tmp_s_reg_325");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage0, "ap_CS_fsm_pp1_stage0");
    sc_trace(mVcdFile, ap_block_state13_pp1_stage0_iter0, "ap_block_state13_pp1_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state14_pp1_stage0_iter1, "ap_block_state14_pp1_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp1_stage0_11001, "ap_block_pp1_stage0_11001");
    sc_trace(mVcdFile, x_2_fu_240_p2, "x_2_fu_240_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter0, "ap_enable_reg_pp1_iter0");
    sc_trace(mVcdFile, tmp_74_fu_251_p3, "tmp_74_fu_251_p3");
    sc_trace(mVcdFile, tmp_74_reg_339, "tmp_74_reg_339");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state9, "ap_condition_pp0_exit_iter0_state9");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_block_pp1_stage0_subdone, "ap_block_pp1_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp1_exit_iter0_state13, "ap_condition_pp1_exit_iter0_state13");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter1, "ap_enable_reg_pp1_iter1");
    sc_trace(mVcdFile, ap_phi_mux_indvar_phi_fu_155_p4, "ap_phi_mux_indvar_phi_fu_155_p4");
    sc_trace(mVcdFile, indvar4_fu_226_p1, "indvar4_fu_226_p1");
    sc_trace(mVcdFile, tmp_73_fu_246_p1, "tmp_73_fu_246_p1");
    sc_trace(mVcdFile, ap_block_pp1_stage0, "ap_block_pp1_stage0");
    sc_trace(mVcdFile, tmp_75_fu_264_p1, "tmp_75_fu_264_p1");
    sc_trace(mVcdFile, tmp_78_fu_284_p1, "tmp_78_fu_284_p1");
    sc_trace(mVcdFile, tmp_72_fu_200_p1, "tmp_72_fu_200_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_Beta_ARREADY, "ap_reg_ioackin_m_axi_Beta_ARREADY");
    sc_trace(mVcdFile, tmp_fu_174_p2, "tmp_fu_174_p2");
    sc_trace(mVcdFile, x_cast_fu_231_p1, "x_cast_fu_231_p1");
    sc_trace(mVcdFile, tmp_77_fu_279_p2, "tmp_77_fu_279_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_idle_pp1, "ap_idle_pp1");
    sc_trace(mVcdFile, ap_enable_pp1, "ap_enable_pp1");
#endif

    }
}

copy_beta::~copy_beta() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete beta_tmp_U;
}

void copy_beta::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state9.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state9.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state9.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state13.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()))) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state13.read()))) {
            ap_enable_reg_pp1_iter1 = (ap_condition_pp1_exit_iter0_state13.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read())) {
            ap_enable_reg_pp1_iter1 = ap_enable_reg_pp1_iter0.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
            ap_enable_reg_pp1_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_Beta_ARREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_Beta_ARREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_m_axi_Beta_ARREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, m_axi_Beta_ARREADY.read())) {
                ap_reg_ioackin_m_axi_Beta_ARREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_311.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        indvar_reg_151 = indvar_next_reg_315.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        indvar_reg_151 = ap_const_lv30_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        x_reg_163 = ap_const_lv30_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(tmp_s_fu_235_p2.read(), ap_const_lv1_1))) {
        x_reg_163 = x_2_fu_240_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_311.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        Beta_addr_read_reg_320 = m_axi_Beta_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond_reg_311 = exitcond_fu_215_p2.read();
        exitcond_reg_311_pp0_iter1_reg = exitcond_reg_311.read();
        indvar_reg_151_pp0_iter1_reg = indvar_reg_151.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1))) {
        indvar_next_reg_315 = indvar_next_fu_220_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        tmp_31_cast_reg_289 = tmp_fu_174_p2.read().range(30, 1);
        tmp_32_reg_295 = tmp_fu_174_p2.read().range(31, 1);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_s_fu_235_p2.read(), ap_const_lv1_1))) {
        tmp_74_reg_339 = tmp_74_fu_251_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_s_reg_325 = tmp_s_fu_235_p2.read();
    }
}

void copy_beta::thread_Beta_blk_n_AR() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        Beta_blk_n_AR = m_axi_Beta_ARREADY.read();
    } else {
        Beta_blk_n_AR = ap_const_logic_1;
    }
}

void copy_beta::thread_Beta_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_311.read()))) {
        Beta_blk_n_R = m_axi_Beta_RVALID.read();
    } else {
        Beta_blk_n_R = ap_const_logic_1;
    }
}

void copy_beta::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[8];
}

void copy_beta::thread_ap_CS_fsm_pp1_stage0() {
    ap_CS_fsm_pp1_stage0 = ap_CS_fsm.read()[10];
}

void copy_beta::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void copy_beta::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[9];
}

void copy_beta::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[11];
}

void copy_beta::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void copy_beta::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void copy_beta::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void copy_beta::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_311.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_Beta_RVALID.read()));
}

void copy_beta::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_311.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_Beta_RVALID.read()));
}

void copy_beta::thread_ap_block_pp1_stage0() {
    ap_block_pp1_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void copy_beta::thread_ap_block_pp1_stage0_11001() {
    ap_block_pp1_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void copy_beta::thread_ap_block_pp1_stage0_subdone() {
    ap_block_pp1_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void copy_beta::thread_ap_block_state10_pp0_stage0_iter1() {
    ap_block_state10_pp0_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_311.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_Beta_RVALID.read()));
}

void copy_beta::thread_ap_block_state11_pp0_stage0_iter2() {
    ap_block_state11_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void copy_beta::thread_ap_block_state13_pp1_stage0_iter0() {
    ap_block_state13_pp1_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void copy_beta::thread_ap_block_state14_pp1_stage0_iter1() {
    ap_block_state14_pp1_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void copy_beta::thread_ap_block_state9_pp0_stage0_iter0() {
    ap_block_state9_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void copy_beta::thread_ap_condition_pp0_exit_iter0_state9() {
    if (esl_seteq<1,1,1>(exitcond_fu_215_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state9 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state9 = ap_const_logic_0;
    }
}

void copy_beta::thread_ap_condition_pp1_exit_iter0_state13() {
    if (esl_seteq<1,1,1>(tmp_s_fu_235_p2.read(), ap_const_lv1_0)) {
        ap_condition_pp1_exit_iter0_state13 = ap_const_logic_1;
    } else {
        ap_condition_pp1_exit_iter0_state13 = ap_const_logic_0;
    }
}

void copy_beta::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void copy_beta::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void copy_beta::thread_ap_enable_pp1() {
    ap_enable_pp1 = (ap_idle_pp1.read() ^ ap_const_logic_1);
}

void copy_beta::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void copy_beta::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void copy_beta::thread_ap_idle_pp1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter1.read()))) {
        ap_idle_pp1 = ap_const_logic_1;
    } else {
        ap_idle_pp1 = ap_const_logic_0;
    }
}

void copy_beta::thread_ap_phi_mux_indvar_phi_fu_155_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_311.read()))) {
        ap_phi_mux_indvar_phi_fu_155_p4 = indvar_next_reg_315.read();
    } else {
        ap_phi_mux_indvar_phi_fu_155_p4 = indvar_reg_151.read();
    }
}

void copy_beta::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void copy_beta::thread_ap_sig_ioackin_m_axi_Beta_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_Beta_ARREADY.read())) {
        ap_sig_ioackin_m_axi_Beta_ARREADY = m_axi_Beta_ARREADY.read();
    } else {
        ap_sig_ioackin_m_axi_Beta_ARREADY = ap_const_logic_1;
    }
}

void copy_beta::thread_beta_buffer_address0() {
    beta_buffer_address0 =  (sc_lv<10>) (tmp_75_fu_264_p1.read());
}

void copy_beta::thread_beta_buffer_address1() {
    beta_buffer_address1 =  (sc_lv<10>) (tmp_78_fu_284_p1.read());
}

void copy_beta::thread_beta_buffer_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()))) {
        beta_buffer_ce0 = ap_const_logic_1;
    } else {
        beta_buffer_ce0 = ap_const_logic_0;
    }
}

void copy_beta::thread_beta_buffer_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()))) {
        beta_buffer_ce1 = ap_const_logic_1;
    } else {
        beta_buffer_ce1 = ap_const_logic_0;
    }
}

void copy_beta::thread_beta_buffer_d0() {
    beta_buffer_d0 = beta_tmp_q0.read().range(16-1, 0);
}

void copy_beta::thread_beta_buffer_d1() {
    beta_buffer_d1 = beta_tmp_q0.read().range(31, 16);
}

void copy_beta::thread_beta_buffer_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(tmp_s_reg_325.read(), ap_const_lv1_1))) {
        beta_buffer_we0 = ap_const_logic_1;
    } else {
        beta_buffer_we0 = ap_const_logic_0;
    }
}

void copy_beta::thread_beta_buffer_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(tmp_s_reg_325.read(), ap_const_lv1_1))) {
        beta_buffer_we1 = ap_const_logic_1;
    } else {
        beta_buffer_we1 = ap_const_logic_0;
    }
}

void copy_beta::thread_beta_tmp_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0))) {
        beta_tmp_address0 =  (sc_lv<9>) (tmp_73_fu_246_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1))) {
        beta_tmp_address0 =  (sc_lv<9>) (indvar4_fu_226_p1.read());
    } else {
        beta_tmp_address0 = "XXXXXXXXX";
    }
}

void copy_beta::thread_beta_tmp_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1)))) {
        beta_tmp_ce0 = ap_const_logic_1;
    } else {
        beta_tmp_ce0 = ap_const_logic_0;
    }
}

void copy_beta::thread_beta_tmp_we0() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_311_pp0_iter1_reg.read()))) {
        beta_tmp_we0 = ap_const_logic_1;
    } else {
        beta_tmp_we0 = ap_const_logic_0;
    }
}

void copy_beta::thread_exitcond_fu_215_p2() {
    exitcond_fu_215_p2 = (!ap_phi_mux_indvar_phi_fu_155_p4.read().is_01() || !tmp_31_cast_reg_289.read().is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_indvar_phi_fu_155_p4.read() == tmp_31_cast_reg_289.read());
}

void copy_beta::thread_indvar4_fu_226_p1() {
    indvar4_fu_226_p1 = esl_zext<64,30>(indvar_reg_151_pp0_iter1_reg.read());
}

void copy_beta::thread_indvar_next_fu_220_p2() {
    indvar_next_fu_220_p2 = (!ap_phi_mux_indvar_phi_fu_155_p4.read().is_01() || !ap_const_lv30_1.is_01())? sc_lv<30>(): (sc_biguint<30>(ap_phi_mux_indvar_phi_fu_155_p4.read()) + sc_biguint<30>(ap_const_lv30_1));
}

void copy_beta::thread_m_axi_Beta_ARADDR() {
    m_axi_Beta_ARADDR =  (sc_lv<32>) (tmp_72_fu_200_p1.read());
}

void copy_beta::thread_m_axi_Beta_ARBURST() {
    m_axi_Beta_ARBURST = ap_const_lv2_0;
}

void copy_beta::thread_m_axi_Beta_ARCACHE() {
    m_axi_Beta_ARCACHE = ap_const_lv4_0;
}

void copy_beta::thread_m_axi_Beta_ARID() {
    m_axi_Beta_ARID = ap_const_lv1_0;
}

void copy_beta::thread_m_axi_Beta_ARLEN() {
    m_axi_Beta_ARLEN = esl_zext<32,30>(tmp_31_cast_reg_289.read());
}

void copy_beta::thread_m_axi_Beta_ARLOCK() {
    m_axi_Beta_ARLOCK = ap_const_lv2_0;
}

void copy_beta::thread_m_axi_Beta_ARPROT() {
    m_axi_Beta_ARPROT = ap_const_lv3_0;
}

void copy_beta::thread_m_axi_Beta_ARQOS() {
    m_axi_Beta_ARQOS = ap_const_lv4_0;
}

void copy_beta::thread_m_axi_Beta_ARREGION() {
    m_axi_Beta_ARREGION = ap_const_lv4_0;
}

void copy_beta::thread_m_axi_Beta_ARSIZE() {
    m_axi_Beta_ARSIZE = ap_const_lv3_0;
}

void copy_beta::thread_m_axi_Beta_ARUSER() {
    m_axi_Beta_ARUSER = ap_const_lv1_0;
}

void copy_beta::thread_m_axi_Beta_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_Beta_ARREADY.read()))) {
        m_axi_Beta_ARVALID = ap_const_logic_1;
    } else {
        m_axi_Beta_ARVALID = ap_const_logic_0;
    }
}

void copy_beta::thread_m_axi_Beta_AWADDR() {
    m_axi_Beta_AWADDR = ap_const_lv32_0;
}

void copy_beta::thread_m_axi_Beta_AWBURST() {
    m_axi_Beta_AWBURST = ap_const_lv2_0;
}

void copy_beta::thread_m_axi_Beta_AWCACHE() {
    m_axi_Beta_AWCACHE = ap_const_lv4_0;
}

void copy_beta::thread_m_axi_Beta_AWID() {
    m_axi_Beta_AWID = ap_const_lv1_0;
}

void copy_beta::thread_m_axi_Beta_AWLEN() {
    m_axi_Beta_AWLEN = ap_const_lv32_0;
}

void copy_beta::thread_m_axi_Beta_AWLOCK() {
    m_axi_Beta_AWLOCK = ap_const_lv2_0;
}

void copy_beta::thread_m_axi_Beta_AWPROT() {
    m_axi_Beta_AWPROT = ap_const_lv3_0;
}

void copy_beta::thread_m_axi_Beta_AWQOS() {
    m_axi_Beta_AWQOS = ap_const_lv4_0;
}

void copy_beta::thread_m_axi_Beta_AWREGION() {
    m_axi_Beta_AWREGION = ap_const_lv4_0;
}

void copy_beta::thread_m_axi_Beta_AWSIZE() {
    m_axi_Beta_AWSIZE = ap_const_lv3_0;
}

void copy_beta::thread_m_axi_Beta_AWUSER() {
    m_axi_Beta_AWUSER = ap_const_lv1_0;
}

void copy_beta::thread_m_axi_Beta_AWVALID() {
    m_axi_Beta_AWVALID = ap_const_logic_0;
}

void copy_beta::thread_m_axi_Beta_BREADY() {
    m_axi_Beta_BREADY = ap_const_logic_0;
}

void copy_beta::thread_m_axi_Beta_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_311.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        m_axi_Beta_RREADY = ap_const_logic_1;
    } else {
        m_axi_Beta_RREADY = ap_const_logic_0;
    }
}

void copy_beta::thread_m_axi_Beta_WDATA() {
    m_axi_Beta_WDATA = ap_const_lv32_0;
}

void copy_beta::thread_m_axi_Beta_WID() {
    m_axi_Beta_WID = ap_const_lv1_0;
}

void copy_beta::thread_m_axi_Beta_WLAST() {
    m_axi_Beta_WLAST = ap_const_logic_0;
}

void copy_beta::thread_m_axi_Beta_WSTRB() {
    m_axi_Beta_WSTRB = ap_const_lv4_0;
}

void copy_beta::thread_m_axi_Beta_WUSER() {
    m_axi_Beta_WUSER = ap_const_lv1_0;
}

void copy_beta::thread_m_axi_Beta_WVALID() {
    m_axi_Beta_WVALID = ap_const_logic_0;
}

void copy_beta::thread_tmp_72_fu_200_p1() {
    tmp_72_fu_200_p1 = esl_zext<64,30>(Beta_offset.read());
}

void copy_beta::thread_tmp_73_fu_246_p1() {
    tmp_73_fu_246_p1 = esl_zext<64,30>(x_reg_163.read());
}

void copy_beta::thread_tmp_74_fu_251_p3() {
    tmp_74_fu_251_p3 = esl_concat<30,1>(x_reg_163.read(), ap_const_lv1_0);
}

void copy_beta::thread_tmp_75_fu_264_p1() {
    tmp_75_fu_264_p1 = esl_zext<64,31>(tmp_74_reg_339.read());
}

void copy_beta::thread_tmp_77_fu_279_p2() {
    tmp_77_fu_279_p2 = (tmp_74_reg_339.read() | ap_const_lv31_1);
}

void copy_beta::thread_tmp_78_fu_284_p1() {
    tmp_78_fu_284_p1 = esl_zext<64,31>(tmp_77_fu_279_p2.read());
}

void copy_beta::thread_tmp_fu_174_p2() {
    tmp_fu_174_p2 = (!OFM_NUM.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(OFM_NUM.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void copy_beta::thread_tmp_s_fu_235_p2() {
    tmp_s_fu_235_p2 = (!x_cast_fu_231_p1.read().is_01() || !tmp_32_reg_295.read().is_01())? sc_lv<1>(): (sc_bigint<31>(x_cast_fu_231_p1.read()) < sc_bigint<31>(tmp_32_reg_295.read()));
}

void copy_beta::thread_x_2_fu_240_p2() {
    x_2_fu_240_p2 = (!x_reg_163.read().is_01() || !ap_const_lv30_1.is_01())? sc_lv<30>(): (sc_biguint<30>(x_reg_163.read()) + sc_biguint<30>(ap_const_lv30_1));
}

void copy_beta::thread_x_cast_fu_231_p1() {
    x_cast_fu_231_p1 = esl_zext<31,30>(x_reg_163.read());
}

void copy_beta::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_Beta_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 256 : 
            if ((!(esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(exitcond_fu_215_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(exitcond_fu_215_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            break;
        case 1024 : 
            if (!(esl_seteq<1,1,1>(tmp_s_fu_235_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            } else if ((esl_seteq<1,1,1>(tmp_s_fu_235_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            }
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<12>) ("XXXXXXXXXXXX");
            break;
    }
}

}

