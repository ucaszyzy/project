// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _copy_beta_HH_
#define _copy_beta_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "copy_beta_beta_tmp.h"

namespace ap_rtl {

struct copy_beta : public sc_module {
    // Port declarations 61
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > m_axi_Beta_AWVALID;
    sc_in< sc_logic > m_axi_Beta_AWREADY;
    sc_out< sc_lv<32> > m_axi_Beta_AWADDR;
    sc_out< sc_lv<1> > m_axi_Beta_AWID;
    sc_out< sc_lv<32> > m_axi_Beta_AWLEN;
    sc_out< sc_lv<3> > m_axi_Beta_AWSIZE;
    sc_out< sc_lv<2> > m_axi_Beta_AWBURST;
    sc_out< sc_lv<2> > m_axi_Beta_AWLOCK;
    sc_out< sc_lv<4> > m_axi_Beta_AWCACHE;
    sc_out< sc_lv<3> > m_axi_Beta_AWPROT;
    sc_out< sc_lv<4> > m_axi_Beta_AWQOS;
    sc_out< sc_lv<4> > m_axi_Beta_AWREGION;
    sc_out< sc_lv<1> > m_axi_Beta_AWUSER;
    sc_out< sc_logic > m_axi_Beta_WVALID;
    sc_in< sc_logic > m_axi_Beta_WREADY;
    sc_out< sc_lv<32> > m_axi_Beta_WDATA;
    sc_out< sc_lv<4> > m_axi_Beta_WSTRB;
    sc_out< sc_logic > m_axi_Beta_WLAST;
    sc_out< sc_lv<1> > m_axi_Beta_WID;
    sc_out< sc_lv<1> > m_axi_Beta_WUSER;
    sc_out< sc_logic > m_axi_Beta_ARVALID;
    sc_in< sc_logic > m_axi_Beta_ARREADY;
    sc_out< sc_lv<32> > m_axi_Beta_ARADDR;
    sc_out< sc_lv<1> > m_axi_Beta_ARID;
    sc_out< sc_lv<32> > m_axi_Beta_ARLEN;
    sc_out< sc_lv<3> > m_axi_Beta_ARSIZE;
    sc_out< sc_lv<2> > m_axi_Beta_ARBURST;
    sc_out< sc_lv<2> > m_axi_Beta_ARLOCK;
    sc_out< sc_lv<4> > m_axi_Beta_ARCACHE;
    sc_out< sc_lv<3> > m_axi_Beta_ARPROT;
    sc_out< sc_lv<4> > m_axi_Beta_ARQOS;
    sc_out< sc_lv<4> > m_axi_Beta_ARREGION;
    sc_out< sc_lv<1> > m_axi_Beta_ARUSER;
    sc_in< sc_logic > m_axi_Beta_RVALID;
    sc_out< sc_logic > m_axi_Beta_RREADY;
    sc_in< sc_lv<32> > m_axi_Beta_RDATA;
    sc_in< sc_logic > m_axi_Beta_RLAST;
    sc_in< sc_lv<1> > m_axi_Beta_RID;
    sc_in< sc_lv<1> > m_axi_Beta_RUSER;
    sc_in< sc_lv<2> > m_axi_Beta_RRESP;
    sc_in< sc_logic > m_axi_Beta_BVALID;
    sc_out< sc_logic > m_axi_Beta_BREADY;
    sc_in< sc_lv<2> > m_axi_Beta_BRESP;
    sc_in< sc_lv<1> > m_axi_Beta_BID;
    sc_in< sc_lv<1> > m_axi_Beta_BUSER;
    sc_in< sc_lv<30> > Beta_offset;
    sc_in< sc_lv<32> > OFM_NUM;
    sc_out< sc_lv<10> > beta_buffer_address0;
    sc_out< sc_logic > beta_buffer_ce0;
    sc_out< sc_logic > beta_buffer_we0;
    sc_out< sc_lv<16> > beta_buffer_d0;
    sc_out< sc_lv<10> > beta_buffer_address1;
    sc_out< sc_logic > beta_buffer_ce1;
    sc_out< sc_logic > beta_buffer_we1;
    sc_out< sc_lv<16> > beta_buffer_d1;


    // Module declarations
    copy_beta(sc_module_name name);
    SC_HAS_PROCESS(copy_beta);

    ~copy_beta();

    sc_trace_file* mVcdFile;

    copy_beta_beta_tmp* beta_tmp_U;
    sc_signal< sc_lv<12> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<9> > beta_tmp_address0;
    sc_signal< sc_logic > beta_tmp_ce0;
    sc_signal< sc_logic > beta_tmp_we0;
    sc_signal< sc_lv<32> > beta_tmp_q0;
    sc_signal< sc_logic > Beta_blk_n_AR;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > Beta_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > exitcond_reg_311;
    sc_signal< sc_lv<30> > indvar_reg_151;
    sc_signal< sc_lv<30> > indvar_reg_151_pp0_iter1_reg;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state10_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state11_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<30> > x_reg_163;
    sc_signal< sc_lv<30> > tmp_31_cast_reg_289;
    sc_signal< sc_lv<31> > tmp_32_reg_295;
    sc_signal< sc_logic > ap_sig_ioackin_m_axi_Beta_ARREADY;
    sc_signal< sc_lv<1> > exitcond_fu_215_p2;
    sc_signal< sc_lv<1> > exitcond_reg_311_pp0_iter1_reg;
    sc_signal< sc_lv<30> > indvar_next_fu_220_p2;
    sc_signal< sc_lv<30> > indvar_next_reg_315;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<32> > Beta_addr_read_reg_320;
    sc_signal< sc_lv<1> > tmp_s_fu_235_p2;
    sc_signal< sc_lv<1> > tmp_s_reg_325;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< bool > ap_block_state13_pp1_stage0_iter0;
    sc_signal< bool > ap_block_state14_pp1_stage0_iter1;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< sc_lv<30> > x_2_fu_240_p2;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< sc_lv<31> > tmp_74_fu_251_p3;
    sc_signal< sc_lv<31> > tmp_74_reg_339;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state9;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp1_exit_iter0_state13;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< sc_lv<30> > ap_phi_mux_indvar_phi_fu_155_p4;
    sc_signal< sc_lv<64> > indvar4_fu_226_p1;
    sc_signal< sc_lv<64> > tmp_73_fu_246_p1;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_lv<64> > tmp_75_fu_264_p1;
    sc_signal< sc_lv<64> > tmp_78_fu_284_p1;
    sc_signal< sc_lv<64> > tmp_72_fu_200_p1;
    sc_signal< sc_logic > ap_reg_ioackin_m_axi_Beta_ARREADY;
    sc_signal< sc_lv<32> > tmp_fu_174_p2;
    sc_signal< sc_lv<31> > x_cast_fu_231_p1;
    sc_signal< sc_lv<31> > tmp_77_fu_279_p2;
    sc_signal< sc_logic > ap_CS_fsm_state15;
    sc_signal< sc_lv<12> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<12> ap_ST_fsm_state1;
    static const sc_lv<12> ap_ST_fsm_state2;
    static const sc_lv<12> ap_ST_fsm_state3;
    static const sc_lv<12> ap_ST_fsm_state4;
    static const sc_lv<12> ap_ST_fsm_state5;
    static const sc_lv<12> ap_ST_fsm_state6;
    static const sc_lv<12> ap_ST_fsm_state7;
    static const sc_lv<12> ap_ST_fsm_state8;
    static const sc_lv<12> ap_ST_fsm_pp0_stage0;
    static const sc_lv<12> ap_ST_fsm_state12;
    static const sc_lv<12> ap_ST_fsm_pp1_stage0;
    static const sc_lv<12> ap_ST_fsm_state15;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<30> ap_const_lv30_0;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<30> ap_const_lv30_1;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<31> ap_const_lv31_1;
    static const sc_lv<32> ap_const_lv32_B;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_Beta_blk_n_AR();
    void thread_Beta_blk_n_R();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state15();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state8();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_state10_pp0_stage0_iter1();
    void thread_ap_block_state11_pp0_stage0_iter2();
    void thread_ap_block_state13_pp1_stage0_iter0();
    void thread_ap_block_state14_pp1_stage0_iter1();
    void thread_ap_block_state9_pp0_stage0_iter0();
    void thread_ap_condition_pp0_exit_iter0_state9();
    void thread_ap_condition_pp1_exit_iter0_state13();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_pp1();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp1();
    void thread_ap_phi_mux_indvar_phi_fu_155_p4();
    void thread_ap_ready();
    void thread_ap_sig_ioackin_m_axi_Beta_ARREADY();
    void thread_beta_buffer_address0();
    void thread_beta_buffer_address1();
    void thread_beta_buffer_ce0();
    void thread_beta_buffer_ce1();
    void thread_beta_buffer_d0();
    void thread_beta_buffer_d1();
    void thread_beta_buffer_we0();
    void thread_beta_buffer_we1();
    void thread_beta_tmp_address0();
    void thread_beta_tmp_ce0();
    void thread_beta_tmp_we0();
    void thread_exitcond_fu_215_p2();
    void thread_indvar4_fu_226_p1();
    void thread_indvar_next_fu_220_p2();
    void thread_m_axi_Beta_ARADDR();
    void thread_m_axi_Beta_ARBURST();
    void thread_m_axi_Beta_ARCACHE();
    void thread_m_axi_Beta_ARID();
    void thread_m_axi_Beta_ARLEN();
    void thread_m_axi_Beta_ARLOCK();
    void thread_m_axi_Beta_ARPROT();
    void thread_m_axi_Beta_ARQOS();
    void thread_m_axi_Beta_ARREGION();
    void thread_m_axi_Beta_ARSIZE();
    void thread_m_axi_Beta_ARUSER();
    void thread_m_axi_Beta_ARVALID();
    void thread_m_axi_Beta_AWADDR();
    void thread_m_axi_Beta_AWBURST();
    void thread_m_axi_Beta_AWCACHE();
    void thread_m_axi_Beta_AWID();
    void thread_m_axi_Beta_AWLEN();
    void thread_m_axi_Beta_AWLOCK();
    void thread_m_axi_Beta_AWPROT();
    void thread_m_axi_Beta_AWQOS();
    void thread_m_axi_Beta_AWREGION();
    void thread_m_axi_Beta_AWSIZE();
    void thread_m_axi_Beta_AWUSER();
    void thread_m_axi_Beta_AWVALID();
    void thread_m_axi_Beta_BREADY();
    void thread_m_axi_Beta_RREADY();
    void thread_m_axi_Beta_WDATA();
    void thread_m_axi_Beta_WID();
    void thread_m_axi_Beta_WLAST();
    void thread_m_axi_Beta_WSTRB();
    void thread_m_axi_Beta_WUSER();
    void thread_m_axi_Beta_WVALID();
    void thread_tmp_72_fu_200_p1();
    void thread_tmp_73_fu_246_p1();
    void thread_tmp_74_fu_251_p3();
    void thread_tmp_75_fu_264_p1();
    void thread_tmp_77_fu_279_p2();
    void thread_tmp_78_fu_284_p1();
    void thread_tmp_fu_174_p2();
    void thread_tmp_s_fu_235_p2();
    void thread_x_2_fu_240_p2();
    void thread_x_cast_fu_231_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
