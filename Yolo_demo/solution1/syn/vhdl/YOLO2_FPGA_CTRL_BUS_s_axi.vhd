-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.NUMERIC_STD.all;

entity YOLO2_FPGA_CTRL_BUS_s_axi is
generic (
    C_S_AXI_ADDR_WIDTH    : INTEGER := 9;
    C_S_AXI_DATA_WIDTH    : INTEGER := 32);
port (
    -- axi4 lite slave signals
    ACLK                  :in   STD_LOGIC;
    ARESET                :in   STD_LOGIC;
    ACLK_EN               :in   STD_LOGIC;
    AWADDR                :in   STD_LOGIC_VECTOR(C_S_AXI_ADDR_WIDTH-1 downto 0);
    AWVALID               :in   STD_LOGIC;
    AWREADY               :out  STD_LOGIC;
    WDATA                 :in   STD_LOGIC_VECTOR(C_S_AXI_DATA_WIDTH-1 downto 0);
    WSTRB                 :in   STD_LOGIC_VECTOR(C_S_AXI_DATA_WIDTH/8-1 downto 0);
    WVALID                :in   STD_LOGIC;
    WREADY                :out  STD_LOGIC;
    BRESP                 :out  STD_LOGIC_VECTOR(1 downto 0);
    BVALID                :out  STD_LOGIC;
    BREADY                :in   STD_LOGIC;
    ARADDR                :in   STD_LOGIC_VECTOR(C_S_AXI_ADDR_WIDTH-1 downto 0);
    ARVALID               :in   STD_LOGIC;
    ARREADY               :out  STD_LOGIC;
    RDATA                 :out  STD_LOGIC_VECTOR(C_S_AXI_DATA_WIDTH-1 downto 0);
    RRESP                 :out  STD_LOGIC_VECTOR(1 downto 0);
    RVALID                :out  STD_LOGIC;
    RREADY                :in   STD_LOGIC;
    interrupt             :out  STD_LOGIC;
    -- user signals
    ap_start              :out  STD_LOGIC;
    ap_done               :in   STD_LOGIC;
    ap_ready              :in   STD_LOGIC;
    ap_idle               :in   STD_LOGIC;
    Input_r               :out  STD_LOGIC_VECTOR(31 downto 0);
    Input1                :out  STD_LOGIC_VECTOR(31 downto 0);
    Input2                :out  STD_LOGIC_VECTOR(31 downto 0);
    Input3                :out  STD_LOGIC_VECTOR(31 downto 0);
    Output_r              :out  STD_LOGIC_VECTOR(31 downto 0);
    Output1               :out  STD_LOGIC_VECTOR(31 downto 0);
    Weight                :out  STD_LOGIC_VECTOR(31 downto 0);
    Beta                  :out  STD_LOGIC_VECTOR(31 downto 0);
    InFM_num              :out  STD_LOGIC_VECTOR(31 downto 0);
    OutFM_num             :out  STD_LOGIC_VECTOR(31 downto 0);
    Kernel_size           :out  STD_LOGIC_VECTOR(31 downto 0);
    Kernel_stride         :out  STD_LOGIC_VECTOR(31 downto 0);
    Input_w               :out  STD_LOGIC_VECTOR(31 downto 0);
    Input_h               :out  STD_LOGIC_VECTOR(31 downto 0);
    output_w              :out  STD_LOGIC_VECTOR(31 downto 0);
    output_h              :out  STD_LOGIC_VECTOR(31 downto 0);
    Padding               :out  STD_LOGIC_VECTOR(31 downto 0);
    IsNL                  :out  STD_LOGIC_VECTOR(0 downto 0);
    IsBN                  :out  STD_LOGIC_VECTOR(0 downto 0);
    TM                    :out  STD_LOGIC_VECTOR(31 downto 0);
    TN                    :out  STD_LOGIC_VECTOR(31 downto 0);
    TR                    :out  STD_LOGIC_VECTOR(31 downto 0);
    TC                    :out  STD_LOGIC_VECTOR(31 downto 0);
    mLoops                :out  STD_LOGIC_VECTOR(31 downto 0);
    nLoops                :out  STD_LOGIC_VECTOR(31 downto 0);
    rLoops                :out  STD_LOGIC_VECTOR(31 downto 0);
    cLoops                :out  STD_LOGIC_VECTOR(31 downto 0);
    LayerType             :out  STD_LOGIC_VECTOR(31 downto 0);
    InputQ                :out  STD_LOGIC_VECTOR(31 downto 0);
    OutputQ               :out  STD_LOGIC_VECTOR(31 downto 0);
    WeightQ               :out  STD_LOGIC_VECTOR(31 downto 0);
    BetaQ                 :out  STD_LOGIC_VECTOR(31 downto 0);
    trow_loops            :out  STD_LOGIC_VECTOR(31 downto 0)
);
end entity YOLO2_FPGA_CTRL_BUS_s_axi;

-- ------------------------Address Info-------------------
-- 0x000 : Control signals
--         bit 0  - ap_start (Read/Write/COH)
--         bit 1  - ap_done (Read/COR)
--         bit 2  - ap_idle (Read)
--         bit 3  - ap_ready (Read)
--         bit 7  - auto_restart (Read/Write)
--         others - reserved
-- 0x004 : Global Interrupt Enable Register
--         bit 0  - Global Interrupt Enable (Read/Write)
--         others - reserved
-- 0x008 : IP Interrupt Enable Register (Read/Write)
--         bit 0  - Channel 0 (ap_done)
--         bit 1  - Channel 1 (ap_ready)
--         others - reserved
-- 0x00c : IP Interrupt Status Register (Read/TOW)
--         bit 0  - Channel 0 (ap_done)
--         bit 1  - Channel 1 (ap_ready)
--         others - reserved
-- 0x010 : Data signal of Input_r
--         bit 31~0 - Input_r[31:0] (Read/Write)
-- 0x014 : reserved
-- 0x018 : Data signal of Input1
--         bit 31~0 - Input1[31:0] (Read/Write)
-- 0x01c : reserved
-- 0x020 : Data signal of Input2
--         bit 31~0 - Input2[31:0] (Read/Write)
-- 0x024 : reserved
-- 0x028 : Data signal of Input3
--         bit 31~0 - Input3[31:0] (Read/Write)
-- 0x02c : reserved
-- 0x030 : Data signal of Output_r
--         bit 31~0 - Output_r[31:0] (Read/Write)
-- 0x034 : reserved
-- 0x038 : Data signal of Output1
--         bit 31~0 - Output1[31:0] (Read/Write)
-- 0x03c : reserved
-- 0x040 : Data signal of Weight
--         bit 31~0 - Weight[31:0] (Read/Write)
-- 0x044 : reserved
-- 0x048 : Data signal of Beta
--         bit 31~0 - Beta[31:0] (Read/Write)
-- 0x04c : reserved
-- 0x050 : Data signal of InFM_num
--         bit 31~0 - InFM_num[31:0] (Read/Write)
-- 0x054 : reserved
-- 0x058 : Data signal of OutFM_num
--         bit 31~0 - OutFM_num[31:0] (Read/Write)
-- 0x05c : reserved
-- 0x060 : Data signal of Kernel_size
--         bit 31~0 - Kernel_size[31:0] (Read/Write)
-- 0x064 : reserved
-- 0x068 : Data signal of Kernel_stride
--         bit 31~0 - Kernel_stride[31:0] (Read/Write)
-- 0x06c : reserved
-- 0x070 : Data signal of Input_w
--         bit 31~0 - Input_w[31:0] (Read/Write)
-- 0x074 : reserved
-- 0x078 : Data signal of Input_h
--         bit 31~0 - Input_h[31:0] (Read/Write)
-- 0x07c : reserved
-- 0x080 : Data signal of output_w
--         bit 31~0 - output_w[31:0] (Read/Write)
-- 0x084 : reserved
-- 0x088 : Data signal of output_h
--         bit 31~0 - output_h[31:0] (Read/Write)
-- 0x08c : reserved
-- 0x090 : Data signal of Padding
--         bit 31~0 - Padding[31:0] (Read/Write)
-- 0x094 : reserved
-- 0x098 : Data signal of IsNL
--         bit 0  - IsNL[0] (Read/Write)
--         others - reserved
-- 0x09c : reserved
-- 0x0a0 : Data signal of IsBN
--         bit 0  - IsBN[0] (Read/Write)
--         others - reserved
-- 0x0a4 : reserved
-- 0x0a8 : Data signal of TM
--         bit 31~0 - TM[31:0] (Read/Write)
-- 0x0ac : reserved
-- 0x0b0 : Data signal of TN
--         bit 31~0 - TN[31:0] (Read/Write)
-- 0x0b4 : reserved
-- 0x0b8 : Data signal of TR
--         bit 31~0 - TR[31:0] (Read/Write)
-- 0x0bc : reserved
-- 0x0c0 : Data signal of TC
--         bit 31~0 - TC[31:0] (Read/Write)
-- 0x0c4 : reserved
-- 0x0c8 : Data signal of mLoops
--         bit 31~0 - mLoops[31:0] (Read/Write)
-- 0x0cc : reserved
-- 0x0d0 : Data signal of nLoops
--         bit 31~0 - nLoops[31:0] (Read/Write)
-- 0x0d4 : reserved
-- 0x0d8 : Data signal of rLoops
--         bit 31~0 - rLoops[31:0] (Read/Write)
-- 0x0dc : reserved
-- 0x0e0 : Data signal of cLoops
--         bit 31~0 - cLoops[31:0] (Read/Write)
-- 0x0e4 : reserved
-- 0x0e8 : Data signal of LayerType
--         bit 31~0 - LayerType[31:0] (Read/Write)
-- 0x0ec : reserved
-- 0x0f0 : Data signal of InputQ
--         bit 31~0 - InputQ[31:0] (Read/Write)
-- 0x0f4 : reserved
-- 0x0f8 : Data signal of OutputQ
--         bit 31~0 - OutputQ[31:0] (Read/Write)
-- 0x0fc : reserved
-- 0x100 : Data signal of WeightQ
--         bit 31~0 - WeightQ[31:0] (Read/Write)
-- 0x104 : reserved
-- 0x108 : Data signal of BetaQ
--         bit 31~0 - BetaQ[31:0] (Read/Write)
-- 0x10c : reserved
-- 0x110 : Data signal of trow_loops
--         bit 31~0 - trow_loops[31:0] (Read/Write)
-- 0x114 : reserved
-- (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

architecture behave of YOLO2_FPGA_CTRL_BUS_s_axi is
    type states is (wridle, wrdata, wrresp, wrreset, rdidle, rddata, rdreset);  -- read and write fsm states
    signal wstate  : states := wrreset;
    signal rstate  : states := rdreset;
    signal wnext, rnext: states;
    constant ADDR_AP_CTRL              : INTEGER := 16#000#;
    constant ADDR_GIE                  : INTEGER := 16#004#;
    constant ADDR_IER                  : INTEGER := 16#008#;
    constant ADDR_ISR                  : INTEGER := 16#00c#;
    constant ADDR_INPUT_R_DATA_0       : INTEGER := 16#010#;
    constant ADDR_INPUT_R_CTRL         : INTEGER := 16#014#;
    constant ADDR_INPUT1_DATA_0        : INTEGER := 16#018#;
    constant ADDR_INPUT1_CTRL          : INTEGER := 16#01c#;
    constant ADDR_INPUT2_DATA_0        : INTEGER := 16#020#;
    constant ADDR_INPUT2_CTRL          : INTEGER := 16#024#;
    constant ADDR_INPUT3_DATA_0        : INTEGER := 16#028#;
    constant ADDR_INPUT3_CTRL          : INTEGER := 16#02c#;
    constant ADDR_OUTPUT_R_DATA_0      : INTEGER := 16#030#;
    constant ADDR_OUTPUT_R_CTRL        : INTEGER := 16#034#;
    constant ADDR_OUTPUT1_DATA_0       : INTEGER := 16#038#;
    constant ADDR_OUTPUT1_CTRL         : INTEGER := 16#03c#;
    constant ADDR_WEIGHT_DATA_0        : INTEGER := 16#040#;
    constant ADDR_WEIGHT_CTRL          : INTEGER := 16#044#;
    constant ADDR_BETA_DATA_0          : INTEGER := 16#048#;
    constant ADDR_BETA_CTRL            : INTEGER := 16#04c#;
    constant ADDR_INFM_NUM_DATA_0      : INTEGER := 16#050#;
    constant ADDR_INFM_NUM_CTRL        : INTEGER := 16#054#;
    constant ADDR_OUTFM_NUM_DATA_0     : INTEGER := 16#058#;
    constant ADDR_OUTFM_NUM_CTRL       : INTEGER := 16#05c#;
    constant ADDR_KERNEL_SIZE_DATA_0   : INTEGER := 16#060#;
    constant ADDR_KERNEL_SIZE_CTRL     : INTEGER := 16#064#;
    constant ADDR_KERNEL_STRIDE_DATA_0 : INTEGER := 16#068#;
    constant ADDR_KERNEL_STRIDE_CTRL   : INTEGER := 16#06c#;
    constant ADDR_INPUT_W_DATA_0       : INTEGER := 16#070#;
    constant ADDR_INPUT_W_CTRL         : INTEGER := 16#074#;
    constant ADDR_INPUT_H_DATA_0       : INTEGER := 16#078#;
    constant ADDR_INPUT_H_CTRL         : INTEGER := 16#07c#;
    constant ADDR_OUTPUT_W_DATA_0      : INTEGER := 16#080#;
    constant ADDR_OUTPUT_W_CTRL        : INTEGER := 16#084#;
    constant ADDR_OUTPUT_H_DATA_0      : INTEGER := 16#088#;
    constant ADDR_OUTPUT_H_CTRL        : INTEGER := 16#08c#;
    constant ADDR_PADDING_DATA_0       : INTEGER := 16#090#;
    constant ADDR_PADDING_CTRL         : INTEGER := 16#094#;
    constant ADDR_ISNL_DATA_0          : INTEGER := 16#098#;
    constant ADDR_ISNL_CTRL            : INTEGER := 16#09c#;
    constant ADDR_ISBN_DATA_0          : INTEGER := 16#0a0#;
    constant ADDR_ISBN_CTRL            : INTEGER := 16#0a4#;
    constant ADDR_TM_DATA_0            : INTEGER := 16#0a8#;
    constant ADDR_TM_CTRL              : INTEGER := 16#0ac#;
    constant ADDR_TN_DATA_0            : INTEGER := 16#0b0#;
    constant ADDR_TN_CTRL              : INTEGER := 16#0b4#;
    constant ADDR_TR_DATA_0            : INTEGER := 16#0b8#;
    constant ADDR_TR_CTRL              : INTEGER := 16#0bc#;
    constant ADDR_TC_DATA_0            : INTEGER := 16#0c0#;
    constant ADDR_TC_CTRL              : INTEGER := 16#0c4#;
    constant ADDR_MLOOPS_DATA_0        : INTEGER := 16#0c8#;
    constant ADDR_MLOOPS_CTRL          : INTEGER := 16#0cc#;
    constant ADDR_NLOOPS_DATA_0        : INTEGER := 16#0d0#;
    constant ADDR_NLOOPS_CTRL          : INTEGER := 16#0d4#;
    constant ADDR_RLOOPS_DATA_0        : INTEGER := 16#0d8#;
    constant ADDR_RLOOPS_CTRL          : INTEGER := 16#0dc#;
    constant ADDR_CLOOPS_DATA_0        : INTEGER := 16#0e0#;
    constant ADDR_CLOOPS_CTRL          : INTEGER := 16#0e4#;
    constant ADDR_LAYERTYPE_DATA_0     : INTEGER := 16#0e8#;
    constant ADDR_LAYERTYPE_CTRL       : INTEGER := 16#0ec#;
    constant ADDR_INPUTQ_DATA_0        : INTEGER := 16#0f0#;
    constant ADDR_INPUTQ_CTRL          : INTEGER := 16#0f4#;
    constant ADDR_OUTPUTQ_DATA_0       : INTEGER := 16#0f8#;
    constant ADDR_OUTPUTQ_CTRL         : INTEGER := 16#0fc#;
    constant ADDR_WEIGHTQ_DATA_0       : INTEGER := 16#100#;
    constant ADDR_WEIGHTQ_CTRL         : INTEGER := 16#104#;
    constant ADDR_BETAQ_DATA_0         : INTEGER := 16#108#;
    constant ADDR_BETAQ_CTRL           : INTEGER := 16#10c#;
    constant ADDR_TROW_LOOPS_DATA_0    : INTEGER := 16#110#;
    constant ADDR_TROW_LOOPS_CTRL      : INTEGER := 16#114#;
    constant ADDR_BITS         : INTEGER := 9;

    signal waddr               : UNSIGNED(ADDR_BITS-1 downto 0);
    signal wmask               : UNSIGNED(31 downto 0);
    signal aw_hs               : STD_LOGIC;
    signal w_hs                : STD_LOGIC;
    signal rdata_data          : UNSIGNED(31 downto 0);
    signal ar_hs               : STD_LOGIC;
    signal raddr               : UNSIGNED(ADDR_BITS-1 downto 0);
    signal AWREADY_t           : STD_LOGIC;
    signal WREADY_t            : STD_LOGIC;
    signal ARREADY_t           : STD_LOGIC;
    signal RVALID_t            : STD_LOGIC;
    -- internal registers
    signal int_ap_idle         : STD_LOGIC;
    signal int_ap_ready        : STD_LOGIC;
    signal int_ap_done         : STD_LOGIC := '0';
    signal int_ap_start        : STD_LOGIC := '0';
    signal int_auto_restart    : STD_LOGIC := '0';
    signal int_gie             : STD_LOGIC := '0';
    signal int_ier             : UNSIGNED(1 downto 0) := (others => '0');
    signal int_isr             : UNSIGNED(1 downto 0) := (others => '0');
    signal int_Input_r         : UNSIGNED(31 downto 0) := (others => '0');
    signal int_Input1          : UNSIGNED(31 downto 0) := (others => '0');
    signal int_Input2          : UNSIGNED(31 downto 0) := (others => '0');
    signal int_Input3          : UNSIGNED(31 downto 0) := (others => '0');
    signal int_Output_r        : UNSIGNED(31 downto 0) := (others => '0');
    signal int_Output1         : UNSIGNED(31 downto 0) := (others => '0');
    signal int_Weight          : UNSIGNED(31 downto 0) := (others => '0');
    signal int_Beta            : UNSIGNED(31 downto 0) := (others => '0');
    signal int_InFM_num        : UNSIGNED(31 downto 0) := (others => '0');
    signal int_OutFM_num       : UNSIGNED(31 downto 0) := (others => '0');
    signal int_Kernel_size     : UNSIGNED(31 downto 0) := (others => '0');
    signal int_Kernel_stride   : UNSIGNED(31 downto 0) := (others => '0');
    signal int_Input_w         : UNSIGNED(31 downto 0) := (others => '0');
    signal int_Input_h         : UNSIGNED(31 downto 0) := (others => '0');
    signal int_output_w        : UNSIGNED(31 downto 0) := (others => '0');
    signal int_output_h        : UNSIGNED(31 downto 0) := (others => '0');
    signal int_Padding         : UNSIGNED(31 downto 0) := (others => '0');
    signal int_IsNL            : UNSIGNED(0 downto 0) := (others => '0');
    signal int_IsBN            : UNSIGNED(0 downto 0) := (others => '0');
    signal int_TM              : UNSIGNED(31 downto 0) := (others => '0');
    signal int_TN              : UNSIGNED(31 downto 0) := (others => '0');
    signal int_TR              : UNSIGNED(31 downto 0) := (others => '0');
    signal int_TC              : UNSIGNED(31 downto 0) := (others => '0');
    signal int_mLoops          : UNSIGNED(31 downto 0) := (others => '0');
    signal int_nLoops          : UNSIGNED(31 downto 0) := (others => '0');
    signal int_rLoops          : UNSIGNED(31 downto 0) := (others => '0');
    signal int_cLoops          : UNSIGNED(31 downto 0) := (others => '0');
    signal int_LayerType       : UNSIGNED(31 downto 0) := (others => '0');
    signal int_InputQ          : UNSIGNED(31 downto 0) := (others => '0');
    signal int_OutputQ         : UNSIGNED(31 downto 0) := (others => '0');
    signal int_WeightQ         : UNSIGNED(31 downto 0) := (others => '0');
    signal int_BetaQ           : UNSIGNED(31 downto 0) := (others => '0');
    signal int_trow_loops      : UNSIGNED(31 downto 0) := (others => '0');


begin
-- ----------------------- Instantiation------------------

-- ----------------------- AXI WRITE ---------------------
    AWREADY_t <=  '1' when wstate = wridle else '0';
    AWREADY   <=  AWREADY_t;
    WREADY_t  <=  '1' when wstate = wrdata else '0';
    WREADY    <=  WREADY_t;
    BRESP     <=  "00";  -- OKAY
    BVALID    <=  '1' when wstate = wrresp else '0';
    wmask     <=  (31 downto 24 => WSTRB(3), 23 downto 16 => WSTRB(2), 15 downto 8 => WSTRB(1), 7 downto 0 => WSTRB(0));
    aw_hs     <=  AWVALID and AWREADY_t;
    w_hs      <=  WVALID and WREADY_t;

    -- write FSM
    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                wstate <= wrreset;
            elsif (ACLK_EN = '1') then
                wstate <= wnext;
            end if;
        end if;
    end process;

    process (wstate, AWVALID, WVALID, BREADY)
    begin
        case (wstate) is
        when wridle =>
            if (AWVALID = '1') then
                wnext <= wrdata;
            else
                wnext <= wridle;
            end if;
        when wrdata =>
            if (WVALID = '1') then
                wnext <= wrresp;
            else
                wnext <= wrdata;
            end if;
        when wrresp =>
            if (BREADY = '1') then
                wnext <= wridle;
            else
                wnext <= wrresp;
            end if;
        when others =>
            wnext <= wridle;
        end case;
    end process;

    waddr_proc : process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (aw_hs = '1') then
                    waddr <= UNSIGNED(AWADDR(ADDR_BITS-1 downto 0));
                end if;
            end if;
        end if;
    end process;

-- ----------------------- AXI READ ----------------------
    ARREADY_t <= '1' when (rstate = rdidle) else '0';
    ARREADY <= ARREADY_t;
    RDATA   <= STD_LOGIC_VECTOR(rdata_data);
    RRESP   <= "00";  -- OKAY
    RVALID_t  <= '1' when (rstate = rddata) else '0';
    RVALID    <= RVALID_t;
    ar_hs   <= ARVALID and ARREADY_t;
    raddr   <= UNSIGNED(ARADDR(ADDR_BITS-1 downto 0));

    -- read FSM
    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                rstate <= rdreset;
            elsif (ACLK_EN = '1') then
                rstate <= rnext;
            end if;
        end if;
    end process;

    process (rstate, ARVALID, RREADY, RVALID_t)
    begin
        case (rstate) is
        when rdidle =>
            if (ARVALID = '1') then
                rnext <= rddata;
            else
                rnext <= rdidle;
            end if;
        when rddata =>
            if (RREADY = '1' and RVALID_t = '1') then
                rnext <= rdidle;
            else
                rnext <= rddata;
            end if;
        when others =>
            rnext <= rdidle;
        end case;
    end process;

    rdata_proc : process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (ar_hs = '1') then
                    case (TO_INTEGER(raddr)) is
                    when ADDR_AP_CTRL =>
                        rdata_data <= (7 => int_auto_restart, 3 => int_ap_ready, 2 => int_ap_idle, 1 => int_ap_done, 0 => int_ap_start, others => '0');
                    when ADDR_GIE =>
                        rdata_data <= (0 => int_gie, others => '0');
                    when ADDR_IER =>
                        rdata_data <= (1 => int_ier(1), 0 => int_ier(0), others => '0');
                    when ADDR_ISR =>
                        rdata_data <= (1 => int_isr(1), 0 => int_isr(0), others => '0');
                    when ADDR_INPUT_R_DATA_0 =>
                        rdata_data <= RESIZE(int_Input_r(31 downto 0), 32);
                    when ADDR_INPUT1_DATA_0 =>
                        rdata_data <= RESIZE(int_Input1(31 downto 0), 32);
                    when ADDR_INPUT2_DATA_0 =>
                        rdata_data <= RESIZE(int_Input2(31 downto 0), 32);
                    when ADDR_INPUT3_DATA_0 =>
                        rdata_data <= RESIZE(int_Input3(31 downto 0), 32);
                    when ADDR_OUTPUT_R_DATA_0 =>
                        rdata_data <= RESIZE(int_Output_r(31 downto 0), 32);
                    when ADDR_OUTPUT1_DATA_0 =>
                        rdata_data <= RESIZE(int_Output1(31 downto 0), 32);
                    when ADDR_WEIGHT_DATA_0 =>
                        rdata_data <= RESIZE(int_Weight(31 downto 0), 32);
                    when ADDR_BETA_DATA_0 =>
                        rdata_data <= RESIZE(int_Beta(31 downto 0), 32);
                    when ADDR_INFM_NUM_DATA_0 =>
                        rdata_data <= RESIZE(int_InFM_num(31 downto 0), 32);
                    when ADDR_OUTFM_NUM_DATA_0 =>
                        rdata_data <= RESIZE(int_OutFM_num(31 downto 0), 32);
                    when ADDR_KERNEL_SIZE_DATA_0 =>
                        rdata_data <= RESIZE(int_Kernel_size(31 downto 0), 32);
                    when ADDR_KERNEL_STRIDE_DATA_0 =>
                        rdata_data <= RESIZE(int_Kernel_stride(31 downto 0), 32);
                    when ADDR_INPUT_W_DATA_0 =>
                        rdata_data <= RESIZE(int_Input_w(31 downto 0), 32);
                    when ADDR_INPUT_H_DATA_0 =>
                        rdata_data <= RESIZE(int_Input_h(31 downto 0), 32);
                    when ADDR_OUTPUT_W_DATA_0 =>
                        rdata_data <= RESIZE(int_output_w(31 downto 0), 32);
                    when ADDR_OUTPUT_H_DATA_0 =>
                        rdata_data <= RESIZE(int_output_h(31 downto 0), 32);
                    when ADDR_PADDING_DATA_0 =>
                        rdata_data <= RESIZE(int_Padding(31 downto 0), 32);
                    when ADDR_ISNL_DATA_0 =>
                        rdata_data <= RESIZE(int_IsNL(0 downto 0), 32);
                    when ADDR_ISBN_DATA_0 =>
                        rdata_data <= RESIZE(int_IsBN(0 downto 0), 32);
                    when ADDR_TM_DATA_0 =>
                        rdata_data <= RESIZE(int_TM(31 downto 0), 32);
                    when ADDR_TN_DATA_0 =>
                        rdata_data <= RESIZE(int_TN(31 downto 0), 32);
                    when ADDR_TR_DATA_0 =>
                        rdata_data <= RESIZE(int_TR(31 downto 0), 32);
                    when ADDR_TC_DATA_0 =>
                        rdata_data <= RESIZE(int_TC(31 downto 0), 32);
                    when ADDR_MLOOPS_DATA_0 =>
                        rdata_data <= RESIZE(int_mLoops(31 downto 0), 32);
                    when ADDR_NLOOPS_DATA_0 =>
                        rdata_data <= RESIZE(int_nLoops(31 downto 0), 32);
                    when ADDR_RLOOPS_DATA_0 =>
                        rdata_data <= RESIZE(int_rLoops(31 downto 0), 32);
                    when ADDR_CLOOPS_DATA_0 =>
                        rdata_data <= RESIZE(int_cLoops(31 downto 0), 32);
                    when ADDR_LAYERTYPE_DATA_0 =>
                        rdata_data <= RESIZE(int_LayerType(31 downto 0), 32);
                    when ADDR_INPUTQ_DATA_0 =>
                        rdata_data <= RESIZE(int_InputQ(31 downto 0), 32);
                    when ADDR_OUTPUTQ_DATA_0 =>
                        rdata_data <= RESIZE(int_OutputQ(31 downto 0), 32);
                    when ADDR_WEIGHTQ_DATA_0 =>
                        rdata_data <= RESIZE(int_WeightQ(31 downto 0), 32);
                    when ADDR_BETAQ_DATA_0 =>
                        rdata_data <= RESIZE(int_BetaQ(31 downto 0), 32);
                    when ADDR_TROW_LOOPS_DATA_0 =>
                        rdata_data <= RESIZE(int_trow_loops(31 downto 0), 32);
                    when others =>
                        rdata_data <= (others => '0');
                    end case;
                end if;
            end if;
        end if;
    end process;

-- ----------------------- Register logic ----------------
    interrupt            <= int_gie and (int_isr(0) or int_isr(1));
    ap_start             <= int_ap_start;
    Input_r              <= STD_LOGIC_VECTOR(int_Input_r);
    Input1               <= STD_LOGIC_VECTOR(int_Input1);
    Input2               <= STD_LOGIC_VECTOR(int_Input2);
    Input3               <= STD_LOGIC_VECTOR(int_Input3);
    Output_r             <= STD_LOGIC_VECTOR(int_Output_r);
    Output1              <= STD_LOGIC_VECTOR(int_Output1);
    Weight               <= STD_LOGIC_VECTOR(int_Weight);
    Beta                 <= STD_LOGIC_VECTOR(int_Beta);
    InFM_num             <= STD_LOGIC_VECTOR(int_InFM_num);
    OutFM_num            <= STD_LOGIC_VECTOR(int_OutFM_num);
    Kernel_size          <= STD_LOGIC_VECTOR(int_Kernel_size);
    Kernel_stride        <= STD_LOGIC_VECTOR(int_Kernel_stride);
    Input_w              <= STD_LOGIC_VECTOR(int_Input_w);
    Input_h              <= STD_LOGIC_VECTOR(int_Input_h);
    output_w             <= STD_LOGIC_VECTOR(int_output_w);
    output_h             <= STD_LOGIC_VECTOR(int_output_h);
    Padding              <= STD_LOGIC_VECTOR(int_Padding);
    IsNL                 <= STD_LOGIC_VECTOR(int_IsNL);
    IsBN                 <= STD_LOGIC_VECTOR(int_IsBN);
    TM                   <= STD_LOGIC_VECTOR(int_TM);
    TN                   <= STD_LOGIC_VECTOR(int_TN);
    TR                   <= STD_LOGIC_VECTOR(int_TR);
    TC                   <= STD_LOGIC_VECTOR(int_TC);
    mLoops               <= STD_LOGIC_VECTOR(int_mLoops);
    nLoops               <= STD_LOGIC_VECTOR(int_nLoops);
    rLoops               <= STD_LOGIC_VECTOR(int_rLoops);
    cLoops               <= STD_LOGIC_VECTOR(int_cLoops);
    LayerType            <= STD_LOGIC_VECTOR(int_LayerType);
    InputQ               <= STD_LOGIC_VECTOR(int_InputQ);
    OutputQ              <= STD_LOGIC_VECTOR(int_OutputQ);
    WeightQ              <= STD_LOGIC_VECTOR(int_WeightQ);
    BetaQ                <= STD_LOGIC_VECTOR(int_BetaQ);
    trow_loops           <= STD_LOGIC_VECTOR(int_trow_loops);

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ap_start <= '0';
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_AP_CTRL and WSTRB(0) = '1' and WDATA(0) = '1') then
                    int_ap_start <= '1';
                elsif (ap_ready = '1') then
                    int_ap_start <= int_auto_restart; -- clear on handshake/auto restart
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ap_done <= '0';
            elsif (ACLK_EN = '1') then
                if (ap_done = '1') then
                    int_ap_done <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_AP_CTRL) then
                    int_ap_done <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ap_idle <= '0';
            elsif (ACLK_EN = '1') then
                if (true) then
                    int_ap_idle <= ap_idle;
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ap_ready <= '0';
            elsif (ACLK_EN = '1') then
                if (true) then
                    int_ap_ready <= ap_ready;
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_auto_restart <= '0';
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_AP_CTRL and WSTRB(0) = '1') then
                    int_auto_restart <= WDATA(7);
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_gie <= '0';
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_GIE and WSTRB(0) = '1') then
                    int_gie <= WDATA(0);
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ier <= "00";
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_IER and WSTRB(0) = '1') then
                    int_ier <= UNSIGNED(WDATA(1 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_isr(0) <= '0';
            elsif (ACLK_EN = '1') then
                if (int_ier(0) = '1' and ap_done = '1') then
                    int_isr(0) <= '1';
                elsif (w_hs = '1' and waddr = ADDR_ISR and WSTRB(0) = '1') then
                    int_isr(0) <= int_isr(0) xor WDATA(0); -- toggle on write
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_isr(1) <= '0';
            elsif (ACLK_EN = '1') then
                if (int_ier(1) = '1' and ap_ready = '1') then
                    int_isr(1) <= '1';
                elsif (w_hs = '1' and waddr = ADDR_ISR and WSTRB(0) = '1') then
                    int_isr(1) <= int_isr(1) xor WDATA(1); -- toggle on write
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_INPUT_R_DATA_0) then
                    int_Input_r(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_Input_r(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_INPUT1_DATA_0) then
                    int_Input1(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_Input1(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_INPUT2_DATA_0) then
                    int_Input2(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_Input2(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_INPUT3_DATA_0) then
                    int_Input3(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_Input3(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_OUTPUT_R_DATA_0) then
                    int_Output_r(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_Output_r(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_OUTPUT1_DATA_0) then
                    int_Output1(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_Output1(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_WEIGHT_DATA_0) then
                    int_Weight(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_Weight(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_BETA_DATA_0) then
                    int_Beta(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_Beta(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_INFM_NUM_DATA_0) then
                    int_InFM_num(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_InFM_num(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_OUTFM_NUM_DATA_0) then
                    int_OutFM_num(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_OutFM_num(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_KERNEL_SIZE_DATA_0) then
                    int_Kernel_size(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_Kernel_size(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_KERNEL_STRIDE_DATA_0) then
                    int_Kernel_stride(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_Kernel_stride(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_INPUT_W_DATA_0) then
                    int_Input_w(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_Input_w(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_INPUT_H_DATA_0) then
                    int_Input_h(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_Input_h(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_OUTPUT_W_DATA_0) then
                    int_output_w(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_output_w(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_OUTPUT_H_DATA_0) then
                    int_output_h(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_output_h(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_PADDING_DATA_0) then
                    int_Padding(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_Padding(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_ISNL_DATA_0) then
                    int_IsNL(0 downto 0) <= (UNSIGNED(WDATA(0 downto 0)) and wmask(0 downto 0)) or ((not wmask(0 downto 0)) and int_IsNL(0 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_ISBN_DATA_0) then
                    int_IsBN(0 downto 0) <= (UNSIGNED(WDATA(0 downto 0)) and wmask(0 downto 0)) or ((not wmask(0 downto 0)) and int_IsBN(0 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_TM_DATA_0) then
                    int_TM(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_TM(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_TN_DATA_0) then
                    int_TN(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_TN(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_TR_DATA_0) then
                    int_TR(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_TR(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_TC_DATA_0) then
                    int_TC(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_TC(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_MLOOPS_DATA_0) then
                    int_mLoops(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_mLoops(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_NLOOPS_DATA_0) then
                    int_nLoops(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_nLoops(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_RLOOPS_DATA_0) then
                    int_rLoops(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_rLoops(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_CLOOPS_DATA_0) then
                    int_cLoops(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_cLoops(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_LAYERTYPE_DATA_0) then
                    int_LayerType(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_LayerType(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_INPUTQ_DATA_0) then
                    int_InputQ(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_InputQ(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_OUTPUTQ_DATA_0) then
                    int_OutputQ(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_OutputQ(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_WEIGHTQ_DATA_0) then
                    int_WeightQ(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_WeightQ(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_BETAQ_DATA_0) then
                    int_BetaQ(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_BetaQ(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_TROW_LOOPS_DATA_0) then
                    int_trow_loops(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_trow_loops(31 downto 0));
                end if;
            end if;
        end if;
    end process;


-- ----------------------- Memory logic ------------------

end architecture behave;
