-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mmcpy_outputpixel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_Output_r_AWVALID : OUT STD_LOGIC;
    m_axi_Output_r_AWREADY : IN STD_LOGIC;
    m_axi_Output_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Output_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Output_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Output_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Output_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Output_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Output_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Output_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Output_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Output_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Output_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Output_r_WVALID : OUT STD_LOGIC;
    m_axi_Output_r_WREADY : IN STD_LOGIC;
    m_axi_Output_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Output_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Output_r_WLAST : OUT STD_LOGIC;
    m_axi_Output_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Output_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Output_r_ARVALID : OUT STD_LOGIC;
    m_axi_Output_r_ARREADY : IN STD_LOGIC;
    m_axi_Output_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Output_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Output_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Output_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Output_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Output_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Output_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Output_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Output_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Output_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Output_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Output_r_RVALID : IN STD_LOGIC;
    m_axi_Output_r_RREADY : OUT STD_LOGIC;
    m_axi_Output_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Output_r_RLAST : IN STD_LOGIC;
    m_axi_Output_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Output_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Output_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Output_r_BVALID : IN STD_LOGIC;
    m_axi_Output_r_BREADY : OUT STD_LOGIC;
    m_axi_Output_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Output_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Output_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    Output_offset : IN STD_LOGIC_VECTOR (29 downto 0);
    m_axi_Output1_AWVALID : OUT STD_LOGIC;
    m_axi_Output1_AWREADY : IN STD_LOGIC;
    m_axi_Output1_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Output1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Output1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Output1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Output1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Output1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Output1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Output1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Output1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Output1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Output1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Output1_WVALID : OUT STD_LOGIC;
    m_axi_Output1_WREADY : IN STD_LOGIC;
    m_axi_Output1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Output1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Output1_WLAST : OUT STD_LOGIC;
    m_axi_Output1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Output1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Output1_ARVALID : OUT STD_LOGIC;
    m_axi_Output1_ARREADY : IN STD_LOGIC;
    m_axi_Output1_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Output1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Output1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Output1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Output1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Output1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Output1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Output1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Output1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Output1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Output1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Output1_RVALID : IN STD_LOGIC;
    m_axi_Output1_RREADY : OUT STD_LOGIC;
    m_axi_Output1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Output1_RLAST : IN STD_LOGIC;
    m_axi_Output1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Output1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Output1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Output1_BVALID : IN STD_LOGIC;
    m_axi_Output1_BREADY : OUT STD_LOGIC;
    m_axi_Output1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Output1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Output1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    Output1_offset : IN STD_LOGIC_VECTOR (29 downto 0);
    output_tmp_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_tmp_ce0 : OUT STD_LOGIC;
    output_tmp_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_tmp1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_tmp1_ce0 : OUT STD_LOGIC;
    output_tmp1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tm_V_6 : IN STD_LOGIC_VECTOR (5 downto 0);
    mLoop1_V : IN STD_LOGIC_VECTOR (4 downto 0);
    mLoop2_V : IN STD_LOGIC_VECTOR (5 downto 0);
    outputoffsetarray_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    outputoffsetarray_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    OutputLength : IN STD_LOGIC_VECTOR (7 downto 0);
    OutputLength1 : IN STD_LOGIC_VECTOR (7 downto 0);
    enable : IN STD_LOGIC );
end;


architecture behav of mmcpy_outputpixel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal enable_read_read_fu_64_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_outputport_fu_124_ap_start : STD_LOGIC;
    signal grp_mmcpy_outputport_fu_124_ap_done : STD_LOGIC;
    signal grp_mmcpy_outputport_fu_124_ap_idle : STD_LOGIC;
    signal grp_mmcpy_outputport_fu_124_ap_ready : STD_LOGIC;
    signal grp_mmcpy_outputport_fu_124_m_axi_Output_r_AWVALID : STD_LOGIC;
    signal grp_mmcpy_outputport_fu_124_m_axi_Output_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_outputport_fu_124_m_axi_Output_r_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_outputport_fu_124_m_axi_Output_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_outputport_fu_124_m_axi_Output_r_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_outputport_fu_124_m_axi_Output_r_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_outputport_fu_124_m_axi_Output_r_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_outputport_fu_124_m_axi_Output_r_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_outputport_fu_124_m_axi_Output_r_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_outputport_fu_124_m_axi_Output_r_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_outputport_fu_124_m_axi_Output_r_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_outputport_fu_124_m_axi_Output_r_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_outputport_fu_124_m_axi_Output_r_WVALID : STD_LOGIC;
    signal grp_mmcpy_outputport_fu_124_m_axi_Output_r_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_outputport_fu_124_m_axi_Output_r_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_outputport_fu_124_m_axi_Output_r_WLAST : STD_LOGIC;
    signal grp_mmcpy_outputport_fu_124_m_axi_Output_r_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_outputport_fu_124_m_axi_Output_r_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_outputport_fu_124_m_axi_Output_r_ARVALID : STD_LOGIC;
    signal grp_mmcpy_outputport_fu_124_m_axi_Output_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_outputport_fu_124_m_axi_Output_r_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_outputport_fu_124_m_axi_Output_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_outputport_fu_124_m_axi_Output_r_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_outputport_fu_124_m_axi_Output_r_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_outputport_fu_124_m_axi_Output_r_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_outputport_fu_124_m_axi_Output_r_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_outputport_fu_124_m_axi_Output_r_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_outputport_fu_124_m_axi_Output_r_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_outputport_fu_124_m_axi_Output_r_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_outputport_fu_124_m_axi_Output_r_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_outputport_fu_124_m_axi_Output_r_RREADY : STD_LOGIC;
    signal grp_mmcpy_outputport_fu_124_m_axi_Output_r_BREADY : STD_LOGIC;
    signal grp_mmcpy_outputport_fu_124_output_tmp_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_mmcpy_outputport_fu_124_output_tmp_ce0 : STD_LOGIC;
    signal grp_mmcpy_outputport1_fu_142_ap_start : STD_LOGIC;
    signal grp_mmcpy_outputport1_fu_142_ap_done : STD_LOGIC;
    signal grp_mmcpy_outputport1_fu_142_ap_idle : STD_LOGIC;
    signal grp_mmcpy_outputport1_fu_142_ap_ready : STD_LOGIC;
    signal grp_mmcpy_outputport1_fu_142_m_axi_Output_r_AWVALID : STD_LOGIC;
    signal grp_mmcpy_outputport1_fu_142_m_axi_Output_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_outputport1_fu_142_m_axi_Output_r_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_outputport1_fu_142_m_axi_Output_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_outputport1_fu_142_m_axi_Output_r_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_outputport1_fu_142_m_axi_Output_r_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_outputport1_fu_142_m_axi_Output_r_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_outputport1_fu_142_m_axi_Output_r_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_outputport1_fu_142_m_axi_Output_r_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_outputport1_fu_142_m_axi_Output_r_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_outputport1_fu_142_m_axi_Output_r_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_outputport1_fu_142_m_axi_Output_r_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_outputport1_fu_142_m_axi_Output_r_WVALID : STD_LOGIC;
    signal grp_mmcpy_outputport1_fu_142_m_axi_Output_r_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_outputport1_fu_142_m_axi_Output_r_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_outputport1_fu_142_m_axi_Output_r_WLAST : STD_LOGIC;
    signal grp_mmcpy_outputport1_fu_142_m_axi_Output_r_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_outputport1_fu_142_m_axi_Output_r_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_outputport1_fu_142_m_axi_Output_r_ARVALID : STD_LOGIC;
    signal grp_mmcpy_outputport1_fu_142_m_axi_Output_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_outputport1_fu_142_m_axi_Output_r_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_outputport1_fu_142_m_axi_Output_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mmcpy_outputport1_fu_142_m_axi_Output_r_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_outputport1_fu_142_m_axi_Output_r_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_outputport1_fu_142_m_axi_Output_r_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mmcpy_outputport1_fu_142_m_axi_Output_r_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_outputport1_fu_142_m_axi_Output_r_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mmcpy_outputport1_fu_142_m_axi_Output_r_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_outputport1_fu_142_m_axi_Output_r_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mmcpy_outputport1_fu_142_m_axi_Output_r_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mmcpy_outputport1_fu_142_m_axi_Output_r_RREADY : STD_LOGIC;
    signal grp_mmcpy_outputport1_fu_142_m_axi_Output_r_BREADY : STD_LOGIC;
    signal grp_mmcpy_outputport1_fu_142_output_tmp_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_mmcpy_outputport1_fu_142_output_tmp_ce0 : STD_LOGIC;
    signal grp_mmcpy_outputport_fu_124_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_mmcpy_outputport1_fu_142_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component mmcpy_outputport IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_Output_r_AWVALID : OUT STD_LOGIC;
        m_axi_Output_r_AWREADY : IN STD_LOGIC;
        m_axi_Output_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Output_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Output_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Output_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_Output_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Output_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Output_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Output_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_Output_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Output_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Output_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Output_r_WVALID : OUT STD_LOGIC;
        m_axi_Output_r_WREADY : IN STD_LOGIC;
        m_axi_Output_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Output_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Output_r_WLAST : OUT STD_LOGIC;
        m_axi_Output_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Output_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Output_r_ARVALID : OUT STD_LOGIC;
        m_axi_Output_r_ARREADY : IN STD_LOGIC;
        m_axi_Output_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Output_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Output_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Output_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_Output_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Output_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Output_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Output_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_Output_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Output_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Output_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Output_r_RVALID : IN STD_LOGIC;
        m_axi_Output_r_RREADY : OUT STD_LOGIC;
        m_axi_Output_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Output_r_RLAST : IN STD_LOGIC;
        m_axi_Output_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Output_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Output_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Output_r_BVALID : IN STD_LOGIC;
        m_axi_Output_r_BREADY : OUT STD_LOGIC;
        m_axi_Output_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Output_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Output_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        Output_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        output_tmp_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_tmp_ce0 : OUT STD_LOGIC;
        output_tmp_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tm_V_4 : IN STD_LOGIC_VECTOR (5 downto 0);
        mLoop_V : IN STD_LOGIC_VECTOR (4 downto 0);
        OutputOffset : IN STD_LOGIC_VECTOR (31 downto 0);
        OutputLength : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mmcpy_outputport1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_Output_r_AWVALID : OUT STD_LOGIC;
        m_axi_Output_r_AWREADY : IN STD_LOGIC;
        m_axi_Output_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Output_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Output_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Output_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_Output_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Output_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Output_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Output_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_Output_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Output_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Output_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Output_r_WVALID : OUT STD_LOGIC;
        m_axi_Output_r_WREADY : IN STD_LOGIC;
        m_axi_Output_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Output_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Output_r_WLAST : OUT STD_LOGIC;
        m_axi_Output_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Output_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Output_r_ARVALID : OUT STD_LOGIC;
        m_axi_Output_r_ARREADY : IN STD_LOGIC;
        m_axi_Output_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Output_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Output_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Output_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_Output_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Output_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Output_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Output_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_Output_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Output_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Output_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Output_r_RVALID : IN STD_LOGIC;
        m_axi_Output_r_RREADY : OUT STD_LOGIC;
        m_axi_Output_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Output_r_RLAST : IN STD_LOGIC;
        m_axi_Output_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Output_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Output_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Output_r_BVALID : IN STD_LOGIC;
        m_axi_Output_r_BREADY : OUT STD_LOGIC;
        m_axi_Output_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Output_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Output_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        Output_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        output_tmp_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_tmp_ce0 : OUT STD_LOGIC;
        output_tmp_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tm_V_2 : IN STD_LOGIC_VECTOR (5 downto 0);
        mLoop_V : IN STD_LOGIC_VECTOR (5 downto 0);
        OutputOffset : IN STD_LOGIC_VECTOR (31 downto 0);
        OutputLength : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    grp_mmcpy_outputport_fu_124 : component mmcpy_outputport
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mmcpy_outputport_fu_124_ap_start,
        ap_done => grp_mmcpy_outputport_fu_124_ap_done,
        ap_idle => grp_mmcpy_outputport_fu_124_ap_idle,
        ap_ready => grp_mmcpy_outputport_fu_124_ap_ready,
        m_axi_Output_r_AWVALID => grp_mmcpy_outputport_fu_124_m_axi_Output_r_AWVALID,
        m_axi_Output_r_AWREADY => m_axi_Output_r_AWREADY,
        m_axi_Output_r_AWADDR => grp_mmcpy_outputport_fu_124_m_axi_Output_r_AWADDR,
        m_axi_Output_r_AWID => grp_mmcpy_outputport_fu_124_m_axi_Output_r_AWID,
        m_axi_Output_r_AWLEN => grp_mmcpy_outputport_fu_124_m_axi_Output_r_AWLEN,
        m_axi_Output_r_AWSIZE => grp_mmcpy_outputport_fu_124_m_axi_Output_r_AWSIZE,
        m_axi_Output_r_AWBURST => grp_mmcpy_outputport_fu_124_m_axi_Output_r_AWBURST,
        m_axi_Output_r_AWLOCK => grp_mmcpy_outputport_fu_124_m_axi_Output_r_AWLOCK,
        m_axi_Output_r_AWCACHE => grp_mmcpy_outputport_fu_124_m_axi_Output_r_AWCACHE,
        m_axi_Output_r_AWPROT => grp_mmcpy_outputport_fu_124_m_axi_Output_r_AWPROT,
        m_axi_Output_r_AWQOS => grp_mmcpy_outputport_fu_124_m_axi_Output_r_AWQOS,
        m_axi_Output_r_AWREGION => grp_mmcpy_outputport_fu_124_m_axi_Output_r_AWREGION,
        m_axi_Output_r_AWUSER => grp_mmcpy_outputport_fu_124_m_axi_Output_r_AWUSER,
        m_axi_Output_r_WVALID => grp_mmcpy_outputport_fu_124_m_axi_Output_r_WVALID,
        m_axi_Output_r_WREADY => m_axi_Output_r_WREADY,
        m_axi_Output_r_WDATA => grp_mmcpy_outputport_fu_124_m_axi_Output_r_WDATA,
        m_axi_Output_r_WSTRB => grp_mmcpy_outputport_fu_124_m_axi_Output_r_WSTRB,
        m_axi_Output_r_WLAST => grp_mmcpy_outputport_fu_124_m_axi_Output_r_WLAST,
        m_axi_Output_r_WID => grp_mmcpy_outputport_fu_124_m_axi_Output_r_WID,
        m_axi_Output_r_WUSER => grp_mmcpy_outputport_fu_124_m_axi_Output_r_WUSER,
        m_axi_Output_r_ARVALID => grp_mmcpy_outputport_fu_124_m_axi_Output_r_ARVALID,
        m_axi_Output_r_ARREADY => ap_const_logic_0,
        m_axi_Output_r_ARADDR => grp_mmcpy_outputport_fu_124_m_axi_Output_r_ARADDR,
        m_axi_Output_r_ARID => grp_mmcpy_outputport_fu_124_m_axi_Output_r_ARID,
        m_axi_Output_r_ARLEN => grp_mmcpy_outputport_fu_124_m_axi_Output_r_ARLEN,
        m_axi_Output_r_ARSIZE => grp_mmcpy_outputport_fu_124_m_axi_Output_r_ARSIZE,
        m_axi_Output_r_ARBURST => grp_mmcpy_outputport_fu_124_m_axi_Output_r_ARBURST,
        m_axi_Output_r_ARLOCK => grp_mmcpy_outputport_fu_124_m_axi_Output_r_ARLOCK,
        m_axi_Output_r_ARCACHE => grp_mmcpy_outputport_fu_124_m_axi_Output_r_ARCACHE,
        m_axi_Output_r_ARPROT => grp_mmcpy_outputport_fu_124_m_axi_Output_r_ARPROT,
        m_axi_Output_r_ARQOS => grp_mmcpy_outputport_fu_124_m_axi_Output_r_ARQOS,
        m_axi_Output_r_ARREGION => grp_mmcpy_outputport_fu_124_m_axi_Output_r_ARREGION,
        m_axi_Output_r_ARUSER => grp_mmcpy_outputport_fu_124_m_axi_Output_r_ARUSER,
        m_axi_Output_r_RVALID => ap_const_logic_0,
        m_axi_Output_r_RREADY => grp_mmcpy_outputport_fu_124_m_axi_Output_r_RREADY,
        m_axi_Output_r_RDATA => ap_const_lv32_0,
        m_axi_Output_r_RLAST => ap_const_logic_0,
        m_axi_Output_r_RID => ap_const_lv1_0,
        m_axi_Output_r_RUSER => ap_const_lv1_0,
        m_axi_Output_r_RRESP => ap_const_lv2_0,
        m_axi_Output_r_BVALID => m_axi_Output_r_BVALID,
        m_axi_Output_r_BREADY => grp_mmcpy_outputport_fu_124_m_axi_Output_r_BREADY,
        m_axi_Output_r_BRESP => m_axi_Output_r_BRESP,
        m_axi_Output_r_BID => m_axi_Output_r_BID,
        m_axi_Output_r_BUSER => m_axi_Output_r_BUSER,
        Output_offset => Output_offset,
        output_tmp_address0 => grp_mmcpy_outputport_fu_124_output_tmp_address0,
        output_tmp_ce0 => grp_mmcpy_outputport_fu_124_output_tmp_ce0,
        output_tmp_q0 => output_tmp_q0,
        tm_V_4 => tm_V_6,
        mLoop_V => mLoop1_V,
        OutputOffset => outputoffsetarray_0,
        OutputLength => OutputLength);

    grp_mmcpy_outputport1_fu_142 : component mmcpy_outputport1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mmcpy_outputport1_fu_142_ap_start,
        ap_done => grp_mmcpy_outputport1_fu_142_ap_done,
        ap_idle => grp_mmcpy_outputport1_fu_142_ap_idle,
        ap_ready => grp_mmcpy_outputport1_fu_142_ap_ready,
        m_axi_Output_r_AWVALID => grp_mmcpy_outputport1_fu_142_m_axi_Output_r_AWVALID,
        m_axi_Output_r_AWREADY => m_axi_Output1_AWREADY,
        m_axi_Output_r_AWADDR => grp_mmcpy_outputport1_fu_142_m_axi_Output_r_AWADDR,
        m_axi_Output_r_AWID => grp_mmcpy_outputport1_fu_142_m_axi_Output_r_AWID,
        m_axi_Output_r_AWLEN => grp_mmcpy_outputport1_fu_142_m_axi_Output_r_AWLEN,
        m_axi_Output_r_AWSIZE => grp_mmcpy_outputport1_fu_142_m_axi_Output_r_AWSIZE,
        m_axi_Output_r_AWBURST => grp_mmcpy_outputport1_fu_142_m_axi_Output_r_AWBURST,
        m_axi_Output_r_AWLOCK => grp_mmcpy_outputport1_fu_142_m_axi_Output_r_AWLOCK,
        m_axi_Output_r_AWCACHE => grp_mmcpy_outputport1_fu_142_m_axi_Output_r_AWCACHE,
        m_axi_Output_r_AWPROT => grp_mmcpy_outputport1_fu_142_m_axi_Output_r_AWPROT,
        m_axi_Output_r_AWQOS => grp_mmcpy_outputport1_fu_142_m_axi_Output_r_AWQOS,
        m_axi_Output_r_AWREGION => grp_mmcpy_outputport1_fu_142_m_axi_Output_r_AWREGION,
        m_axi_Output_r_AWUSER => grp_mmcpy_outputport1_fu_142_m_axi_Output_r_AWUSER,
        m_axi_Output_r_WVALID => grp_mmcpy_outputport1_fu_142_m_axi_Output_r_WVALID,
        m_axi_Output_r_WREADY => m_axi_Output1_WREADY,
        m_axi_Output_r_WDATA => grp_mmcpy_outputport1_fu_142_m_axi_Output_r_WDATA,
        m_axi_Output_r_WSTRB => grp_mmcpy_outputport1_fu_142_m_axi_Output_r_WSTRB,
        m_axi_Output_r_WLAST => grp_mmcpy_outputport1_fu_142_m_axi_Output_r_WLAST,
        m_axi_Output_r_WID => grp_mmcpy_outputport1_fu_142_m_axi_Output_r_WID,
        m_axi_Output_r_WUSER => grp_mmcpy_outputport1_fu_142_m_axi_Output_r_WUSER,
        m_axi_Output_r_ARVALID => grp_mmcpy_outputport1_fu_142_m_axi_Output_r_ARVALID,
        m_axi_Output_r_ARREADY => ap_const_logic_0,
        m_axi_Output_r_ARADDR => grp_mmcpy_outputport1_fu_142_m_axi_Output_r_ARADDR,
        m_axi_Output_r_ARID => grp_mmcpy_outputport1_fu_142_m_axi_Output_r_ARID,
        m_axi_Output_r_ARLEN => grp_mmcpy_outputport1_fu_142_m_axi_Output_r_ARLEN,
        m_axi_Output_r_ARSIZE => grp_mmcpy_outputport1_fu_142_m_axi_Output_r_ARSIZE,
        m_axi_Output_r_ARBURST => grp_mmcpy_outputport1_fu_142_m_axi_Output_r_ARBURST,
        m_axi_Output_r_ARLOCK => grp_mmcpy_outputport1_fu_142_m_axi_Output_r_ARLOCK,
        m_axi_Output_r_ARCACHE => grp_mmcpy_outputport1_fu_142_m_axi_Output_r_ARCACHE,
        m_axi_Output_r_ARPROT => grp_mmcpy_outputport1_fu_142_m_axi_Output_r_ARPROT,
        m_axi_Output_r_ARQOS => grp_mmcpy_outputport1_fu_142_m_axi_Output_r_ARQOS,
        m_axi_Output_r_ARREGION => grp_mmcpy_outputport1_fu_142_m_axi_Output_r_ARREGION,
        m_axi_Output_r_ARUSER => grp_mmcpy_outputport1_fu_142_m_axi_Output_r_ARUSER,
        m_axi_Output_r_RVALID => ap_const_logic_0,
        m_axi_Output_r_RREADY => grp_mmcpy_outputport1_fu_142_m_axi_Output_r_RREADY,
        m_axi_Output_r_RDATA => ap_const_lv32_0,
        m_axi_Output_r_RLAST => ap_const_logic_0,
        m_axi_Output_r_RID => ap_const_lv1_0,
        m_axi_Output_r_RUSER => ap_const_lv1_0,
        m_axi_Output_r_RRESP => ap_const_lv2_0,
        m_axi_Output_r_BVALID => m_axi_Output1_BVALID,
        m_axi_Output_r_BREADY => grp_mmcpy_outputport1_fu_142_m_axi_Output_r_BREADY,
        m_axi_Output_r_BRESP => m_axi_Output1_BRESP,
        m_axi_Output_r_BID => m_axi_Output1_BID,
        m_axi_Output_r_BUSER => m_axi_Output1_BUSER,
        Output_offset => Output1_offset,
        output_tmp_address0 => grp_mmcpy_outputport1_fu_142_output_tmp_address0,
        output_tmp_ce0 => grp_mmcpy_outputport1_fu_142_output_tmp_ce0,
        output_tmp_q0 => output_tmp1_q0,
        tm_V_2 => tm_V_6,
        mLoop_V => mLoop2_V,
        OutputOffset => outputoffsetarray_1,
        OutputLength => OutputLength1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_mmcpy_outputport1_fu_142_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_mmcpy_outputport1_fu_142_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (enable_read_read_fu_64_p2 = ap_const_lv1_1))) then 
                    grp_mmcpy_outputport1_fu_142_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mmcpy_outputport1_fu_142_ap_ready = ap_const_logic_1)) then 
                    grp_mmcpy_outputport1_fu_142_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mmcpy_outputport_fu_124_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_mmcpy_outputport_fu_124_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (enable_read_read_fu_64_p2 = ap_const_lv1_1))) then 
                    grp_mmcpy_outputport_fu_124_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mmcpy_outputport_fu_124_ap_ready = ap_const_logic_1)) then 
                    grp_mmcpy_outputport_fu_124_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state2_on_subcall_done_assign_proc : process(enable_read_read_fu_64_p2, grp_mmcpy_outputport_fu_124_ap_done, grp_mmcpy_outputport1_fu_142_ap_done)
    begin
                ap_block_state2_on_subcall_done <= (((grp_mmcpy_outputport1_fu_142_ap_done = ap_const_logic_0) and (enable_read_read_fu_64_p2 = ap_const_lv1_1)) or ((grp_mmcpy_outputport_fu_124_ap_done = ap_const_logic_0) and (enable_read_read_fu_64_p2 = ap_const_lv1_1)));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    enable_read_read_fu_64_p2 <= (0=>enable, others=>'-');
    grp_mmcpy_outputport1_fu_142_ap_start <= grp_mmcpy_outputport1_fu_142_ap_start_reg;
    grp_mmcpy_outputport_fu_124_ap_start <= grp_mmcpy_outputport_fu_124_ap_start_reg;
    m_axi_Output1_ARADDR <= ap_const_lv32_0;
    m_axi_Output1_ARBURST <= ap_const_lv2_0;
    m_axi_Output1_ARCACHE <= ap_const_lv4_0;
    m_axi_Output1_ARID <= ap_const_lv1_0;
    m_axi_Output1_ARLEN <= ap_const_lv32_0;
    m_axi_Output1_ARLOCK <= ap_const_lv2_0;
    m_axi_Output1_ARPROT <= ap_const_lv3_0;
    m_axi_Output1_ARQOS <= ap_const_lv4_0;
    m_axi_Output1_ARREGION <= ap_const_lv4_0;
    m_axi_Output1_ARSIZE <= ap_const_lv3_0;
    m_axi_Output1_ARUSER <= ap_const_lv1_0;
    m_axi_Output1_ARVALID <= ap_const_logic_0;
    m_axi_Output1_AWADDR <= grp_mmcpy_outputport1_fu_142_m_axi_Output_r_AWADDR;
    m_axi_Output1_AWBURST <= grp_mmcpy_outputport1_fu_142_m_axi_Output_r_AWBURST;
    m_axi_Output1_AWCACHE <= grp_mmcpy_outputport1_fu_142_m_axi_Output_r_AWCACHE;
    m_axi_Output1_AWID <= grp_mmcpy_outputport1_fu_142_m_axi_Output_r_AWID;
    m_axi_Output1_AWLEN <= grp_mmcpy_outputport1_fu_142_m_axi_Output_r_AWLEN;
    m_axi_Output1_AWLOCK <= grp_mmcpy_outputport1_fu_142_m_axi_Output_r_AWLOCK;
    m_axi_Output1_AWPROT <= grp_mmcpy_outputport1_fu_142_m_axi_Output_r_AWPROT;
    m_axi_Output1_AWQOS <= grp_mmcpy_outputport1_fu_142_m_axi_Output_r_AWQOS;
    m_axi_Output1_AWREGION <= grp_mmcpy_outputport1_fu_142_m_axi_Output_r_AWREGION;
    m_axi_Output1_AWSIZE <= grp_mmcpy_outputport1_fu_142_m_axi_Output_r_AWSIZE;
    m_axi_Output1_AWUSER <= grp_mmcpy_outputport1_fu_142_m_axi_Output_r_AWUSER;

    m_axi_Output1_AWVALID_assign_proc : process(ap_CS_fsm_state1, enable_read_read_fu_64_p2, grp_mmcpy_outputport1_fu_142_m_axi_Output_r_AWVALID, ap_CS_fsm_state2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (enable_read_read_fu_64_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (enable_read_read_fu_64_p2 = ap_const_lv1_1)))) then 
            m_axi_Output1_AWVALID <= grp_mmcpy_outputport1_fu_142_m_axi_Output_r_AWVALID;
        else 
            m_axi_Output1_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_Output1_BREADY_assign_proc : process(ap_CS_fsm_state1, enable_read_read_fu_64_p2, grp_mmcpy_outputport1_fu_142_m_axi_Output_r_BREADY, ap_CS_fsm_state2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (enable_read_read_fu_64_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (enable_read_read_fu_64_p2 = ap_const_lv1_1)))) then 
            m_axi_Output1_BREADY <= grp_mmcpy_outputport1_fu_142_m_axi_Output_r_BREADY;
        else 
            m_axi_Output1_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_Output1_RREADY <= ap_const_logic_0;
    m_axi_Output1_WDATA <= grp_mmcpy_outputport1_fu_142_m_axi_Output_r_WDATA;
    m_axi_Output1_WID <= grp_mmcpy_outputport1_fu_142_m_axi_Output_r_WID;
    m_axi_Output1_WLAST <= grp_mmcpy_outputport1_fu_142_m_axi_Output_r_WLAST;
    m_axi_Output1_WSTRB <= grp_mmcpy_outputport1_fu_142_m_axi_Output_r_WSTRB;
    m_axi_Output1_WUSER <= grp_mmcpy_outputport1_fu_142_m_axi_Output_r_WUSER;

    m_axi_Output1_WVALID_assign_proc : process(ap_CS_fsm_state1, enable_read_read_fu_64_p2, grp_mmcpy_outputport1_fu_142_m_axi_Output_r_WVALID, ap_CS_fsm_state2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (enable_read_read_fu_64_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (enable_read_read_fu_64_p2 = ap_const_lv1_1)))) then 
            m_axi_Output1_WVALID <= grp_mmcpy_outputport1_fu_142_m_axi_Output_r_WVALID;
        else 
            m_axi_Output1_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_Output_r_ARADDR <= ap_const_lv32_0;
    m_axi_Output_r_ARBURST <= ap_const_lv2_0;
    m_axi_Output_r_ARCACHE <= ap_const_lv4_0;
    m_axi_Output_r_ARID <= ap_const_lv1_0;
    m_axi_Output_r_ARLEN <= ap_const_lv32_0;
    m_axi_Output_r_ARLOCK <= ap_const_lv2_0;
    m_axi_Output_r_ARPROT <= ap_const_lv3_0;
    m_axi_Output_r_ARQOS <= ap_const_lv4_0;
    m_axi_Output_r_ARREGION <= ap_const_lv4_0;
    m_axi_Output_r_ARSIZE <= ap_const_lv3_0;
    m_axi_Output_r_ARUSER <= ap_const_lv1_0;
    m_axi_Output_r_ARVALID <= ap_const_logic_0;
    m_axi_Output_r_AWADDR <= grp_mmcpy_outputport_fu_124_m_axi_Output_r_AWADDR;
    m_axi_Output_r_AWBURST <= grp_mmcpy_outputport_fu_124_m_axi_Output_r_AWBURST;
    m_axi_Output_r_AWCACHE <= grp_mmcpy_outputport_fu_124_m_axi_Output_r_AWCACHE;
    m_axi_Output_r_AWID <= grp_mmcpy_outputport_fu_124_m_axi_Output_r_AWID;
    m_axi_Output_r_AWLEN <= grp_mmcpy_outputport_fu_124_m_axi_Output_r_AWLEN;
    m_axi_Output_r_AWLOCK <= grp_mmcpy_outputport_fu_124_m_axi_Output_r_AWLOCK;
    m_axi_Output_r_AWPROT <= grp_mmcpy_outputport_fu_124_m_axi_Output_r_AWPROT;
    m_axi_Output_r_AWQOS <= grp_mmcpy_outputport_fu_124_m_axi_Output_r_AWQOS;
    m_axi_Output_r_AWREGION <= grp_mmcpy_outputport_fu_124_m_axi_Output_r_AWREGION;
    m_axi_Output_r_AWSIZE <= grp_mmcpy_outputport_fu_124_m_axi_Output_r_AWSIZE;
    m_axi_Output_r_AWUSER <= grp_mmcpy_outputport_fu_124_m_axi_Output_r_AWUSER;

    m_axi_Output_r_AWVALID_assign_proc : process(ap_CS_fsm_state1, enable_read_read_fu_64_p2, grp_mmcpy_outputport_fu_124_m_axi_Output_r_AWVALID, ap_CS_fsm_state2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (enable_read_read_fu_64_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (enable_read_read_fu_64_p2 = ap_const_lv1_1)))) then 
            m_axi_Output_r_AWVALID <= grp_mmcpy_outputport_fu_124_m_axi_Output_r_AWVALID;
        else 
            m_axi_Output_r_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_Output_r_BREADY_assign_proc : process(ap_CS_fsm_state1, enable_read_read_fu_64_p2, grp_mmcpy_outputport_fu_124_m_axi_Output_r_BREADY, ap_CS_fsm_state2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (enable_read_read_fu_64_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (enable_read_read_fu_64_p2 = ap_const_lv1_1)))) then 
            m_axi_Output_r_BREADY <= grp_mmcpy_outputport_fu_124_m_axi_Output_r_BREADY;
        else 
            m_axi_Output_r_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_Output_r_RREADY <= ap_const_logic_0;
    m_axi_Output_r_WDATA <= grp_mmcpy_outputport_fu_124_m_axi_Output_r_WDATA;
    m_axi_Output_r_WID <= grp_mmcpy_outputport_fu_124_m_axi_Output_r_WID;
    m_axi_Output_r_WLAST <= grp_mmcpy_outputport_fu_124_m_axi_Output_r_WLAST;
    m_axi_Output_r_WSTRB <= grp_mmcpy_outputport_fu_124_m_axi_Output_r_WSTRB;
    m_axi_Output_r_WUSER <= grp_mmcpy_outputport_fu_124_m_axi_Output_r_WUSER;

    m_axi_Output_r_WVALID_assign_proc : process(ap_CS_fsm_state1, enable_read_read_fu_64_p2, grp_mmcpy_outputport_fu_124_m_axi_Output_r_WVALID, ap_CS_fsm_state2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (enable_read_read_fu_64_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (enable_read_read_fu_64_p2 = ap_const_lv1_1)))) then 
            m_axi_Output_r_WVALID <= grp_mmcpy_outputport_fu_124_m_axi_Output_r_WVALID;
        else 
            m_axi_Output_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    output_tmp1_address0 <= grp_mmcpy_outputport1_fu_142_output_tmp_address0;
    output_tmp1_ce0 <= grp_mmcpy_outputport1_fu_142_output_tmp_ce0;
    output_tmp_address0 <= grp_mmcpy_outputport_fu_124_output_tmp_address0;
    output_tmp_ce0 <= grp_mmcpy_outputport_fu_124_output_tmp_ce0;
end behav;
