// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module outputpixel2buf (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_buffer_0_address0,
        output_buffer_0_ce0,
        output_buffer_0_q0,
        output_buffer_1_address0,
        output_buffer_1_ce0,
        output_buffer_1_q0,
        output_buffer_2_address0,
        output_buffer_2_ce0,
        output_buffer_2_q0,
        output_buffer_3_address0,
        output_buffer_3_ce0,
        output_buffer_3_q0,
        output_buffer_4_address0,
        output_buffer_4_ce0,
        output_buffer_4_q0,
        output_buffer_5_address0,
        output_buffer_5_ce0,
        output_buffer_5_q0,
        output_buffer_6_address0,
        output_buffer_6_ce0,
        output_buffer_6_q0,
        output_buffer_7_address0,
        output_buffer_7_ce0,
        output_buffer_7_q0,
        output_buffer_8_address0,
        output_buffer_8_ce0,
        output_buffer_8_q0,
        output_buffer_9_address0,
        output_buffer_9_ce0,
        output_buffer_9_q0,
        output_buffer_10_address0,
        output_buffer_10_ce0,
        output_buffer_10_q0,
        output_buffer_11_address0,
        output_buffer_11_ce0,
        output_buffer_11_q0,
        output_buffer_12_address0,
        output_buffer_12_ce0,
        output_buffer_12_q0,
        output_buffer_13_address0,
        output_buffer_13_ce0,
        output_buffer_13_q0,
        output_buffer_14_address0,
        output_buffer_14_ce0,
        output_buffer_14_q0,
        output_buffer_15_address0,
        output_buffer_15_ce0,
        output_buffer_15_q0,
        output_buffer_16_address0,
        output_buffer_16_ce0,
        output_buffer_16_q0,
        output_buffer_17_address0,
        output_buffer_17_ce0,
        output_buffer_17_q0,
        output_buffer_18_address0,
        output_buffer_18_ce0,
        output_buffer_18_q0,
        output_buffer_19_address0,
        output_buffer_19_ce0,
        output_buffer_19_q0,
        output_buffer_20_address0,
        output_buffer_20_ce0,
        output_buffer_20_q0,
        output_buffer_21_address0,
        output_buffer_21_ce0,
        output_buffer_21_q0,
        output_buffer_22_address0,
        output_buffer_22_ce0,
        output_buffer_22_q0,
        output_buffer_23_address0,
        output_buffer_23_ce0,
        output_buffer_23_q0,
        output_buffer_24_address0,
        output_buffer_24_ce0,
        output_buffer_24_q0,
        output_buffer_25_address0,
        output_buffer_25_ce0,
        output_buffer_25_q0,
        output_buffer_26_address0,
        output_buffer_26_ce0,
        output_buffer_26_q0,
        output_buffer_27_address0,
        output_buffer_27_ce0,
        output_buffer_27_q0,
        output_buffer_28_address0,
        output_buffer_28_ce0,
        output_buffer_28_q0,
        output_buffer_29_address0,
        output_buffer_29_ce0,
        output_buffer_29_q0,
        output_buffer_30_address0,
        output_buffer_30_ce0,
        output_buffer_30_q0,
        output_buffer_31_address0,
        output_buffer_31_ce0,
        output_buffer_31_q0,
        output_tmp_address0,
        output_tmp_ce0,
        output_tmp_we0,
        output_tmp_d0,
        output_tmp1_address0,
        output_tmp1_ce0,
        output_tmp1_we0,
        output_tmp1_d0,
        IsNL,
        InterSubOutput,
        LayerType,
        TC_MINe26,
        TC_MIN,
        mLoop,
        rLoop,
        init,
        outputoffsetarray_0,
        outputoffsetarray_1,
        OutputOffset1_sum,
        OutputOffset1_sum1,
        OutputOffset2_sum,
        tm_next_0_V_read,
        enable,
        ap_return_0,
        ap_return_1,
        ap_return_2
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_pp0_stage0 = 6'd8;
parameter    ap_ST_fsm_state10 = 6'd16;
parameter    ap_ST_fsm_state11 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] output_buffer_0_address0;
output   output_buffer_0_ce0;
input  [31:0] output_buffer_0_q0;
output  [9:0] output_buffer_1_address0;
output   output_buffer_1_ce0;
input  [31:0] output_buffer_1_q0;
output  [9:0] output_buffer_2_address0;
output   output_buffer_2_ce0;
input  [31:0] output_buffer_2_q0;
output  [9:0] output_buffer_3_address0;
output   output_buffer_3_ce0;
input  [31:0] output_buffer_3_q0;
output  [9:0] output_buffer_4_address0;
output   output_buffer_4_ce0;
input  [31:0] output_buffer_4_q0;
output  [9:0] output_buffer_5_address0;
output   output_buffer_5_ce0;
input  [31:0] output_buffer_5_q0;
output  [9:0] output_buffer_6_address0;
output   output_buffer_6_ce0;
input  [31:0] output_buffer_6_q0;
output  [9:0] output_buffer_7_address0;
output   output_buffer_7_ce0;
input  [31:0] output_buffer_7_q0;
output  [9:0] output_buffer_8_address0;
output   output_buffer_8_ce0;
input  [31:0] output_buffer_8_q0;
output  [9:0] output_buffer_9_address0;
output   output_buffer_9_ce0;
input  [31:0] output_buffer_9_q0;
output  [9:0] output_buffer_10_address0;
output   output_buffer_10_ce0;
input  [31:0] output_buffer_10_q0;
output  [9:0] output_buffer_11_address0;
output   output_buffer_11_ce0;
input  [31:0] output_buffer_11_q0;
output  [9:0] output_buffer_12_address0;
output   output_buffer_12_ce0;
input  [31:0] output_buffer_12_q0;
output  [9:0] output_buffer_13_address0;
output   output_buffer_13_ce0;
input  [31:0] output_buffer_13_q0;
output  [9:0] output_buffer_14_address0;
output   output_buffer_14_ce0;
input  [31:0] output_buffer_14_q0;
output  [9:0] output_buffer_15_address0;
output   output_buffer_15_ce0;
input  [31:0] output_buffer_15_q0;
output  [9:0] output_buffer_16_address0;
output   output_buffer_16_ce0;
input  [31:0] output_buffer_16_q0;
output  [9:0] output_buffer_17_address0;
output   output_buffer_17_ce0;
input  [31:0] output_buffer_17_q0;
output  [9:0] output_buffer_18_address0;
output   output_buffer_18_ce0;
input  [31:0] output_buffer_18_q0;
output  [9:0] output_buffer_19_address0;
output   output_buffer_19_ce0;
input  [31:0] output_buffer_19_q0;
output  [9:0] output_buffer_20_address0;
output   output_buffer_20_ce0;
input  [31:0] output_buffer_20_q0;
output  [9:0] output_buffer_21_address0;
output   output_buffer_21_ce0;
input  [31:0] output_buffer_21_q0;
output  [9:0] output_buffer_22_address0;
output   output_buffer_22_ce0;
input  [31:0] output_buffer_22_q0;
output  [9:0] output_buffer_23_address0;
output   output_buffer_23_ce0;
input  [31:0] output_buffer_23_q0;
output  [9:0] output_buffer_24_address0;
output   output_buffer_24_ce0;
input  [31:0] output_buffer_24_q0;
output  [9:0] output_buffer_25_address0;
output   output_buffer_25_ce0;
input  [31:0] output_buffer_25_q0;
output  [9:0] output_buffer_26_address0;
output   output_buffer_26_ce0;
input  [31:0] output_buffer_26_q0;
output  [9:0] output_buffer_27_address0;
output   output_buffer_27_ce0;
input  [31:0] output_buffer_27_q0;
output  [9:0] output_buffer_28_address0;
output   output_buffer_28_ce0;
input  [31:0] output_buffer_28_q0;
output  [9:0] output_buffer_29_address0;
output   output_buffer_29_ce0;
input  [31:0] output_buffer_29_q0;
output  [9:0] output_buffer_30_address0;
output   output_buffer_30_ce0;
input  [31:0] output_buffer_30_q0;
output  [9:0] output_buffer_31_address0;
output   output_buffer_31_ce0;
input  [31:0] output_buffer_31_q0;
output  [7:0] output_tmp_address0;
output   output_tmp_ce0;
output   output_tmp_we0;
output  [31:0] output_tmp_d0;
output  [7:0] output_tmp1_address0;
output   output_tmp1_ce0;
output   output_tmp1_we0;
output  [31:0] output_tmp1_d0;
input   IsNL;
input  [7:0] InterSubOutput;
input  [31:0] LayerType;
input   TC_MINe26;
input  [31:0] TC_MIN;
input  [4:0] mLoop;
input  [4:0] rLoop;
input   init;
input  [31:0] outputoffsetarray_0;
input  [31:0] outputoffsetarray_1;
input  [28:0] OutputOffset1_sum;
input  [28:0] OutputOffset1_sum1;
input  [13:0] OutputOffset2_sum;
input  [5:0] tm_next_0_V_read;
input   enable;
output  [5:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_buffer_0_ce0;
reg output_buffer_1_ce0;
reg output_buffer_2_ce0;
reg output_buffer_3_ce0;
reg output_buffer_4_ce0;
reg output_buffer_5_ce0;
reg output_buffer_6_ce0;
reg output_buffer_7_ce0;
reg output_buffer_8_ce0;
reg output_buffer_9_ce0;
reg output_buffer_10_ce0;
reg output_buffer_11_ce0;
reg output_buffer_12_ce0;
reg output_buffer_13_ce0;
reg output_buffer_14_ce0;
reg output_buffer_15_ce0;
reg output_buffer_16_ce0;
reg output_buffer_17_ce0;
reg output_buffer_18_ce0;
reg output_buffer_19_ce0;
reg output_buffer_20_ce0;
reg output_buffer_21_ce0;
reg output_buffer_22_ce0;
reg output_buffer_23_ce0;
reg output_buffer_24_ce0;
reg output_buffer_25_ce0;
reg output_buffer_26_ce0;
reg output_buffer_27_ce0;
reg output_buffer_28_ce0;
reg output_buffer_29_ce0;
reg output_buffer_30_ce0;
reg output_buffer_31_ce0;
reg output_tmp_ce0;
reg output_tmp_we0;
reg output_tmp1_ce0;
reg output_tmp1_we0;
reg[5:0] ap_return_0;
reg[31:0] ap_return_1;
reg[31:0] ap_return_2;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [5:0] tm_V;
reg   [8:0] indvar_flatten_reg_833;
reg   [4:0] p_0228_2_reg_844;
reg   [4:0] p_5_reg_854;
reg  signed [31:0] tmp_output_1_3_reg_865;
wire   [0:0] TC_MINe26_read_read_fu_306_p2;
wire   [5:0] tm_next_V_fu_948_p1;
reg   [5:0] tm_next_V_reg_1584;
wire   [0:0] enable_read_read_fu_240_p2;
wire   [3:0] InterSubOutput_4b_V_fu_952_p1;
reg   [3:0] InterSubOutput_4b_V_reg_1590;
wire   [4:0] tmp_47_fu_967_p1;
reg   [4:0] tmp_47_reg_1640;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_15_fu_970_p2;
reg   [0:0] tmp_15_reg_1645;
wire   [31:0] tmp_16_fu_975_p1;
reg   [31:0] tmp_16_reg_1651;
wire   [8:0] bound_fu_990_p2;
reg   [8:0] bound_reg_1657;
wire   [0:0] exitcond5_fu_1006_p2;
wire    ap_CS_fsm_state3;
wire   [1:0] tm_count_V_fu_1012_p2;
reg   [1:0] tm_count_V_reg_1666;
wire   [31:0] outputoffsetarray_fu_1036_p1;
wire   [31:0] outputoffsetarray1_fu_1055_p1;
wire   [0:0] exitcond_flatten_fu_1059_p2;
reg   [0:0] exitcond_flatten_reg_1681;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_state8_pp0_stage0_iter4;
wire    ap_block_state9_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten_reg_1681_pp0_iter1_reg;
reg   [0:0] exitcond_flatten_reg_1681_pp0_iter2_reg;
reg   [0:0] exitcond_flatten_reg_1681_pp0_iter3_reg;
reg   [0:0] exitcond_flatten_reg_1681_pp0_iter4_reg;
wire   [8:0] indvar_flatten_next_fu_1064_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [4:0] p_5_mid2_fu_1081_p3;
reg   [4:0] p_5_mid2_reg_1690;
wire   [4:0] tmp_29_mid2_v_fu_1089_p3;
reg   [4:0] tmp_29_mid2_v_reg_1695;
wire   [4:0] tc_V_fu_1097_p2;
wire  signed [31:0] tmp_output_2_fu_1148_p34;
reg  signed [31:0] tmp_output_2_reg_1946;
wire   [4:0] r_V_fu_1218_p2;
wire   [0:0] or_cond_fu_1231_p2;
reg   [0:0] or_cond_reg_1957;
reg   [29:0] tmp_7_reg_1961;
wire   [44:0] tmp_24_fu_1259_p2;
reg   [44:0] tmp_24_reg_1966;
wire  signed [31:0] tmp_output_fu_1265_p1;
wire   [15:0] tmp_output2_1_fu_1315_p3;
reg   [15:0] tmp_output2_1_reg_1976;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg   [4:0] ap_phi_mux_p_s_phi_fu_776_p4;
reg   [4:0] p_s_reg_772;
reg   [1:0] p_7_reg_784;
reg   [2:0] ap_phi_mux_p_8_phi_fu_801_p4;
reg   [2:0] p_8_reg_797;
reg   [4:0] p_0228_1_reg_809;
wire    ap_CS_fsm_state10;
reg   [1:0] p_2_reg_822;
reg   [4:0] ap_phi_mux_p_0228_2_phi_fu_847_p4;
wire    ap_block_pp0_stage0;
wire  signed [31:0] ap_phi_reg_pp0_iter0_tmp_output_1_3_reg_865;
reg  signed [31:0] ap_phi_reg_pp0_iter1_tmp_output_1_3_reg_865;
reg  signed [31:0] ap_phi_reg_pp0_iter2_tmp_output_1_3_reg_865;
reg  signed [31:0] ap_phi_reg_pp0_iter3_tmp_output_1_3_reg_865;
wire   [31:0] ap_phi_reg_pp0_iter0_tmp_output1_reg_903;
reg   [31:0] ap_phi_reg_pp0_iter1_tmp_output1_reg_903;
reg   [31:0] ap_phi_reg_pp0_iter2_tmp_output1_reg_903;
reg   [31:0] ap_phi_reg_pp0_iter3_tmp_output1_reg_903;
reg   [31:0] ap_phi_reg_pp0_iter4_tmp_output1_reg_903;
reg   [31:0] ap_phi_reg_pp0_iter5_tmp_output1_reg_903;
reg   [31:0] outputoffsetarray_0_1_reg_912;
reg   [31:0] outputoffsetarray_1_1_reg_921;
reg   [5:0] tm_next_0_V_write_a_reg_930;
wire   [63:0] tmp_42_cast_fu_1109_p1;
wire   [63:0] tmp_28_fu_1432_p1;
wire   [0:0] tmp_27_fu_1397_p2;
wire   [63:0] tmp_29_fu_1443_p1;
wire   [0:0] init_read_read_fu_282_p2;
wire   [5:0] tmp_19_fu_1484_p2;
reg   [7:0] t_V_fu_212;
wire   [7:0] outputoffset1_V_fu_1448_p2;
reg   [7:0] t_V_1_fu_216;
wire   [7:0] outputoffset_V_fu_1437_p2;
reg   [1:0] cnt_V_1_fu_220;
wire   [1:0] cnt_V_fu_1391_p2;
reg   [15:0] ouput_array1_1_fu_224;
wire   [15:0] ouput_array1_1_2_fu_1384_p3;
reg   [15:0] ouput_array1_1_3_fu_228;
wire   [15:0] ouput_array1_1_1_fu_1377_p3;
reg   [15:0] ouput_array_1_fu_232;
wire   [15:0] ouput_array_1_2_fu_1369_p3;
reg   [15:0] ouput_array_1_3_fu_236;
wire   [15:0] ouput_array_1_1_fu_1361_p3;
wire  signed [3:0] tmp_s_fu_978_p1;
wire   [4:0] bound_fu_990_p0;
wire   [3:0] bound_fu_990_p1;
wire   [28:0] OutputOffset2_sum_ca_fu_1018_p1;
wire   [28:0] tmp_17_fu_1021_p2;
wire   [27:0] tmp_fu_1026_p4;
wire   [28:0] tmp_18_fu_1040_p2;
wire   [27:0] tmp_10_fu_1045_p4;
wire   [0:0] exitcond_fu_1076_p2;
wire   [4:0] tr_V_fu_1070_p2;
wire   [9:0] grp_fu_1514_p3;
wire   [4:0] tmp_48_fu_1144_p1;
wire   [0:0] tmp_50_fu_1224_p3;
wire   [0:0] or_cond_fu_1231_p1;
wire  signed [31:0] tmp_22_fu_1239_p0;
wire   [44:0] tmp_22_fu_1239_p2;
wire  signed [31:0] tmp_24_fu_1259_p1;
wire   [0:0] tmp_51_fu_1268_p3;
wire   [0:0] or_cond1_fu_1276_p1;
wire   [29:0] tmp_11_fu_1281_p4;
wire   [0:0] or_cond1_fu_1276_p2;
wire  signed [31:0] tmp_output_1_fu_1290_p1;
wire   [31:0] tmp_output_1_2_fu_1294_p3;
wire   [31:0] tmp_26_fu_1302_p2;
wire   [15:0] tmp_55_fu_1307_p1;
wire   [15:0] tmp_56_fu_1311_p1;
wire   [31:0] tmp_25_fu_1337_p2;
wire   [15:0] tmp_52_fu_1342_p1;
wire   [15:0] tmp_53_fu_1346_p1;
wire   [0:0] tmp_58_fu_1357_p1;
wire   [15:0] tmp_output2_fu_1350_p3;
wire    ap_CS_fsm_state11;
wire   [5:0] grp_fu_1514_p0;
wire   [4:0] grp_fu_1514_p1;
wire   [4:0] grp_fu_1514_p2;
reg   [5:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [31:0] ap_return_2_preg;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [8:0] bound_fu_990_p00;
wire   [8:0] bound_fu_990_p10;
wire   [9:0] grp_fu_1514_p10;
wire   [9:0] grp_fu_1514_p20;
reg    ap_condition_626;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 tm_V = 6'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_return_0_preg = 6'd0;
#0 ap_return_1_preg = 32'd0;
#0 ap_return_2_preg = 32'd0;
end

YOLO2_FPGA_mux_32eLT #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 5 ),
    .dout_WIDTH( 32 ))
YOLO2_FPGA_mux_32eLT_U995(
    .din0(output_buffer_0_q0),
    .din1(output_buffer_1_q0),
    .din2(output_buffer_2_q0),
    .din3(output_buffer_3_q0),
    .din4(output_buffer_4_q0),
    .din5(output_buffer_5_q0),
    .din6(output_buffer_6_q0),
    .din7(output_buffer_7_q0),
    .din8(output_buffer_8_q0),
    .din9(output_buffer_9_q0),
    .din10(output_buffer_10_q0),
    .din11(output_buffer_11_q0),
    .din12(output_buffer_12_q0),
    .din13(output_buffer_13_q0),
    .din14(output_buffer_14_q0),
    .din15(output_buffer_15_q0),
    .din16(output_buffer_16_q0),
    .din17(output_buffer_17_q0),
    .din18(output_buffer_18_q0),
    .din19(output_buffer_19_q0),
    .din20(output_buffer_20_q0),
    .din21(output_buffer_21_q0),
    .din22(output_buffer_22_q0),
    .din23(output_buffer_23_q0),
    .din24(output_buffer_24_q0),
    .din25(output_buffer_25_q0),
    .din26(output_buffer_26_q0),
    .din27(output_buffer_27_q0),
    .din28(output_buffer_28_q0),
    .din29(output_buffer_29_q0),
    .din30(output_buffer_30_q0),
    .din31(output_buffer_31_q0),
    .din32(tmp_48_fu_1144_p1),
    .dout(tmp_output_2_fu_1148_p34)
);

YOLO2_FPGA_mac_murcU #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 10 ))
YOLO2_FPGA_mac_murcU_U996(
    .din0(grp_fu_1514_p0),
    .din1(grp_fu_1514_p1),
    .din2(grp_fu_1514_p2),
    .dout(grp_fu_1514_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((exitcond5_fu_1006_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if (((exitcond5_fu_1006_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 6'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_return_0_preg <= tm_next_0_V_write_a_reg_930;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_return_1_preg <= outputoffsetarray_0_1_reg_912;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_return_2_preg <= outputoffsetarray_1_1_reg_921;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((r_V_fu_1218_p2 == 5'd16) & (exitcond_flatten_reg_1681_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_tmp_output_1_3_reg_865 <= output_buffer_16_q0;
        end else if ((1'b1 == ap_condition_626)) begin
            ap_phi_reg_pp0_iter3_tmp_output_1_3_reg_865 <= output_buffer_31_q0;
        end else if (((r_V_fu_1218_p2 == 5'd30) & (exitcond_flatten_reg_1681_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_tmp_output_1_3_reg_865 <= output_buffer_30_q0;
        end else if (((r_V_fu_1218_p2 == 5'd29) & (exitcond_flatten_reg_1681_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_tmp_output_1_3_reg_865 <= output_buffer_29_q0;
        end else if (((r_V_fu_1218_p2 == 5'd28) & (exitcond_flatten_reg_1681_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_tmp_output_1_3_reg_865 <= output_buffer_28_q0;
        end else if (((r_V_fu_1218_p2 == 5'd27) & (exitcond_flatten_reg_1681_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_tmp_output_1_3_reg_865 <= output_buffer_27_q0;
        end else if (((r_V_fu_1218_p2 == 5'd26) & (exitcond_flatten_reg_1681_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_tmp_output_1_3_reg_865 <= output_buffer_26_q0;
        end else if (((r_V_fu_1218_p2 == 5'd25) & (exitcond_flatten_reg_1681_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_tmp_output_1_3_reg_865 <= output_buffer_25_q0;
        end else if (((r_V_fu_1218_p2 == 5'd24) & (exitcond_flatten_reg_1681_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_tmp_output_1_3_reg_865 <= output_buffer_24_q0;
        end else if (((r_V_fu_1218_p2 == 5'd23) & (exitcond_flatten_reg_1681_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_tmp_output_1_3_reg_865 <= output_buffer_23_q0;
        end else if (((r_V_fu_1218_p2 == 5'd22) & (exitcond_flatten_reg_1681_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_tmp_output_1_3_reg_865 <= output_buffer_22_q0;
        end else if (((r_V_fu_1218_p2 == 5'd21) & (exitcond_flatten_reg_1681_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_tmp_output_1_3_reg_865 <= output_buffer_21_q0;
        end else if (((r_V_fu_1218_p2 == 5'd20) & (exitcond_flatten_reg_1681_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_tmp_output_1_3_reg_865 <= output_buffer_20_q0;
        end else if (((r_V_fu_1218_p2 == 5'd19) & (exitcond_flatten_reg_1681_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_tmp_output_1_3_reg_865 <= output_buffer_19_q0;
        end else if (((r_V_fu_1218_p2 == 5'd18) & (exitcond_flatten_reg_1681_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_tmp_output_1_3_reg_865 <= output_buffer_18_q0;
        end else if (((r_V_fu_1218_p2 == 5'd17) & (exitcond_flatten_reg_1681_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_tmp_output_1_3_reg_865 <= output_buffer_17_q0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_tmp_output_1_3_reg_865 <= ap_phi_reg_pp0_iter2_tmp_output_1_3_reg_865;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        if (((or_cond_fu_1231_p2 == 1'd0) & (exitcond_flatten_reg_1681_pp0_iter2_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter4_tmp_output1_reg_903 <= tmp_output_2_reg_1946;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter4_tmp_output1_reg_903 <= ap_phi_reg_pp0_iter3_tmp_output1_reg_903;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        if (((exitcond_flatten_reg_1681_pp0_iter3_reg == 1'd0) & (or_cond_reg_1957 == 1'd1))) begin
            ap_phi_reg_pp0_iter5_tmp_output1_reg_903 <= tmp_output_fu_1265_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter5_tmp_output1_reg_903 <= ap_phi_reg_pp0_iter4_tmp_output1_reg_903;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_27_fu_1397_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        cnt_V_1_fu_220 <= cnt_V_fu_1391_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp0_stage0_11001) & (tmp_27_fu_1397_p2 == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1)))) begin
        cnt_V_1_fu_220 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_1006_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        indvar_flatten_reg_833 <= 9'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_1059_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_833 <= indvar_flatten_next_fu_1064_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((enable_read_read_fu_240_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        outputoffsetarray_0_1_reg_912 <= outputoffsetarray_0;
    end else if (((exitcond5_fu_1006_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        outputoffsetarray_0_1_reg_912 <= outputoffsetarray_fu_1036_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((enable_read_read_fu_240_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        outputoffsetarray_1_1_reg_921 <= outputoffsetarray_1;
    end else if (((exitcond5_fu_1006_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        outputoffsetarray_1_1_reg_921 <= outputoffsetarray1_fu_1055_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        p_0228_1_reg_809 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_0228_1_reg_809 <= ap_phi_mux_p_s_phi_fu_776_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_1006_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_0228_2_reg_844 <= p_0228_1_reg_809;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_1681 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0228_2_reg_844 <= tmp_29_mid2_v_reg_1695;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        p_2_reg_822 <= tm_count_V_reg_1666;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_2_reg_822 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_1006_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_5_reg_854 <= 5'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_1059_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_5_reg_854 <= tc_V_fu_1097_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((enable_read_read_fu_240_p2 == 1'd1) & (1'd0 == TC_MINe26_read_read_fu_306_p2) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_7_reg_784 <= 2'd2;
    end else if (((1'd1 == TC_MINe26_read_read_fu_306_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        p_7_reg_784 <= 2'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((enable_read_read_fu_240_p2 == 1'd1) & (1'd0 == TC_MINe26_read_read_fu_306_p2) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                p_8_reg_797[2] <= 1'b1;
    end else if (((1'd1 == TC_MINe26_read_read_fu_306_p2) & (1'b1 == ap_CS_fsm_state2))) begin
                p_8_reg_797[2] <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if (((enable_read_read_fu_240_p2 == 1'd1) & (1'd0 == TC_MINe26_read_read_fu_306_p2) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_s_reg_772 <= 5'd0;
    end else if (((1'd1 == TC_MINe26_read_read_fu_306_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        p_s_reg_772 <= rLoop;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_27_fu_1397_p2 == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        t_V_1_fu_216 <= outputoffset_V_fu_1437_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        t_V_1_fu_216 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_27_fu_1397_p2 == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        t_V_fu_212 <= outputoffset1_V_fu_1448_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        t_V_fu_212 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tm_V <= tmp_19_fu_1484_p2;
    end else if (((1'd1 == TC_MINe26_read_read_fu_306_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        tm_V <= tm_next_V_reg_1584;
    end else if (((init_read_read_fu_282_p2 == 1'd1) & (enable_read_read_fu_240_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tm_V <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((enable_read_read_fu_240_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tm_next_0_V_write_a_reg_930 <= tm_next_0_V_read;
    end else if (((exitcond5_fu_1006_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        tm_next_0_V_write_a_reg_930 <= tm_next_V_reg_1584;
    end
end

always @ (posedge ap_clk) begin
    if (((enable_read_read_fu_240_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        InterSubOutput_4b_V_reg_1590 <= InterSubOutput_4b_V_fu_952_p1;
        tm_next_V_reg_1584[4 : 0] <= tm_next_V_fu_948_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_tmp_output1_reg_903 <= ap_phi_reg_pp0_iter0_tmp_output1_reg_903;
        ap_phi_reg_pp0_iter1_tmp_output_1_3_reg_865 <= ap_phi_reg_pp0_iter0_tmp_output_1_3_reg_865;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_tmp_output1_reg_903 <= ap_phi_reg_pp0_iter1_tmp_output1_reg_903;
        ap_phi_reg_pp0_iter2_tmp_output_1_3_reg_865 <= ap_phi_reg_pp0_iter1_tmp_output_1_3_reg_865;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_reg_pp0_iter3_tmp_output1_reg_903 <= ap_phi_reg_pp0_iter2_tmp_output1_reg_903;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bound_reg_1657 <= bound_fu_990_p2;
        tmp_15_reg_1645 <= tmp_15_fu_970_p2;
        tmp_16_reg_1651[3 : 0] <= tmp_16_fu_975_p1[3 : 0];
        tmp_47_reg_1640 <= tmp_47_fu_967_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten_reg_1681 <= exitcond_flatten_fu_1059_p2;
        exitcond_flatten_reg_1681_pp0_iter1_reg <= exitcond_flatten_reg_1681;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exitcond_flatten_reg_1681_pp0_iter2_reg <= exitcond_flatten_reg_1681_pp0_iter1_reg;
        exitcond_flatten_reg_1681_pp0_iter3_reg <= exitcond_flatten_reg_1681_pp0_iter2_reg;
        exitcond_flatten_reg_1681_pp0_iter4_reg <= exitcond_flatten_reg_1681_pp0_iter3_reg;
        tmp_24_reg_1966 <= tmp_24_fu_1259_p2;
        tmp_output2_1_reg_1976 <= tmp_output2_1_fu_1315_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1681_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        or_cond_reg_1957 <= or_cond_fu_1231_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1681_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        ouput_array1_1_3_fu_228 <= ouput_array1_1_1_fu_1377_p3;
        ouput_array1_1_fu_224 <= ouput_array1_1_2_fu_1384_p3;
        ouput_array_1_3_fu_236 <= ouput_array_1_1_fu_1361_p3;
        ouput_array_1_fu_232 <= ouput_array_1_2_fu_1369_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_1059_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_5_mid2_reg_1690 <= p_5_mid2_fu_1081_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tm_count_V_reg_1666 <= tm_count_V_fu_1012_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_1059_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_29_mid2_v_reg_1695 <= tmp_29_mid2_v_fu_1089_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1681_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (or_cond_fu_1231_p2 == 1'd1))) begin
        tmp_7_reg_1961 <= {{tmp_22_fu_1239_p2[44:15]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        tmp_output_1_3_reg_865 <= ap_phi_reg_pp0_iter3_tmp_output_1_3_reg_865;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1681_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_output_2_reg_1946 <= tmp_output_2_fu_1148_p34;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_1059_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_reg_1681 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_p_0228_2_phi_fu_847_p4 = tmp_29_mid2_v_reg_1695;
    end else begin
        ap_phi_mux_p_0228_2_phi_fu_847_p4 = p_0228_2_reg_844;
    end
end

always @ (*) begin
    if (((1'd1 == TC_MINe26_read_read_fu_306_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_phi_mux_p_8_phi_fu_801_p4 = 3'd1;
    end else begin
        ap_phi_mux_p_8_phi_fu_801_p4 = p_8_reg_797;
    end
end

always @ (*) begin
    if (((1'd1 == TC_MINe26_read_read_fu_306_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_phi_mux_p_s_phi_fu_776_p4 = rLoop;
    end else begin
        ap_phi_mux_p_s_phi_fu_776_p4 = p_s_reg_772;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_return_0 = tm_next_0_V_write_a_reg_930;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_return_1 = outputoffsetarray_0_1_reg_912;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_return_2 = outputoffsetarray_1_1_reg_921;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_0_ce0 = 1'b1;
    end else begin
        output_buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_10_ce0 = 1'b1;
    end else begin
        output_buffer_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_11_ce0 = 1'b1;
    end else begin
        output_buffer_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_12_ce0 = 1'b1;
    end else begin
        output_buffer_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_13_ce0 = 1'b1;
    end else begin
        output_buffer_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_14_ce0 = 1'b1;
    end else begin
        output_buffer_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_15_ce0 = 1'b1;
    end else begin
        output_buffer_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_16_ce0 = 1'b1;
    end else begin
        output_buffer_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_17_ce0 = 1'b1;
    end else begin
        output_buffer_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_18_ce0 = 1'b1;
    end else begin
        output_buffer_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_19_ce0 = 1'b1;
    end else begin
        output_buffer_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_1_ce0 = 1'b1;
    end else begin
        output_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_20_ce0 = 1'b1;
    end else begin
        output_buffer_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_21_ce0 = 1'b1;
    end else begin
        output_buffer_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_22_ce0 = 1'b1;
    end else begin
        output_buffer_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_23_ce0 = 1'b1;
    end else begin
        output_buffer_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_24_ce0 = 1'b1;
    end else begin
        output_buffer_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_25_ce0 = 1'b1;
    end else begin
        output_buffer_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_26_ce0 = 1'b1;
    end else begin
        output_buffer_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_27_ce0 = 1'b1;
    end else begin
        output_buffer_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_28_ce0 = 1'b1;
    end else begin
        output_buffer_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_29_ce0 = 1'b1;
    end else begin
        output_buffer_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_2_ce0 = 1'b1;
    end else begin
        output_buffer_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_30_ce0 = 1'b1;
    end else begin
        output_buffer_30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_31_ce0 = 1'b1;
    end else begin
        output_buffer_31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_3_ce0 = 1'b1;
    end else begin
        output_buffer_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_4_ce0 = 1'b1;
    end else begin
        output_buffer_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_5_ce0 = 1'b1;
    end else begin
        output_buffer_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_6_ce0 = 1'b1;
    end else begin
        output_buffer_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_7_ce0 = 1'b1;
    end else begin
        output_buffer_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_8_ce0 = 1'b1;
    end else begin
        output_buffer_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_9_ce0 = 1'b1;
    end else begin
        output_buffer_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        output_tmp1_ce0 = 1'b1;
    end else begin
        output_tmp1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_27_fu_1397_p2 == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        output_tmp1_we0 = 1'b1;
    end else begin
        output_tmp1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        output_tmp_ce0 = 1'b1;
    end else begin
        output_tmp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_27_fu_1397_p2 == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        output_tmp_we0 = 1'b1;
    end else begin
        output_tmp_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((enable_read_read_fu_240_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((enable_read_read_fu_240_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond5_fu_1006_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_flatten_fu_1059_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_flatten_fu_1059_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign InterSubOutput_4b_V_fu_952_p1 = InterSubOutput[3:0];

assign OutputOffset2_sum_ca_fu_1018_p1 = OutputOffset2_sum;

assign TC_MINe26_read_read_fu_306_p2 = TC_MINe26;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_626 = (~(r_V_fu_1218_p2 == 5'd16) & ~(r_V_fu_1218_p2 == 5'd30) & ~(r_V_fu_1218_p2 == 5'd29) & ~(r_V_fu_1218_p2 == 5'd28) & ~(r_V_fu_1218_p2 == 5'd27) & ~(r_V_fu_1218_p2 == 5'd26) & ~(r_V_fu_1218_p2 == 5'd25) & ~(r_V_fu_1218_p2 == 5'd24) & ~(r_V_fu_1218_p2 == 5'd23) & ~(r_V_fu_1218_p2 == 5'd22) & ~(r_V_fu_1218_p2 == 5'd21) & ~(r_V_fu_1218_p2 == 5'd20) & ~(r_V_fu_1218_p2 == 5'd19) & ~(r_V_fu_1218_p2 == 5'd18) & ~(r_V_fu_1218_p2 == 5'd17) & (exitcond_flatten_reg_1681_pp0_iter1_reg == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_tmp_output1_reg_903 = 'bx;

assign ap_phi_reg_pp0_iter0_tmp_output_1_3_reg_865 = 'bx;

assign bound_fu_990_p0 = bound_fu_990_p00;

assign bound_fu_990_p00 = tmp_47_fu_967_p1;

assign bound_fu_990_p1 = bound_fu_990_p10;

assign bound_fu_990_p10 = $unsigned(tmp_s_fu_978_p1);

assign bound_fu_990_p2 = (bound_fu_990_p0 * bound_fu_990_p1);

assign cnt_V_fu_1391_p2 = (2'd1 + cnt_V_1_fu_220);

assign enable_read_read_fu_240_p2 = enable;

assign exitcond5_fu_1006_p2 = ((p_2_reg_822 == p_7_reg_784) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_1059_p2 = ((indvar_flatten_reg_833 == bound_reg_1657) ? 1'b1 : 1'b0);

assign exitcond_fu_1076_p2 = ((p_5_reg_854 == tmp_47_reg_1640) ? 1'b1 : 1'b0);

assign grp_fu_1514_p0 = 10'd26;

assign grp_fu_1514_p1 = grp_fu_1514_p10;

assign grp_fu_1514_p10 = tmp_29_mid2_v_reg_1695;

assign grp_fu_1514_p2 = grp_fu_1514_p20;

assign grp_fu_1514_p20 = p_5_mid2_reg_1690;

assign indvar_flatten_next_fu_1064_p2 = (indvar_flatten_reg_833 + 9'd1);

assign init_read_read_fu_282_p2 = init;

assign or_cond1_fu_1276_p1 = IsNL;

assign or_cond1_fu_1276_p2 = (tmp_51_fu_1268_p3 & or_cond1_fu_1276_p1);

assign or_cond_fu_1231_p1 = IsNL;

assign or_cond_fu_1231_p2 = (tmp_50_fu_1224_p3 & or_cond_fu_1231_p1);

assign ouput_array1_1_1_fu_1377_p3 = ((tmp_58_fu_1357_p1[0:0] === 1'b1) ? ouput_array1_1_3_fu_228 : tmp_output2_1_reg_1976);

assign ouput_array1_1_2_fu_1384_p3 = ((tmp_58_fu_1357_p1[0:0] === 1'b1) ? tmp_output2_1_reg_1976 : ouput_array1_1_fu_224);

assign ouput_array_1_1_fu_1361_p3 = ((tmp_58_fu_1357_p1[0:0] === 1'b1) ? tmp_output2_fu_1350_p3 : ouput_array_1_3_fu_236);

assign ouput_array_1_2_fu_1369_p3 = ((tmp_58_fu_1357_p1[0:0] === 1'b1) ? ouput_array_1_fu_232 : tmp_output2_fu_1350_p3);

assign output_buffer_0_address0 = tmp_42_cast_fu_1109_p1;

assign output_buffer_10_address0 = tmp_42_cast_fu_1109_p1;

assign output_buffer_11_address0 = tmp_42_cast_fu_1109_p1;

assign output_buffer_12_address0 = tmp_42_cast_fu_1109_p1;

assign output_buffer_13_address0 = tmp_42_cast_fu_1109_p1;

assign output_buffer_14_address0 = tmp_42_cast_fu_1109_p1;

assign output_buffer_15_address0 = tmp_42_cast_fu_1109_p1;

assign output_buffer_16_address0 = tmp_42_cast_fu_1109_p1;

assign output_buffer_17_address0 = tmp_42_cast_fu_1109_p1;

assign output_buffer_18_address0 = tmp_42_cast_fu_1109_p1;

assign output_buffer_19_address0 = tmp_42_cast_fu_1109_p1;

assign output_buffer_1_address0 = tmp_42_cast_fu_1109_p1;

assign output_buffer_20_address0 = tmp_42_cast_fu_1109_p1;

assign output_buffer_21_address0 = tmp_42_cast_fu_1109_p1;

assign output_buffer_22_address0 = tmp_42_cast_fu_1109_p1;

assign output_buffer_23_address0 = tmp_42_cast_fu_1109_p1;

assign output_buffer_24_address0 = tmp_42_cast_fu_1109_p1;

assign output_buffer_25_address0 = tmp_42_cast_fu_1109_p1;

assign output_buffer_26_address0 = tmp_42_cast_fu_1109_p1;

assign output_buffer_27_address0 = tmp_42_cast_fu_1109_p1;

assign output_buffer_28_address0 = tmp_42_cast_fu_1109_p1;

assign output_buffer_29_address0 = tmp_42_cast_fu_1109_p1;

assign output_buffer_2_address0 = tmp_42_cast_fu_1109_p1;

assign output_buffer_30_address0 = tmp_42_cast_fu_1109_p1;

assign output_buffer_31_address0 = tmp_42_cast_fu_1109_p1;

assign output_buffer_3_address0 = tmp_42_cast_fu_1109_p1;

assign output_buffer_4_address0 = tmp_42_cast_fu_1109_p1;

assign output_buffer_5_address0 = tmp_42_cast_fu_1109_p1;

assign output_buffer_6_address0 = tmp_42_cast_fu_1109_p1;

assign output_buffer_7_address0 = tmp_42_cast_fu_1109_p1;

assign output_buffer_8_address0 = tmp_42_cast_fu_1109_p1;

assign output_buffer_9_address0 = tmp_42_cast_fu_1109_p1;

assign output_tmp1_address0 = tmp_29_fu_1443_p1;

assign output_tmp1_d0 = {{ouput_array1_1_2_fu_1384_p3}, {ouput_array1_1_1_fu_1377_p3}};

assign output_tmp_address0 = tmp_28_fu_1432_p1;

assign output_tmp_d0 = {{ouput_array_1_1_fu_1361_p3}, {ouput_array_1_2_fu_1369_p3}};

assign outputoffset1_V_fu_1448_p2 = (t_V_fu_212 + 8'd1);

assign outputoffset_V_fu_1437_p2 = (t_V_1_fu_216 + 8'd1);

assign outputoffsetarray1_fu_1055_p1 = tmp_10_fu_1045_p4;

assign outputoffsetarray_fu_1036_p1 = tmp_fu_1026_p4;

assign p_5_mid2_fu_1081_p3 = ((exitcond_fu_1076_p2[0:0] === 1'b1) ? 5'd0 : p_5_reg_854);

assign r_V_fu_1218_p2 = (tmp_48_fu_1144_p1 ^ 5'd16);

assign tc_V_fu_1097_p2 = (p_5_mid2_fu_1081_p3 + 5'd1);

assign tm_count_V_fu_1012_p2 = (p_2_reg_822 + 2'd1);

assign tm_next_V_fu_948_p1 = mLoop;

assign tmp_10_fu_1045_p4 = {{tmp_18_fu_1040_p2[28:1]}};

assign tmp_11_fu_1281_p4 = {{tmp_24_reg_1966[44:15]}};

assign tmp_15_fu_970_p2 = ((LayerType == 32'd0) ? 1'b1 : 1'b0);

assign tmp_16_fu_975_p1 = InterSubOutput_4b_V_reg_1590;

assign tmp_17_fu_1021_p2 = (OutputOffset2_sum_ca_fu_1018_p1 + OutputOffset1_sum);

assign tmp_18_fu_1040_p2 = (OutputOffset2_sum_ca_fu_1018_p1 + OutputOffset1_sum1);

assign tmp_19_fu_1484_p2 = (tm_V + 6'd1);

assign tmp_22_fu_1239_p0 = tmp_output_2_reg_1946;

assign tmp_22_fu_1239_p2 = ($signed(tmp_22_fu_1239_p0) * $signed('hCCC));

assign tmp_24_fu_1259_p1 = ap_phi_reg_pp0_iter3_tmp_output_1_3_reg_865;

assign tmp_24_fu_1259_p2 = ($signed({{1'b0}, {45'd3276}}) * $signed(tmp_24_fu_1259_p1));

assign tmp_25_fu_1337_p2 = $signed(ap_phi_reg_pp0_iter5_tmp_output1_reg_903) >>> tmp_16_reg_1651;

assign tmp_26_fu_1302_p2 = $signed(tmp_output_1_2_fu_1294_p3) >>> tmp_16_reg_1651;

assign tmp_27_fu_1397_p2 = ((cnt_V_fu_1391_p2 == 2'd2) ? 1'b1 : 1'b0);

assign tmp_28_fu_1432_p1 = t_V_1_fu_216;

assign tmp_29_fu_1443_p1 = t_V_fu_212;

assign tmp_29_mid2_v_fu_1089_p3 = ((exitcond_fu_1076_p2[0:0] === 1'b1) ? tr_V_fu_1070_p2 : ap_phi_mux_p_0228_2_phi_fu_847_p4);

assign tmp_42_cast_fu_1109_p1 = grp_fu_1514_p3;

assign tmp_47_fu_967_p1 = TC_MIN[4:0];

assign tmp_48_fu_1144_p1 = tm_V[4:0];

assign tmp_50_fu_1224_p3 = tmp_output_2_reg_1946[32'd31];

assign tmp_51_fu_1268_p3 = tmp_output_1_3_reg_865[32'd31];

assign tmp_52_fu_1342_p1 = tmp_25_fu_1337_p2[15:0];

assign tmp_53_fu_1346_p1 = ap_phi_reg_pp0_iter5_tmp_output1_reg_903[15:0];

assign tmp_55_fu_1307_p1 = tmp_26_fu_1302_p2[15:0];

assign tmp_56_fu_1311_p1 = tmp_output_1_2_fu_1294_p3[15:0];

assign tmp_58_fu_1357_p1 = cnt_V_1_fu_220[0:0];

assign tmp_fu_1026_p4 = {{tmp_17_fu_1021_p2[28:1]}};

assign tmp_output2_1_fu_1315_p3 = ((tmp_15_reg_1645[0:0] === 1'b1) ? tmp_55_fu_1307_p1 : tmp_56_fu_1311_p1);

assign tmp_output2_fu_1350_p3 = ((tmp_15_reg_1645[0:0] === 1'b1) ? tmp_52_fu_1342_p1 : tmp_53_fu_1346_p1);

assign tmp_output_1_2_fu_1294_p3 = ((or_cond1_fu_1276_p2[0:0] === 1'b1) ? tmp_output_1_fu_1290_p1 : tmp_output_1_3_reg_865);

assign tmp_output_1_fu_1290_p1 = $signed(tmp_11_fu_1281_p4);

assign tmp_output_fu_1265_p1 = $signed(tmp_7_reg_1961);

assign tmp_s_fu_978_p1 = $signed(ap_phi_mux_p_8_phi_fu_801_p4);

assign tr_V_fu_1070_p2 = (5'd1 + ap_phi_mux_p_0228_2_phi_fu_847_p4);

always @ (posedge ap_clk) begin
    tm_next_V_reg_1584[5] <= 1'b0;
    tmp_16_reg_1651[31:4] <= 28'b0000000000000000000000000000;
    p_8_reg_797[1:0] <= 2'b01;
end

endmodule //outputpixel2buf
